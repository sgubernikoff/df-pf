{"ast":null,"code":"function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nimport { HEADING_PATTERN, PDF_ROLE_TO_HTML_ROLE } from './constants.js';\nexport function isPdfRole(role) {\n  return role in PDF_ROLE_TO_HTML_ROLE;\n}\nexport function isStructTreeNode(node) {\n  return 'children' in node;\n}\nexport function isStructTreeNodeWithOnlyContentChild(node) {\n  if (!isStructTreeNode(node)) {\n    return false;\n  }\n  return node.children.length === 1 && 0 in node.children && 'id' in node.children[0];\n}\nexport function getRoleAttributes(node) {\n  const attributes = {};\n  if (isStructTreeNode(node)) {\n    const role = node.role;\n    const matches = role.match(HEADING_PATTERN);\n    if (matches) {\n      attributes.role = 'heading';\n      attributes['aria-level'] = Number(matches[1]);\n    } else if (isPdfRole(role)) {\n      const htmlRole = PDF_ROLE_TO_HTML_ROLE[role];\n      if (htmlRole) {\n        attributes.role = htmlRole;\n      }\n    }\n  }\n  return attributes;\n}\nexport function getBaseAttributes(node) {\n  const attributes = {};\n  if (isStructTreeNode(node)) {\n    if (node.alt !== undefined) {\n      attributes['aria-label'] = node.alt;\n    }\n    if (node.lang !== undefined) {\n      attributes.lang = node.lang;\n    }\n    if (isStructTreeNodeWithOnlyContentChild(node)) {\n      const _node$children = _slicedToArray(node.children, 1),\n        child = _node$children[0];\n      if (child) {\n        const childAttributes = getBaseAttributes(child);\n        return Object.assign(Object.assign({}, attributes), childAttributes);\n      }\n    }\n  } else {\n    if ('id' in node) {\n      attributes['aria-owns'] = node.id;\n    }\n  }\n  return attributes;\n}\nexport function getAttributes(node) {\n  if (!node) {\n    return null;\n  }\n  return Object.assign(Object.assign({}, getRoleAttributes(node)), getBaseAttributes(node));\n}","map":null,"metadata":{},"sourceType":"module"}