{"ast":null,"code":"/* Copyright 2015 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport invariant from 'tiny-invariant';\nconst DEFAULT_LINK_REL = 'noopener noreferrer nofollow';\nexport default class LinkService {\n  constructor() {\n    this.externalLinkEnabled = true;\n    this.externalLinkRel = undefined;\n    this.externalLinkTarget = undefined;\n    this.isInPresentationMode = false;\n    this.pdfDocument = undefined;\n    this.pdfViewer = undefined;\n  }\n  setDocument(pdfDocument) {\n    this.pdfDocument = pdfDocument;\n  }\n  setViewer(pdfViewer) {\n    this.pdfViewer = pdfViewer;\n  }\n  setExternalLinkRel(externalLinkRel) {\n    this.externalLinkRel = externalLinkRel;\n  }\n  setExternalLinkTarget(externalLinkTarget) {\n    this.externalLinkTarget = externalLinkTarget;\n  }\n  setHistory() {\n    // Intentionally empty\n  }\n  get pagesCount() {\n    return this.pdfDocument ? this.pdfDocument.numPages : 0;\n  }\n  get page() {\n    invariant(this.pdfViewer, 'PDF viewer is not initialized.');\n    return this.pdfViewer.currentPageNumber || 0;\n  }\n  set page(value) {\n    invariant(this.pdfViewer, 'PDF viewer is not initialized.');\n    this.pdfViewer.currentPageNumber = value;\n  }\n  get rotation() {\n    return 0;\n  }\n  set rotation(_value) {\n    // Intentionally empty\n  }\n  goToDestination(dest) {\n    return new Promise(resolve => {\n      invariant(this.pdfDocument, 'PDF document not loaded.');\n      invariant(dest, 'Destination is not specified.');\n      if (typeof dest === 'string') {\n        this.pdfDocument.getDestination(dest).then(resolve);\n      } else if (Array.isArray(dest)) {\n        resolve(dest);\n      } else {\n        dest.then(resolve);\n      }\n    }).then(explicitDest => {\n      invariant(Array.isArray(explicitDest), `\"${explicitDest}\" is not a valid destination array.`);\n      const destRef = explicitDest[0];\n      new Promise(resolve => {\n        invariant(this.pdfDocument, 'PDF document not loaded.');\n        if (destRef instanceof Object) {\n          this.pdfDocument.getPageIndex(destRef).then(pageIndex => {\n            resolve(pageIndex);\n          }).catch(() => {\n            invariant(false, `\"${destRef}\" is not a valid page reference.`);\n          });\n        } else if (typeof destRef === 'number') {\n          resolve(destRef);\n        } else {\n          invariant(false, `\"${destRef}\" is not a valid destination reference.`);\n        }\n      }).then(pageIndex => {\n        const pageNumber = pageIndex + 1;\n        invariant(this.pdfViewer, 'PDF viewer is not initialized.');\n        invariant(pageNumber >= 1 && pageNumber <= this.pagesCount, `\"${pageNumber}\" is not a valid page number.`);\n        this.pdfViewer.scrollPageIntoView({\n          dest: explicitDest,\n          pageIndex,\n          pageNumber\n        });\n      });\n    });\n  }\n  navigateTo(dest) {\n    this.goToDestination(dest);\n  }\n  goToPage(pageNumber) {\n    const pageIndex = pageNumber - 1;\n    invariant(this.pdfViewer, 'PDF viewer is not initialized.');\n    invariant(pageNumber >= 1 && pageNumber <= this.pagesCount, `\"${pageNumber}\" is not a valid page number.`);\n    this.pdfViewer.scrollPageIntoView({\n      pageIndex,\n      pageNumber\n    });\n  }\n  addLinkAttributes(link, url, newWindow) {\n    link.href = url;\n    link.rel = this.externalLinkRel || DEFAULT_LINK_REL;\n    link.target = newWindow ? '_blank' : this.externalLinkTarget || '';\n  }\n  getDestinationHash() {\n    return '#';\n  }\n  getAnchorUrl() {\n    return '#';\n  }\n  setHash() {\n    // Intentionally empty\n  }\n  executeNamedAction() {\n    // Intentionally empty\n  }\n  cachePageRef() {\n    // Intentionally empty\n  }\n  isPageVisible() {\n    return true;\n  }\n  isPageCached() {\n    return true;\n  }\n  executeSetOCGState() {\n    // Intentionally empty\n  }\n}","map":null,"metadata":{},"sourceType":"module"}