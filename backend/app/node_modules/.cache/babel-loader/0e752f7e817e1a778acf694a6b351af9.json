{"ast":null,"code":"'use client';\n\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useLayoutEffect, useMemo, useRef } from 'react';\nimport makeCancellable from 'make-cancellable-promise';\nimport clsx from 'clsx';\nimport invariant from 'tiny-invariant';\nimport warning from 'warning';\nimport * as pdfjs from 'pdfjs-dist';\nimport usePageContext from '../shared/hooks/usePageContext.js';\nimport useResolver from '../shared/hooks/useResolver.js';\nimport { cancelRunningTask } from '../shared/utils.js';\nfunction isTextItem(item) {\n  return 'str' in item;\n}\nexport default function TextLayer() {\n  const pageContext = usePageContext();\n  invariant(pageContext, 'Unable to find Page context.');\n  const customTextRenderer = pageContext.customTextRenderer,\n    onGetTextError = pageContext.onGetTextError,\n    onGetTextSuccess = pageContext.onGetTextSuccess,\n    onRenderTextLayerError = pageContext.onRenderTextLayerError,\n    onRenderTextLayerSuccess = pageContext.onRenderTextLayerSuccess,\n    page = pageContext.page,\n    pageIndex = pageContext.pageIndex,\n    pageNumber = pageContext.pageNumber,\n    rotate = pageContext.rotate,\n    scale = pageContext.scale;\n  invariant(page, 'Attempted to load page text content, but no page was specified.');\n  const _useResolver = useResolver(),\n    _useResolver2 = _slicedToArray(_useResolver, 2),\n    textContentState = _useResolver2[0],\n    textContentDispatch = _useResolver2[1];\n  const textContent = textContentState.value,\n    textContentError = textContentState.error;\n  const layerElement = useRef(null);\n  warning(Number.parseInt(window.getComputedStyle(document.body).getPropertyValue('--react-pdf-text-layer'), 10) === 1, 'TextLayer styles not found. Read more: https://github.com/wojtekmaj/react-pdf#support-for-text-layer');\n  /**\n   * Called when a page text content is read successfully\n   */\n  function onLoadSuccess() {\n    if (!textContent) {\n      // Impossible, but TypeScript doesn't know that\n      return;\n    }\n    if (onGetTextSuccess) {\n      onGetTextSuccess(textContent);\n    }\n  }\n  /**\n   * Called when a page text content failed to read successfully\n   */\n  function onLoadError() {\n    if (!textContentError) {\n      // Impossible, but TypeScript doesn't know that\n      return;\n    }\n    warning(false, textContentError.toString());\n    if (onGetTextError) {\n      onGetTextError(textContentError);\n    }\n  }\n  // biome-ignore lint/correctness/useExhaustiveDependencies: useEffect intentionally triggered on page change\n  useEffect(function resetTextContent() {\n    textContentDispatch({\n      type: 'RESET'\n    });\n  }, [page, textContentDispatch]);\n  useEffect(function loadTextContent() {\n    if (!page) {\n      return;\n    }\n    const cancellable = makeCancellable(page.getTextContent());\n    const runningTask = cancellable;\n    cancellable.promise.then(nextTextContent => {\n      textContentDispatch({\n        type: 'RESOLVE',\n        value: nextTextContent\n      });\n    }).catch(error => {\n      textContentDispatch({\n        type: 'REJECT',\n        error\n      });\n    });\n    return () => cancelRunningTask(runningTask);\n  }, [page, textContentDispatch]);\n  // biome-ignore lint/correctness/useExhaustiveDependencies: Ommitted callbacks so they are not called every time they change\n  useEffect(() => {\n    if (textContent === undefined) {\n      return;\n    }\n    if (textContent === false) {\n      onLoadError();\n      return;\n    }\n    onLoadSuccess();\n  }, [textContent]);\n  /**\n   * Called when a text layer is rendered successfully\n   */\n  const onRenderSuccess = useCallback(() => {\n    if (onRenderTextLayerSuccess) {\n      onRenderTextLayerSuccess();\n    }\n  }, [onRenderTextLayerSuccess]);\n  /**\n   * Called when a text layer failed to render successfully\n   */\n  const onRenderError = useCallback(error => {\n    warning(false, error.toString());\n    if (onRenderTextLayerError) {\n      onRenderTextLayerError(error);\n    }\n  }, [onRenderTextLayerError]);\n  function onMouseDown() {\n    const layer = layerElement.current;\n    if (!layer) {\n      return;\n    }\n    layer.classList.add('selecting');\n  }\n  function onMouseUp() {\n    const layer = layerElement.current;\n    if (!layer) {\n      return;\n    }\n    layer.classList.remove('selecting');\n  }\n  const viewport = useMemo(() => page.getViewport({\n    scale,\n    rotation: rotate\n  }), [page, rotate, scale]);\n  useLayoutEffect(function renderTextLayer() {\n    if (!page || !textContent) {\n      return;\n    }\n    const layer = layerElement.current;\n    if (!layer) {\n      return;\n    }\n    layer.innerHTML = '';\n    const textContentSource = page.streamTextContent({\n      includeMarkedContent: true\n    });\n    const parameters = {\n      container: layer,\n      textContentSource,\n      viewport\n    };\n    const cancellable = new pdfjs.TextLayer(parameters);\n    const runningTask = cancellable;\n    cancellable.render().then(() => {\n      const end = document.createElement('div');\n      end.className = 'endOfContent';\n      layer.append(end);\n      const layerChildren = layer.querySelectorAll('[role=\"presentation\"]');\n      if (customTextRenderer) {\n        let index = 0;\n        textContent.items.forEach((item, itemIndex) => {\n          if (!isTextItem(item)) {\n            return;\n          }\n          const child = layerChildren[index];\n          if (!child) {\n            return;\n          }\n          const content = customTextRenderer(Object.assign({\n            pageIndex,\n            pageNumber,\n            itemIndex\n          }, item));\n          child.innerHTML = content;\n          index += item.str && item.hasEOL ? 2 : 1;\n        });\n      }\n      // Intentional immediate callback\n      onRenderSuccess();\n    }).catch(onRenderError);\n    return () => cancelRunningTask(runningTask);\n  }, [customTextRenderer, onRenderError, onRenderSuccess, page, pageIndex, pageNumber, textContent, viewport]);\n  return _jsx(\"div\", {\n    className: clsx('react-pdf__Page__textContent', 'textLayer'),\n    onMouseUp: onMouseUp,\n    onMouseDown: onMouseDown,\n    ref: layerElement\n  });\n}","map":null,"metadata":{},"sourceType":"module"}