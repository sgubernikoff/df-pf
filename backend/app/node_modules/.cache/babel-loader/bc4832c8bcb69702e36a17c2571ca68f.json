{"ast":null,"code":"var _PixelsPerInch, _EditorToolbar, _ImageManager, _AltText, _AnnotationEditor, _TextLayer, _PDFWorker, _FreeTextEditor, _FreeDrawOutliner, _ColorPicker, _HighlightEditor, _InkEditor, _StampEditor, _AnnotationEditorLayer, _DrawLayer;\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ _regeneratorRuntime = function () { return r; }; var t, r = {}, e = Object.prototype, n = e.hasOwnProperty, o = \"function\" == typeof Symbol ? Symbol : {}, i = o.iterator || \"@@iterator\", a = o.asyncIterator || \"@@asyncIterator\", u = o.toStringTag || \"@@toStringTag\"; function c(t, r, e, n) { return Object.defineProperty(t, r, { value: e, enumerable: !n, configurable: !n, writable: !n }); } try { c({}, \"\"); } catch (t) { c = function (t, r, e) { return t[r] = e; }; } function h(r, e, n, o) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype); return c(a, \"_invoke\", function (r, e, n) { var o = 1; return function (i, a) { if (3 === o) throw Error(\"Generator is already running\"); if (4 === o) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var u = n.delegate; if (u) { var c = d(u, n); if (c) { if (c === f) continue; return c; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (1 === o) throw o = 4, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = 3; var h = s(r, e, n); if (\"normal\" === h.type) { if (o = n.done ? 4 : 2, h.arg === f) continue; return { value: h.arg, done: n.done }; } \"throw\" === h.type && (o = 4, n.method = \"throw\", n.arg = h.arg); } }; }(r, n, new Context(o || [])), !0), a; } function s(t, r, e) { try { return { type: \"normal\", arg: t.call(r, e) }; } catch (t) { return { type: \"throw\", arg: t }; } } r.wrap = h; var f = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var l = {}; c(l, i, function () { return this; }); var p = Object.getPrototypeOf, y = p && p(p(x([]))); y && y !== e && n.call(y, i) && (l = y); var v = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(l); function g(t) { [\"next\", \"throw\", \"return\"].forEach(function (r) { c(t, r, function (t) { return this._invoke(r, t); }); }); } function AsyncIterator(t, r) { function e(o, i, a, u) { var c = s(t[o], t, i); if (\"throw\" !== c.type) { var h = c.arg, f = h.value; return f && \"object\" == typeof f && n.call(f, \"__await\") ? r.resolve(f.__await).then(function (t) { e(\"next\", t, a, u); }, function (t) { e(\"throw\", t, a, u); }) : r.resolve(f).then(function (t) { h.value = t, a(h); }, function (t) { return e(\"throw\", t, a, u); }); } u(c.arg); } var o; c(this, \"_invoke\", function (t, n) { function i() { return new r(function (r, o) { e(t, n, r, o); }); } return o = o ? o.then(i, i) : i(); }, !0); } function d(r, e) { var n = e.method, o = r.i[n]; if (o === t) return e.delegate = null, \"throw\" === n && r.i.return && (e.method = \"return\", e.arg = t, d(r, e), \"throw\" === e.method) || \"return\" !== n && (e.method = \"throw\", e.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), f; var i = s(o, r.i, e.arg); if (\"throw\" === i.type) return e.method = \"throw\", e.arg = i.arg, e.delegate = null, f; var a = i.arg; return a ? a.done ? (e[r.r] = a.value, e.next = r.n, \"return\" !== e.method && (e.method = \"next\", e.arg = t), e.delegate = null, f) : a : (e.method = \"throw\", e.arg = new TypeError(\"iterator result is not an object\"), e.delegate = null, f); } function w(t) { this.tryEntries.push(t); } function m(r) { var e = r[4] || {}; e.type = \"normal\", e.arg = t, r[4] = e; } function Context(t) { this.tryEntries = [[-1]], t.forEach(w, this), this.reset(!0); } function x(r) { if (null != r) { var e = r[i]; if (e) return e.call(r); if (\"function\" == typeof r.next) return r; if (!isNaN(r.length)) { var o = -1, a = function e() { for (; ++o < r.length;) if (n.call(r, o)) return e.value = r[o], e.done = !1, e; return e.value = t, e.done = !0, e; }; return a.next = a; } } throw new TypeError(typeof r + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, c(v, \"constructor\", GeneratorFunctionPrototype), c(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = c(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), r.isGeneratorFunction = function (t) { var r = \"function\" == typeof t && t.constructor; return !!r && (r === GeneratorFunction || \"GeneratorFunction\" === (r.displayName || r.name)); }, r.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, c(t, u, \"GeneratorFunction\")), t.prototype = Object.create(v), t; }, r.awrap = function (t) { return { __await: t }; }, g(AsyncIterator.prototype), c(AsyncIterator.prototype, a, function () { return this; }), r.AsyncIterator = AsyncIterator, r.async = function (t, e, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(h(t, e, n, o), i); return r.isGeneratorFunction(e) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, g(v), c(v, u, \"Generator\"), c(v, i, function () { return this; }), c(v, \"toString\", function () { return \"[object Generator]\"; }), r.keys = function (t) { var r = Object(t), e = []; for (var n in r) e.unshift(n); return function t() { for (; e.length;) if ((n = e.pop()) in r) return t.value = n, t.done = !1, t; return t.done = !0, t; }; }, r.values = x, Context.prototype = { constructor: Context, reset: function (r) { if (this.prev = this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(m), !r) for (var e in this) \"t\" === e.charAt(0) && n.call(this, e) && !isNaN(+e.slice(1)) && (this[e] = t); }, stop: function () { this.done = !0; var t = this.tryEntries[0][4]; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function (r) { if (this.done) throw r; var e = this; function n(t) { a.type = \"throw\", a.arg = r, e.next = t; } for (var o = e.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i[4], u = this.prev, c = i[1], h = i[2]; if (-1 === i[0]) return n(\"end\"), !1; if (!c && !h) throw Error(\"try statement without catch or finally\"); if (null != i[0] && i[0] <= u) { if (u < c) return this.method = \"next\", this.arg = t, n(c), !0; if (u < h) return n(h), !1; } } }, abrupt: function (t, r) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var n = this.tryEntries[e]; if (n[0] > -1 && n[0] <= this.prev && this.prev < n[2]) { var o = n; break; } } o && (\"break\" === t || \"continue\" === t) && o[0] <= r && r <= o[2] && (o = null); var i = o ? o[4] : {}; return i.type = t, i.arg = r, o ? (this.method = \"next\", this.next = o[2], f) : this.complete(i); }, complete: function (t, r) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && r && (this.next = r), f; }, finish: function (t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[2] === t) return this.complete(e[4], e[3]), m(e), f; } }, catch: function (t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[0] === t) { var n = e[4]; if (\"throw\" === n.type) { var o = n.arg; m(e); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function (r, e, n) { return this.delegate = { i: x(r), r: e, n: n }, \"next\" === this.method && (this.arg = t), f; } }, r; }\nfunction _toArray(r) { return _arrayWithHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableRest(); }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _classPrivateFieldLooseBase(e, t) { if (!{}.hasOwnProperty.call(e, t)) throw new TypeError(\"attempted to use private field on non-instance\"); return e; }\nvar id = 0;\nfunction _classPrivateFieldLooseKey(e) { return \"__private_\" + id++ + \"_\" + e; }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n/**\n * @licstart The following is the entire license notice for the\n * JavaScript code in this page\n *\n * Copyright 2024 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * JavaScript code in this page\n */\n\n/******/ // The require scope\n/******/\nvar __webpack_require__ = {};\n/******/\n/************************************************************************/\n/******/ /* webpack/runtime/define property getters */\n/******/\n(() => {\n  /******/ // define getter functions for harmony exports\n  /******/__webpack_require__.d = (exports, definition) => {\n    /******/for (var key in definition) {\n      /******/if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n        /******/Object.defineProperty(exports, key, {\n          enumerable: true,\n          get: definition[key]\n        });\n        /******/\n      }\n      /******/\n    }\n    /******/\n  };\n  /******/\n})();\n/******/\n/******/ /* webpack/runtime/hasOwnProperty shorthand */\n/******/\n(() => {\n  /******/__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\n  /******/\n})();\n/******/\n/************************************************************************/\nvar __webpack_exports__ = globalThis.pdfjsLib = {};\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  AbortException: () => (/* reexport */AbortException),\n  AnnotationEditorLayer: () => (/* reexport */AnnotationEditorLayer),\n  AnnotationEditorParamsType: () => (/* reexport */AnnotationEditorParamsType),\n  AnnotationEditorType: () => (/* reexport */AnnotationEditorType),\n  AnnotationEditorUIManager: () => (/* reexport */AnnotationEditorUIManager),\n  AnnotationLayer: () => (/* reexport */AnnotationLayer),\n  AnnotationMode: () => (/* reexport */AnnotationMode),\n  ColorPicker: () => (/* reexport */ColorPicker),\n  DOMSVGFactory: () => (/* reexport */DOMSVGFactory),\n  DrawLayer: () => (/* reexport */DrawLayer),\n  FeatureTest: () => (/* reexport */util_FeatureTest),\n  GlobalWorkerOptions: () => (/* reexport */GlobalWorkerOptions),\n  ImageKind: () => (/* reexport */util_ImageKind),\n  InvalidPDFException: () => (/* reexport */InvalidPDFException),\n  MissingPDFException: () => (/* reexport */MissingPDFException),\n  OPS: () => (/* reexport */OPS),\n  OutputScale: () => (/* reexport */OutputScale),\n  PDFDataRangeTransport: () => (/* reexport */PDFDataRangeTransport),\n  PDFDateString: () => (/* reexport */PDFDateString),\n  PDFWorker: () => (/* reexport */PDFWorker),\n  PasswordResponses: () => (/* reexport */PasswordResponses),\n  PermissionFlag: () => (/* reexport */PermissionFlag),\n  PixelsPerInch: () => (/* reexport */PixelsPerInch),\n  RenderingCancelledException: () => (/* reexport */RenderingCancelledException),\n  TextLayer: () => (/* reexport */TextLayer),\n  UnexpectedResponseException: () => (/* reexport */UnexpectedResponseException),\n  Util: () => (/* reexport */Util),\n  VerbosityLevel: () => (/* reexport */VerbosityLevel),\n  XfaLayer: () => (/* reexport */XfaLayer),\n  build: () => (/* reexport */build),\n  createValidAbsoluteUrl: () => (/* reexport */createValidAbsoluteUrl),\n  fetchData: () => (/* reexport */fetchData),\n  getDocument: () => (/* reexport */getDocument),\n  getFilenameFromUrl: () => (/* reexport */getFilenameFromUrl),\n  getPdfFilenameFromUrl: () => (/* reexport */getPdfFilenameFromUrl),\n  getXfaPageViewport: () => (/* reexport */getXfaPageViewport),\n  isDataScheme: () => (/* reexport */isDataScheme),\n  isPdfFile: () => (/* reexport */isPdfFile),\n  noContextMenu: () => (/* reexport */noContextMenu),\n  normalizeUnicode: () => (/* reexport */normalizeUnicode),\n  setLayerDimensions: () => (/* reexport */setLayerDimensions),\n  shadow: () => (/* reexport */shadow),\n  version: () => (/* reexport */version)\n});\n; // ./src/shared/util.js\nconst isNodeJS = typeof process === \"object\" && process + \"\" === \"[object process]\" && !process.versions.nw && !(process.versions.electron && process.type && process.type !== \"browser\");\nconst IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];\nconst FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];\nconst MAX_IMAGE_SIZE_TO_CACHE = 10e6;\nconst LINE_FACTOR = 1.35;\nconst LINE_DESCENT_FACTOR = 0.35;\nconst BASELINE_FACTOR = LINE_DESCENT_FACTOR / LINE_FACTOR;\nconst RenderingIntentFlag = {\n  ANY: 0x01,\n  DISPLAY: 0x02,\n  PRINT: 0x04,\n  SAVE: 0x08,\n  ANNOTATIONS_FORMS: 0x10,\n  ANNOTATIONS_STORAGE: 0x20,\n  ANNOTATIONS_DISABLE: 0x40,\n  IS_EDITING: 0x80,\n  OPLIST: 0x100\n};\nconst AnnotationMode = {\n  DISABLE: 0,\n  ENABLE: 1,\n  ENABLE_FORMS: 2,\n  ENABLE_STORAGE: 3\n};\nconst AnnotationEditorPrefix = \"pdfjs_internal_editor_\";\nconst AnnotationEditorType = {\n  DISABLE: -1,\n  NONE: 0,\n  FREETEXT: 3,\n  HIGHLIGHT: 9,\n  STAMP: 13,\n  INK: 15\n};\nconst AnnotationEditorParamsType = {\n  RESIZE: 1,\n  CREATE: 2,\n  FREETEXT_SIZE: 11,\n  FREETEXT_COLOR: 12,\n  FREETEXT_OPACITY: 13,\n  INK_COLOR: 21,\n  INK_THICKNESS: 22,\n  INK_OPACITY: 23,\n  HIGHLIGHT_COLOR: 31,\n  HIGHLIGHT_DEFAULT_COLOR: 32,\n  HIGHLIGHT_THICKNESS: 33,\n  HIGHLIGHT_FREE: 34,\n  HIGHLIGHT_SHOW_ALL: 35\n};\nconst PermissionFlag = {\n  PRINT: 0x04,\n  MODIFY_CONTENTS: 0x08,\n  COPY: 0x10,\n  MODIFY_ANNOTATIONS: 0x20,\n  FILL_INTERACTIVE_FORMS: 0x100,\n  COPY_FOR_ACCESSIBILITY: 0x200,\n  ASSEMBLE: 0x400,\n  PRINT_HIGH_QUALITY: 0x800\n};\nconst TextRenderingMode = {\n  FILL: 0,\n  STROKE: 1,\n  FILL_STROKE: 2,\n  INVISIBLE: 3,\n  FILL_ADD_TO_PATH: 4,\n  STROKE_ADD_TO_PATH: 5,\n  FILL_STROKE_ADD_TO_PATH: 6,\n  ADD_TO_PATH: 7,\n  FILL_STROKE_MASK: 3,\n  ADD_TO_PATH_FLAG: 4\n};\nconst util_ImageKind = {\n  GRAYSCALE_1BPP: 1,\n  RGB_24BPP: 2,\n  RGBA_32BPP: 3\n};\nconst AnnotationType = {\n  TEXT: 1,\n  LINK: 2,\n  FREETEXT: 3,\n  LINE: 4,\n  SQUARE: 5,\n  CIRCLE: 6,\n  POLYGON: 7,\n  POLYLINE: 8,\n  HIGHLIGHT: 9,\n  UNDERLINE: 10,\n  SQUIGGLY: 11,\n  STRIKEOUT: 12,\n  STAMP: 13,\n  CARET: 14,\n  INK: 15,\n  POPUP: 16,\n  FILEATTACHMENT: 17,\n  SOUND: 18,\n  MOVIE: 19,\n  WIDGET: 20,\n  SCREEN: 21,\n  PRINTERMARK: 22,\n  TRAPNET: 23,\n  WATERMARK: 24,\n  THREED: 25,\n  REDACT: 26\n};\nconst AnnotationReplyType = {\n  GROUP: \"Group\",\n  REPLY: \"R\"\n};\nconst AnnotationFlag = {\n  INVISIBLE: 0x01,\n  HIDDEN: 0x02,\n  PRINT: 0x04,\n  NOZOOM: 0x08,\n  NOROTATE: 0x10,\n  NOVIEW: 0x20,\n  READONLY: 0x40,\n  LOCKED: 0x80,\n  TOGGLENOVIEW: 0x100,\n  LOCKEDCONTENTS: 0x200\n};\nconst AnnotationFieldFlag = {\n  READONLY: 0x0000001,\n  REQUIRED: 0x0000002,\n  NOEXPORT: 0x0000004,\n  MULTILINE: 0x0001000,\n  PASSWORD: 0x0002000,\n  NOTOGGLETOOFF: 0x0004000,\n  RADIO: 0x0008000,\n  PUSHBUTTON: 0x0010000,\n  COMBO: 0x0020000,\n  EDIT: 0x0040000,\n  SORT: 0x0080000,\n  FILESELECT: 0x0100000,\n  MULTISELECT: 0x0200000,\n  DONOTSPELLCHECK: 0x0400000,\n  DONOTSCROLL: 0x0800000,\n  COMB: 0x1000000,\n  RICHTEXT: 0x2000000,\n  RADIOSINUNISON: 0x2000000,\n  COMMITONSELCHANGE: 0x4000000\n};\nconst AnnotationBorderStyleType = {\n  SOLID: 1,\n  DASHED: 2,\n  BEVELED: 3,\n  INSET: 4,\n  UNDERLINE: 5\n};\nconst AnnotationActionEventType = {\n  E: \"Mouse Enter\",\n  X: \"Mouse Exit\",\n  D: \"Mouse Down\",\n  U: \"Mouse Up\",\n  Fo: \"Focus\",\n  Bl: \"Blur\",\n  PO: \"PageOpen\",\n  PC: \"PageClose\",\n  PV: \"PageVisible\",\n  PI: \"PageInvisible\",\n  K: \"Keystroke\",\n  F: \"Format\",\n  V: \"Validate\",\n  C: \"Calculate\"\n};\nconst DocumentActionEventType = {\n  WC: \"WillClose\",\n  WS: \"WillSave\",\n  DS: \"DidSave\",\n  WP: \"WillPrint\",\n  DP: \"DidPrint\"\n};\nconst PageActionEventType = {\n  O: \"PageOpen\",\n  C: \"PageClose\"\n};\nconst VerbosityLevel = {\n  ERRORS: 0,\n  WARNINGS: 1,\n  INFOS: 5\n};\nconst OPS = {\n  dependency: 1,\n  setLineWidth: 2,\n  setLineCap: 3,\n  setLineJoin: 4,\n  setMiterLimit: 5,\n  setDash: 6,\n  setRenderingIntent: 7,\n  setFlatness: 8,\n  setGState: 9,\n  save: 10,\n  restore: 11,\n  transform: 12,\n  moveTo: 13,\n  lineTo: 14,\n  curveTo: 15,\n  curveTo2: 16,\n  curveTo3: 17,\n  closePath: 18,\n  rectangle: 19,\n  stroke: 20,\n  closeStroke: 21,\n  fill: 22,\n  eoFill: 23,\n  fillStroke: 24,\n  eoFillStroke: 25,\n  closeFillStroke: 26,\n  closeEOFillStroke: 27,\n  endPath: 28,\n  clip: 29,\n  eoClip: 30,\n  beginText: 31,\n  endText: 32,\n  setCharSpacing: 33,\n  setWordSpacing: 34,\n  setHScale: 35,\n  setLeading: 36,\n  setFont: 37,\n  setTextRenderingMode: 38,\n  setTextRise: 39,\n  moveText: 40,\n  setLeadingMoveText: 41,\n  setTextMatrix: 42,\n  nextLine: 43,\n  showText: 44,\n  showSpacedText: 45,\n  nextLineShowText: 46,\n  nextLineSetSpacingShowText: 47,\n  setCharWidth: 48,\n  setCharWidthAndBounds: 49,\n  setStrokeColorSpace: 50,\n  setFillColorSpace: 51,\n  setStrokeColor: 52,\n  setStrokeColorN: 53,\n  setFillColor: 54,\n  setFillColorN: 55,\n  setStrokeGray: 56,\n  setFillGray: 57,\n  setStrokeRGBColor: 58,\n  setFillRGBColor: 59,\n  setStrokeCMYKColor: 60,\n  setFillCMYKColor: 61,\n  shadingFill: 62,\n  beginInlineImage: 63,\n  beginImageData: 64,\n  endInlineImage: 65,\n  paintXObject: 66,\n  markPoint: 67,\n  markPointProps: 68,\n  beginMarkedContent: 69,\n  beginMarkedContentProps: 70,\n  endMarkedContent: 71,\n  beginCompat: 72,\n  endCompat: 73,\n  paintFormXObjectBegin: 74,\n  paintFormXObjectEnd: 75,\n  beginGroup: 76,\n  endGroup: 77,\n  beginAnnotation: 80,\n  endAnnotation: 81,\n  paintImageMaskXObject: 83,\n  paintImageMaskXObjectGroup: 84,\n  paintImageXObject: 85,\n  paintInlineImageXObject: 86,\n  paintInlineImageXObjectGroup: 87,\n  paintImageXObjectRepeat: 88,\n  paintImageMaskXObjectRepeat: 89,\n  paintSolidColorImageMask: 90,\n  constructPath: 91,\n  setStrokeTransparent: 92,\n  setFillTransparent: 93\n};\nconst PasswordResponses = {\n  NEED_PASSWORD: 1,\n  INCORRECT_PASSWORD: 2\n};\nlet verbosity = VerbosityLevel.WARNINGS;\nfunction setVerbosityLevel(level) {\n  if (Number.isInteger(level)) {\n    verbosity = level;\n  }\n}\nfunction getVerbosityLevel() {\n  return verbosity;\n}\nfunction info(msg) {\n  if (verbosity >= VerbosityLevel.INFOS) {\n    console.log(`Info: ${msg}`);\n  }\n}\nfunction warn(msg) {\n  if (verbosity >= VerbosityLevel.WARNINGS) {\n    console.log(`Warning: ${msg}`);\n  }\n}\nfunction unreachable(msg) {\n  throw new Error(msg);\n}\nfunction assert(cond, msg) {\n  if (!cond) {\n    unreachable(msg);\n  }\n}\nfunction _isValidProtocol(url) {\n  switch (url === null || url === void 0 ? void 0 : url.protocol) {\n    case \"http:\":\n    case \"https:\":\n    case \"ftp:\":\n    case \"mailto:\":\n    case \"tel:\":\n      return true;\n    default:\n      return false;\n  }\n}\nfunction createValidAbsoluteUrl(url) {\n  let baseUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  if (!url) {\n    return null;\n  }\n  try {\n    if (options && typeof url === \"string\") {\n      if (options.addDefaultProtocol && url.startsWith(\"www.\")) {\n        const dots = url.match(/\\./g);\n        if ((dots === null || dots === void 0 ? void 0 : dots.length) >= 2) {\n          url = `http://${url}`;\n        }\n      }\n      if (options.tryConvertEncoding) {\n        try {\n          url = stringToUTF8String(url);\n        } catch {}\n      }\n    }\n    const absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);\n    if (_isValidProtocol(absoluteUrl)) {\n      return absoluteUrl;\n    }\n  } catch {}\n  return null;\n}\nfunction shadow(obj, prop, value) {\n  let nonSerializable = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  Object.defineProperty(obj, prop, {\n    value,\n    enumerable: !nonSerializable,\n    configurable: true,\n    writable: false\n  });\n  return value;\n}\nconst BaseException = function BaseExceptionClosure() {\n  function BaseException(message, name) {\n    this.message = message;\n    this.name = name;\n  }\n  BaseException.prototype = new Error();\n  BaseException.constructor = BaseException;\n  return BaseException;\n}();\nclass PasswordException extends BaseException {\n  constructor(msg, code) {\n    super(msg, \"PasswordException\");\n    this.code = code;\n  }\n}\nclass UnknownErrorException extends BaseException {\n  constructor(msg, details) {\n    super(msg, \"UnknownErrorException\");\n    this.details = details;\n  }\n}\nclass InvalidPDFException extends BaseException {\n  constructor(msg) {\n    super(msg, \"InvalidPDFException\");\n  }\n}\nclass MissingPDFException extends BaseException {\n  constructor(msg) {\n    super(msg, \"MissingPDFException\");\n  }\n}\nclass UnexpectedResponseException extends BaseException {\n  constructor(msg, status) {\n    super(msg, \"UnexpectedResponseException\");\n    this.status = status;\n  }\n}\nclass FormatError extends BaseException {\n  constructor(msg) {\n    super(msg, \"FormatError\");\n  }\n}\nclass AbortException extends BaseException {\n  constructor(msg) {\n    super(msg, \"AbortException\");\n  }\n}\nfunction bytesToString(bytes) {\n  if (typeof bytes !== \"object\" || (bytes === null || bytes === void 0 ? void 0 : bytes.length) === undefined) {\n    unreachable(\"Invalid argument for bytesToString\");\n  }\n  const length = bytes.length;\n  const MAX_ARGUMENT_COUNT = 8192;\n  if (length < MAX_ARGUMENT_COUNT) {\n    return String.fromCharCode.apply(null, bytes);\n  }\n  const strBuf = [];\n  for (let i = 0; i < length; i += MAX_ARGUMENT_COUNT) {\n    const chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);\n    const chunk = bytes.subarray(i, chunkEnd);\n    strBuf.push(String.fromCharCode.apply(null, chunk));\n  }\n  return strBuf.join(\"\");\n}\nfunction stringToBytes(str) {\n  if (typeof str !== \"string\") {\n    unreachable(\"Invalid argument for stringToBytes\");\n  }\n  const length = str.length;\n  const bytes = new Uint8Array(length);\n  for (let i = 0; i < length; ++i) {\n    bytes[i] = str.charCodeAt(i) & 0xff;\n  }\n  return bytes;\n}\nfunction string32(value) {\n  return String.fromCharCode(value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff);\n}\nfunction objectSize(obj) {\n  return Object.keys(obj).length;\n}\nfunction objectFromMap(map) {\n  const obj = Object.create(null);\n  for (const _ref of map) {\n    var _ref2 = _slicedToArray(_ref, 2);\n    const key = _ref2[0];\n    const value = _ref2[1];\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction isLittleEndian() {\n  const buffer8 = new Uint8Array(4);\n  buffer8[0] = 1;\n  const view32 = new Uint32Array(buffer8.buffer, 0, 1);\n  return view32[0] === 1;\n}\nfunction isEvalSupported() {\n  try {\n    new Function(\"\");\n    return true;\n  } catch {\n    return false;\n  }\n}\nclass util_FeatureTest {\n  static get isLittleEndian() {\n    return shadow(this, \"isLittleEndian\", isLittleEndian());\n  }\n  static get isEvalSupported() {\n    return shadow(this, \"isEvalSupported\", isEvalSupported());\n  }\n  static get isOffscreenCanvasSupported() {\n    return shadow(this, \"isOffscreenCanvasSupported\", typeof OffscreenCanvas !== \"undefined\");\n  }\n  static get platform() {\n    var _navigator;\n    if (typeof navigator !== \"undefined\" && typeof ((_navigator = navigator) === null || _navigator === void 0 ? void 0 : _navigator.platform) === \"string\") {\n      var _navigator2;\n      return shadow(this, \"platform\", {\n        isMac: navigator.platform.includes(\"Mac\"),\n        isWindows: navigator.platform.includes(\"Win\"),\n        isFirefox: typeof ((_navigator2 = navigator) === null || _navigator2 === void 0 ? void 0 : _navigator2.userAgent) === \"string\" && navigator.userAgent.includes(\"Firefox\")\n      });\n    }\n    return shadow(this, \"platform\", {\n      isMac: false,\n      isWindows: false,\n      isFirefox: false\n    });\n  }\n  static get isCSSRoundSupported() {\n    var _globalThis$CSS, _globalThis$CSS$suppo;\n    return shadow(this, \"isCSSRoundSupported\", (_globalThis$CSS = globalThis.CSS) === null || _globalThis$CSS === void 0 ? void 0 : (_globalThis$CSS$suppo = _globalThis$CSS.supports) === null || _globalThis$CSS$suppo === void 0 ? void 0 : _globalThis$CSS$suppo.call(_globalThis$CSS, \"width: round(1.5px, 1px)\"));\n  }\n}\nconst hexNumbers = Array.from(Array(256).keys(), n => n.toString(16).padStart(2, \"0\"));\nvar _getExtremumOnCurve = /*#__PURE__*/_classPrivateFieldLooseKey(\"getExtremumOnCurve\");\nvar _getExtremum = /*#__PURE__*/_classPrivateFieldLooseKey(\"getExtremum\");\nclass Util {\n  static makeHexColor(r, g, b) {\n    return `#${hexNumbers[r]}${hexNumbers[g]}${hexNumbers[b]}`;\n  }\n  static scaleMinMax(transform, minMax) {\n    let temp;\n    if (transform[0]) {\n      if (transform[0] < 0) {\n        temp = minMax[0];\n        minMax[0] = minMax[2];\n        minMax[2] = temp;\n      }\n      minMax[0] *= transform[0];\n      minMax[2] *= transform[0];\n      if (transform[3] < 0) {\n        temp = minMax[1];\n        minMax[1] = minMax[3];\n        minMax[3] = temp;\n      }\n      minMax[1] *= transform[3];\n      minMax[3] *= transform[3];\n    } else {\n      temp = minMax[0];\n      minMax[0] = minMax[1];\n      minMax[1] = temp;\n      temp = minMax[2];\n      minMax[2] = minMax[3];\n      minMax[3] = temp;\n      if (transform[1] < 0) {\n        temp = minMax[1];\n        minMax[1] = minMax[3];\n        minMax[3] = temp;\n      }\n      minMax[1] *= transform[1];\n      minMax[3] *= transform[1];\n      if (transform[2] < 0) {\n        temp = minMax[0];\n        minMax[0] = minMax[2];\n        minMax[2] = temp;\n      }\n      minMax[0] *= transform[2];\n      minMax[2] *= transform[2];\n    }\n    minMax[0] += transform[4];\n    minMax[1] += transform[5];\n    minMax[2] += transform[4];\n    minMax[3] += transform[5];\n  }\n  static transform(m1, m2) {\n    return [m1[0] * m2[0] + m1[2] * m2[1], m1[1] * m2[0] + m1[3] * m2[1], m1[0] * m2[2] + m1[2] * m2[3], m1[1] * m2[2] + m1[3] * m2[3], m1[0] * m2[4] + m1[2] * m2[5] + m1[4], m1[1] * m2[4] + m1[3] * m2[5] + m1[5]];\n  }\n  static applyTransform(p, m) {\n    const xt = p[0] * m[0] + p[1] * m[2] + m[4];\n    const yt = p[0] * m[1] + p[1] * m[3] + m[5];\n    return [xt, yt];\n  }\n  static applyInverseTransform(p, m) {\n    const d = m[0] * m[3] - m[1] * m[2];\n    const xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;\n    const yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;\n    return [xt, yt];\n  }\n  static getAxialAlignedBoundingBox(r, m) {\n    const p1 = this.applyTransform(r, m);\n    const p2 = this.applyTransform(r.slice(2, 4), m);\n    const p3 = this.applyTransform([r[0], r[3]], m);\n    const p4 = this.applyTransform([r[2], r[1]], m);\n    return [Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1])];\n  }\n  static inverseTransform(m) {\n    const d = m[0] * m[3] - m[1] * m[2];\n    return [m[3] / d, -m[1] / d, -m[2] / d, m[0] / d, (m[2] * m[5] - m[4] * m[3]) / d, (m[4] * m[1] - m[5] * m[0]) / d];\n  }\n  static singularValueDecompose2dScale(m) {\n    const transpose = [m[0], m[2], m[1], m[3]];\n    const a = m[0] * transpose[0] + m[1] * transpose[2];\n    const b = m[0] * transpose[1] + m[1] * transpose[3];\n    const c = m[2] * transpose[0] + m[3] * transpose[2];\n    const d = m[2] * transpose[1] + m[3] * transpose[3];\n    const first = (a + d) / 2;\n    const second = Math.sqrt((a + d) ** 2 - 4 * (a * d - c * b)) / 2;\n    const sx = first + second || 1;\n    const sy = first - second || 1;\n    return [Math.sqrt(sx), Math.sqrt(sy)];\n  }\n  static normalizeRect(rect) {\n    const r = rect.slice(0);\n    if (rect[0] > rect[2]) {\n      r[0] = rect[2];\n      r[2] = rect[0];\n    }\n    if (rect[1] > rect[3]) {\n      r[1] = rect[3];\n      r[3] = rect[1];\n    }\n    return r;\n  }\n  static intersect(rect1, rect2) {\n    const xLow = Math.max(Math.min(rect1[0], rect1[2]), Math.min(rect2[0], rect2[2]));\n    const xHigh = Math.min(Math.max(rect1[0], rect1[2]), Math.max(rect2[0], rect2[2]));\n    if (xLow > xHigh) {\n      return null;\n    }\n    const yLow = Math.max(Math.min(rect1[1], rect1[3]), Math.min(rect2[1], rect2[3]));\n    const yHigh = Math.min(Math.max(rect1[1], rect1[3]), Math.max(rect2[1], rect2[3]));\n    if (yLow > yHigh) {\n      return null;\n    }\n    return [xLow, yLow, xHigh, yHigh];\n  }\n  static bezierBoundingBox(x0, y0, x1, y1, x2, y2, x3, y3, minMax) {\n    if (minMax) {\n      minMax[0] = Math.min(minMax[0], x0, x3);\n      minMax[1] = Math.min(minMax[1], y0, y3);\n      minMax[2] = Math.max(minMax[2], x0, x3);\n      minMax[3] = Math.max(minMax[3], y0, y3);\n    } else {\n      minMax = [Math.min(x0, x3), Math.min(y0, y3), Math.max(x0, x3), Math.max(y0, y3)];\n    }\n    _classPrivateFieldLooseBase(this, _getExtremum)[_getExtremum](x0, x1, x2, x3, y0, y1, y2, y3, 3 * (-x0 + 3 * (x1 - x2) + x3), 6 * (x0 - 2 * x1 + x2), 3 * (x1 - x0), minMax);\n    _classPrivateFieldLooseBase(this, _getExtremum)[_getExtremum](x0, x1, x2, x3, y0, y1, y2, y3, 3 * (-y0 + 3 * (y1 - y2) + y3), 6 * (y0 - 2 * y1 + y2), 3 * (y1 - y0), minMax);\n    return minMax;\n  }\n}\nfunction _getExtremumOnCurve2(x0, x1, x2, x3, y0, y1, y2, y3, t, minMax) {\n  if (t <= 0 || t >= 1) {\n    return;\n  }\n  const mt = 1 - t;\n  const tt = t * t;\n  const ttt = tt * t;\n  const x = mt * (mt * (mt * x0 + 3 * t * x1) + 3 * tt * x2) + ttt * x3;\n  const y = mt * (mt * (mt * y0 + 3 * t * y1) + 3 * tt * y2) + ttt * y3;\n  minMax[0] = Math.min(minMax[0], x);\n  minMax[1] = Math.min(minMax[1], y);\n  minMax[2] = Math.max(minMax[2], x);\n  minMax[3] = Math.max(minMax[3], y);\n}\nfunction _getExtremum2(x0, x1, x2, x3, y0, y1, y2, y3, a, b, c, minMax) {\n  if (Math.abs(a) < 1e-12) {\n    if (Math.abs(b) >= 1e-12) {\n      _classPrivateFieldLooseBase(this, _getExtremumOnCurve)[_getExtremumOnCurve](x0, x1, x2, x3, y0, y1, y2, y3, -c / b, minMax);\n    }\n    return;\n  }\n  const delta = b ** 2 - 4 * c * a;\n  if (delta < 0) {\n    return;\n  }\n  const sqrtDelta = Math.sqrt(delta);\n  const a2 = 2 * a;\n  _classPrivateFieldLooseBase(this, _getExtremumOnCurve)[_getExtremumOnCurve](x0, x1, x2, x3, y0, y1, y2, y3, (-b + sqrtDelta) / a2, minMax);\n  _classPrivateFieldLooseBase(this, _getExtremumOnCurve)[_getExtremumOnCurve](x0, x1, x2, x3, y0, y1, y2, y3, (-b - sqrtDelta) / a2, minMax);\n}\nObject.defineProperty(Util, _getExtremum, {\n  value: _getExtremum2\n});\nObject.defineProperty(Util, _getExtremumOnCurve, {\n  value: _getExtremumOnCurve2\n});\nconst PDFStringTranslateTable = /* unused pure expression or super */null && [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2d8, 0x2c7, 0x2c6, 0x2d9, 0x2dd, 0x2db, 0x2da, 0x2dc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192, 0x2044, 0x2039, 0x203a, 0x2212, 0x2030, 0x201e, 0x201c, 0x201d, 0x2018, 0x2019, 0x201a, 0x2122, 0xfb01, 0xfb02, 0x141, 0x152, 0x160, 0x178, 0x17d, 0x131, 0x142, 0x153, 0x161, 0x17e, 0, 0x20ac];\nfunction stringToPDFString(str) {\n  if (str[0] >= \"\\xEF\") {\n    let encoding;\n    if (str[0] === \"\\xFE\" && str[1] === \"\\xFF\") {\n      encoding = \"utf-16be\";\n      if (str.length % 2 === 1) {\n        str = str.slice(0, -1);\n      }\n    } else if (str[0] === \"\\xFF\" && str[1] === \"\\xFE\") {\n      encoding = \"utf-16le\";\n      if (str.length % 2 === 1) {\n        str = str.slice(0, -1);\n      }\n    } else if (str[0] === \"\\xEF\" && str[1] === \"\\xBB\" && str[2] === \"\\xBF\") {\n      encoding = \"utf-8\";\n    }\n    if (encoding) {\n      try {\n        const decoder = new TextDecoder(encoding, {\n          fatal: true\n        });\n        const buffer = stringToBytes(str);\n        const decoded = decoder.decode(buffer);\n        if (!decoded.includes(\"\\x1b\")) {\n          return decoded;\n        }\n        return decoded.replaceAll(/\\x1b[^\\x1b]*(?:\\x1b|$)/g, \"\");\n      } catch (ex) {\n        warn(`stringToPDFString: \"${ex}\".`);\n      }\n    }\n  }\n  const strBuf = [];\n  for (let i = 0, ii = str.length; i < ii; i++) {\n    const charCode = str.charCodeAt(i);\n    if (charCode === 0x1b) {\n      while (++i < ii && str.charCodeAt(i) !== 0x1b) {}\n      continue;\n    }\n    const code = PDFStringTranslateTable[charCode];\n    strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));\n  }\n  return strBuf.join(\"\");\n}\nfunction stringToUTF8String(str) {\n  return decodeURIComponent(escape(str));\n}\nfunction utf8StringToString(str) {\n  return unescape(encodeURIComponent(str));\n}\nfunction isArrayEqual(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n  for (let i = 0, ii = arr1.length; i < ii; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction getModificationDate() {\n  let date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n  const buffer = [date.getUTCFullYear().toString(), (date.getUTCMonth() + 1).toString().padStart(2, \"0\"), date.getUTCDate().toString().padStart(2, \"0\"), date.getUTCHours().toString().padStart(2, \"0\"), date.getUTCMinutes().toString().padStart(2, \"0\"), date.getUTCSeconds().toString().padStart(2, \"0\")];\n  return buffer.join(\"\");\n}\nlet NormalizeRegex = null;\nlet NormalizationMap = null;\nfunction normalizeUnicode(str) {\n  if (!NormalizeRegex) {\n    NormalizeRegex = /([\\u00a0\\u00b5\\u037e\\u0eb3\\u2000-\\u200a\\u202f\\u2126\\ufb00-\\ufb04\\ufb06\\ufb20-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40-\\ufb41\\ufb43-\\ufb44\\ufb46-\\ufba1\\ufba4-\\ufba9\\ufbae-\\ufbb1\\ufbd3-\\ufbdc\\ufbde-\\ufbe7\\ufbea-\\ufbf8\\ufbfc-\\ufbfd\\ufc00-\\ufc5d\\ufc64-\\ufcf1\\ufcf5-\\ufd3d\\ufd88\\ufdf4\\ufdfa-\\ufdfb\\ufe71\\ufe77\\ufe79\\ufe7b\\ufe7d]+)|(\\ufb05+)/gu;\n    NormalizationMap = new Map([[\"ﬅ\", \"ſt\"]]);\n  }\n  return str.replaceAll(NormalizeRegex, (_, p1, p2) => p1 ? p1.normalize(\"NFKC\") : NormalizationMap.get(p2));\n}\nfunction getUuid() {\n  var _crypto, _crypto2;\n  if (typeof crypto !== \"undefined\" && typeof ((_crypto = crypto) === null || _crypto === void 0 ? void 0 : _crypto.randomUUID) === \"function\") {\n    return crypto.randomUUID();\n  }\n  const buf = new Uint8Array(32);\n  if (typeof crypto !== \"undefined\" && typeof ((_crypto2 = crypto) === null || _crypto2 === void 0 ? void 0 : _crypto2.getRandomValues) === \"function\") {\n    crypto.getRandomValues(buf);\n  } else {\n    for (let i = 0; i < 32; i++) {\n      buf[i] = Math.floor(Math.random() * 255);\n    }\n  }\n  return bytesToString(buf);\n}\nconst AnnotationPrefix = \"pdfjs_internal_id_\";\nconst FontRenderOps = {\n  BEZIER_CURVE_TO: 0,\n  MOVE_TO: 1,\n  LINE_TO: 2,\n  QUADRATIC_CURVE_TO: 3,\n  RESTORE: 4,\n  SAVE: 5,\n  SCALE: 6,\n  TRANSFORM: 7,\n  TRANSLATE: 8\n};\nfunction toHexUtil(arr) {\n  if (Uint8Array.prototype.toHex) {\n    return arr.toHex();\n  }\n  return Array.from(arr, num => hexNumbers[num]).join(\"\");\n}\nfunction toBase64Util(arr) {\n  if (Uint8Array.prototype.toBase64) {\n    return arr.toBase64();\n  }\n  return btoa(bytesToString(arr));\n}\nfunction fromBase64Util(str) {\n  if (Uint8Array.fromBase64) {\n    return Uint8Array.fromBase64(str);\n  }\n  return stringToBytes(atob(str));\n}\n; // ./src/display/display_utils.js\n\nconst SVG_NS = \"http://www.w3.org/2000/svg\";\nclass PixelsPerInch {}\n_PixelsPerInch = PixelsPerInch;\nPixelsPerInch.CSS = 96.0;\nPixelsPerInch.PDF = 72.0;\nPixelsPerInch.PDF_TO_CSS_UNITS = _PixelsPerInch.CSS / _PixelsPerInch.PDF;\nasync function fetchData(url) {\n  let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"text\";\n  if (isValidFetchUrl(url, document.baseURI)) {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    switch (type) {\n      case \"arraybuffer\":\n        return response.arrayBuffer();\n      case \"blob\":\n        return response.blob();\n      case \"json\":\n        return response.json();\n    }\n    return response.text();\n  }\n  return new Promise((resolve, reject) => {\n    const request = new XMLHttpRequest();\n    request.open(\"GET\", url, true);\n    request.responseType = type;\n    request.onreadystatechange = () => {\n      if (request.readyState !== XMLHttpRequest.DONE) {\n        return;\n      }\n      if (request.status === 200 || request.status === 0) {\n        switch (type) {\n          case \"arraybuffer\":\n          case \"blob\":\n          case \"json\":\n            resolve(request.response);\n            return;\n        }\n        resolve(request.responseText);\n        return;\n      }\n      reject(new Error(request.statusText));\n    };\n    request.send(null);\n  });\n}\nclass PageViewport {\n  constructor(_ref3) {\n    let viewBox = _ref3.viewBox,\n      scale = _ref3.scale,\n      rotation = _ref3.rotation,\n      _ref3$offsetX = _ref3.offsetX,\n      offsetX = _ref3$offsetX === void 0 ? 0 : _ref3$offsetX,\n      _ref3$offsetY = _ref3.offsetY,\n      offsetY = _ref3$offsetY === void 0 ? 0 : _ref3$offsetY,\n      _ref3$dontFlip = _ref3.dontFlip,\n      dontFlip = _ref3$dontFlip === void 0 ? false : _ref3$dontFlip;\n    this.viewBox = viewBox;\n    this.scale = scale;\n    this.rotation = rotation;\n    this.offsetX = offsetX;\n    this.offsetY = offsetY;\n    const centerX = (viewBox[2] + viewBox[0]) / 2;\n    const centerY = (viewBox[3] + viewBox[1]) / 2;\n    let rotateA, rotateB, rotateC, rotateD;\n    rotation %= 360;\n    if (rotation < 0) {\n      rotation += 360;\n    }\n    switch (rotation) {\n      case 180:\n        rotateA = -1;\n        rotateB = 0;\n        rotateC = 0;\n        rotateD = 1;\n        break;\n      case 90:\n        rotateA = 0;\n        rotateB = 1;\n        rotateC = 1;\n        rotateD = 0;\n        break;\n      case 270:\n        rotateA = 0;\n        rotateB = -1;\n        rotateC = -1;\n        rotateD = 0;\n        break;\n      case 0:\n        rotateA = 1;\n        rotateB = 0;\n        rotateC = 0;\n        rotateD = -1;\n        break;\n      default:\n        throw new Error(\"PageViewport: Invalid rotation, must be a multiple of 90 degrees.\");\n    }\n    if (dontFlip) {\n      rotateC = -rotateC;\n      rotateD = -rotateD;\n    }\n    let offsetCanvasX, offsetCanvasY;\n    let width, height;\n    if (rotateA === 0) {\n      offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;\n      offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;\n      width = (viewBox[3] - viewBox[1]) * scale;\n      height = (viewBox[2] - viewBox[0]) * scale;\n    } else {\n      offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;\n      offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;\n      width = (viewBox[2] - viewBox[0]) * scale;\n      height = (viewBox[3] - viewBox[1]) * scale;\n    }\n    this.transform = [rotateA * scale, rotateB * scale, rotateC * scale, rotateD * scale, offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY, offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY];\n    this.width = width;\n    this.height = height;\n  }\n  get rawDims() {\n    const viewBox = this.viewBox;\n    return shadow(this, \"rawDims\", {\n      pageWidth: viewBox[2] - viewBox[0],\n      pageHeight: viewBox[3] - viewBox[1],\n      pageX: viewBox[0],\n      pageY: viewBox[1]\n    });\n  }\n  clone() {\n    let _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref4$scale = _ref4.scale,\n      scale = _ref4$scale === void 0 ? this.scale : _ref4$scale,\n      _ref4$rotation = _ref4.rotation,\n      rotation = _ref4$rotation === void 0 ? this.rotation : _ref4$rotation,\n      _ref4$offsetX = _ref4.offsetX,\n      offsetX = _ref4$offsetX === void 0 ? this.offsetX : _ref4$offsetX,\n      _ref4$offsetY = _ref4.offsetY,\n      offsetY = _ref4$offsetY === void 0 ? this.offsetY : _ref4$offsetY,\n      _ref4$dontFlip = _ref4.dontFlip,\n      dontFlip = _ref4$dontFlip === void 0 ? false : _ref4$dontFlip;\n    return new PageViewport({\n      viewBox: this.viewBox.slice(),\n      scale,\n      rotation,\n      offsetX,\n      offsetY,\n      dontFlip\n    });\n  }\n  convertToViewportPoint(x, y) {\n    return Util.applyTransform([x, y], this.transform);\n  }\n  convertToViewportRectangle(rect) {\n    const topLeft = Util.applyTransform([rect[0], rect[1]], this.transform);\n    const bottomRight = Util.applyTransform([rect[2], rect[3]], this.transform);\n    return [topLeft[0], topLeft[1], bottomRight[0], bottomRight[1]];\n  }\n  convertToPdfPoint(x, y) {\n    return Util.applyInverseTransform([x, y], this.transform);\n  }\n}\nclass RenderingCancelledException extends BaseException {\n  constructor(msg) {\n    let extraDelay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    super(msg, \"RenderingCancelledException\");\n    this.extraDelay = extraDelay;\n  }\n}\nfunction isDataScheme(url) {\n  const ii = url.length;\n  let i = 0;\n  while (i < ii && url[i].trim() === \"\") {\n    i++;\n  }\n  return url.substring(i, i + 5).toLowerCase() === \"data:\";\n}\nfunction isPdfFile(filename) {\n  return typeof filename === \"string\" && /\\.pdf$/i.test(filename);\n}\nfunction getFilenameFromUrl(url) {\n  var _url$split = url.split(/[#?]/, 1);\n  var _url$split2 = _slicedToArray(_url$split, 1);\n  url = _url$split2[0];\n  return url.substring(url.lastIndexOf(\"/\") + 1);\n}\nfunction getPdfFilenameFromUrl(url) {\n  let defaultFilename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"document.pdf\";\n  if (typeof url !== \"string\") {\n    return defaultFilename;\n  }\n  if (isDataScheme(url)) {\n    warn('getPdfFilenameFromUrl: ignore \"data:\"-URL for performance reasons.');\n    return defaultFilename;\n  }\n  const reURI = /^(?:(?:[^:]+:)?\\/\\/[^/]+)?([^?#]*)(\\?[^#]*)?(#.*)?$/;\n  const reFilename = /[^/?#=]+\\.pdf\\b(?!.*\\.pdf\\b)/i;\n  const splitURI = reURI.exec(url);\n  let suggestedFilename = reFilename.exec(splitURI[1]) || reFilename.exec(splitURI[2]) || reFilename.exec(splitURI[3]);\n  if (suggestedFilename) {\n    suggestedFilename = suggestedFilename[0];\n    if (suggestedFilename.includes(\"%\")) {\n      try {\n        suggestedFilename = reFilename.exec(decodeURIComponent(suggestedFilename))[0];\n      } catch {}\n    }\n  }\n  return suggestedFilename || defaultFilename;\n}\nclass StatTimer {\n  constructor() {\n    this.started = Object.create(null);\n    this.times = [];\n  }\n  time(name) {\n    if (name in this.started) {\n      warn(`Timer is already running for ${name}`);\n    }\n    this.started[name] = Date.now();\n  }\n  timeEnd(name) {\n    if (!(name in this.started)) {\n      warn(`Timer has not been started for ${name}`);\n    }\n    this.times.push({\n      name,\n      start: this.started[name],\n      end: Date.now()\n    });\n    delete this.started[name];\n  }\n  toString() {\n    const outBuf = [];\n    let longest = 0;\n    for (const _ref5 of this.times) {\n      const name = _ref5.name;\n      longest = Math.max(name.length, longest);\n    }\n    for (const _ref6 of this.times) {\n      const name = _ref6.name;\n      const start = _ref6.start;\n      const end = _ref6.end;\n      outBuf.push(`${name.padEnd(longest)} ${end - start}ms\\n`);\n    }\n    return outBuf.join(\"\");\n  }\n}\nfunction isValidFetchUrl(url, baseUrl) {\n  try {\n    const _ref7 = baseUrl ? new URL(url, baseUrl) : new URL(url),\n      protocol = _ref7.protocol;\n    return protocol === \"http:\" || protocol === \"https:\";\n  } catch {\n    return false;\n  }\n}\nfunction noContextMenu(e) {\n  e.preventDefault();\n}\nfunction deprecated(details) {\n  console.log(\"Deprecated API usage: \" + details);\n}\nvar _regex = /*#__PURE__*/_classPrivateFieldLooseKey(\"regex\");\nclass PDFDateString {\n  static toDateObject(input) {\n    var _classPrivateFieldLoo;\n    if (!input || typeof input !== \"string\") {\n      return null;\n    }\n    (_classPrivateFieldLoo = _classPrivateFieldLooseBase(this, _regex))[_regex] || (_classPrivateFieldLoo[_regex] = new RegExp(\"^D:\" + \"(\\\\d{4})\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"([Z|+|-])?\" + \"(\\\\d{2})?\" + \"'?\" + \"(\\\\d{2})?\" + \"'?\"));\n    const matches = _classPrivateFieldLooseBase(this, _regex)[_regex].exec(input);\n    if (!matches) {\n      return null;\n    }\n    const year = parseInt(matches[1], 10);\n    let month = parseInt(matches[2], 10);\n    month = month >= 1 && month <= 12 ? month - 1 : 0;\n    let day = parseInt(matches[3], 10);\n    day = day >= 1 && day <= 31 ? day : 1;\n    let hour = parseInt(matches[4], 10);\n    hour = hour >= 0 && hour <= 23 ? hour : 0;\n    let minute = parseInt(matches[5], 10);\n    minute = minute >= 0 && minute <= 59 ? minute : 0;\n    let second = parseInt(matches[6], 10);\n    second = second >= 0 && second <= 59 ? second : 0;\n    const universalTimeRelation = matches[7] || \"Z\";\n    let offsetHour = parseInt(matches[8], 10);\n    offsetHour = offsetHour >= 0 && offsetHour <= 23 ? offsetHour : 0;\n    let offsetMinute = parseInt(matches[9], 10) || 0;\n    offsetMinute = offsetMinute >= 0 && offsetMinute <= 59 ? offsetMinute : 0;\n    if (universalTimeRelation === \"-\") {\n      hour += offsetHour;\n      minute += offsetMinute;\n    } else if (universalTimeRelation === \"+\") {\n      hour -= offsetHour;\n      minute -= offsetMinute;\n    }\n    return new Date(Date.UTC(year, month, day, hour, minute, second));\n  }\n}\nObject.defineProperty(PDFDateString, _regex, {\n  writable: true,\n  value: void 0\n});\nfunction getXfaPageViewport(xfaPage, _ref8) {\n  let _ref8$scale = _ref8.scale,\n    scale = _ref8$scale === void 0 ? 1 : _ref8$scale,\n    _ref8$rotation = _ref8.rotation,\n    rotation = _ref8$rotation === void 0 ? 0 : _ref8$rotation;\n  const _xfaPage$attributes$s = xfaPage.attributes.style,\n    width = _xfaPage$attributes$s.width,\n    height = _xfaPage$attributes$s.height;\n  const viewBox = [0, 0, parseInt(width), parseInt(height)];\n  return new PageViewport({\n    viewBox,\n    scale,\n    rotation\n  });\n}\nfunction getRGB(color) {\n  if (color.startsWith(\"#\")) {\n    const colorRGB = parseInt(color.slice(1), 16);\n    return [(colorRGB & 0xff0000) >> 16, (colorRGB & 0x00ff00) >> 8, colorRGB & 0x0000ff];\n  }\n  if (color.startsWith(\"rgb(\")) {\n    return color.slice(4, -1).split(\",\").map(x => parseInt(x));\n  }\n  if (color.startsWith(\"rgba(\")) {\n    return color.slice(5, -1).split(\",\").map(x => parseInt(x)).slice(0, 3);\n  }\n  warn(`Not a valid color format: \"${color}\"`);\n  return [0, 0, 0];\n}\nfunction getColorValues(colors) {\n  const span = document.createElement(\"span\");\n  span.style.visibility = \"hidden\";\n  document.body.append(span);\n  for (const name of colors.keys()) {\n    span.style.color = name;\n    const computedColor = window.getComputedStyle(span).color;\n    colors.set(name, getRGB(computedColor));\n  }\n  span.remove();\n}\nfunction getCurrentTransform(ctx) {\n  const _ctx$getTransform = ctx.getTransform(),\n    a = _ctx$getTransform.a,\n    b = _ctx$getTransform.b,\n    c = _ctx$getTransform.c,\n    d = _ctx$getTransform.d,\n    e = _ctx$getTransform.e,\n    f = _ctx$getTransform.f;\n  return [a, b, c, d, e, f];\n}\nfunction getCurrentTransformInverse(ctx) {\n  const _ctx$getTransform$inv = ctx.getTransform().invertSelf(),\n    a = _ctx$getTransform$inv.a,\n    b = _ctx$getTransform$inv.b,\n    c = _ctx$getTransform$inv.c,\n    d = _ctx$getTransform$inv.d,\n    e = _ctx$getTransform$inv.e,\n    f = _ctx$getTransform$inv.f;\n  return [a, b, c, d, e, f];\n}\nfunction setLayerDimensions(div, viewport) {\n  let mustFlip = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let mustRotate = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  if (viewport instanceof PageViewport) {\n    const _viewport$rawDims = viewport.rawDims,\n      pageWidth = _viewport$rawDims.pageWidth,\n      pageHeight = _viewport$rawDims.pageHeight;\n    const style = div.style;\n    const useRound = util_FeatureTest.isCSSRoundSupported;\n    const w = `var(--scale-factor) * ${pageWidth}px`,\n      h = `var(--scale-factor) * ${pageHeight}px`;\n    const widthStr = useRound ? `round(down, ${w}, var(--scale-round-x, 1px))` : `calc(${w})`,\n      heightStr = useRound ? `round(down, ${h}, var(--scale-round-y, 1px))` : `calc(${h})`;\n    if (!mustFlip || viewport.rotation % 180 === 0) {\n      style.width = widthStr;\n      style.height = heightStr;\n    } else {\n      style.width = heightStr;\n      style.height = widthStr;\n    }\n  }\n  if (mustRotate) {\n    div.setAttribute(\"data-main-rotation\", viewport.rotation);\n  }\n}\nclass OutputScale {\n  constructor() {\n    const pixelRatio = window.devicePixelRatio || 1;\n    this.sx = pixelRatio;\n    this.sy = pixelRatio;\n  }\n  get scaled() {\n    return this.sx !== 1 || this.sy !== 1;\n  }\n  get symmetric() {\n    return this.sx === this.sy;\n  }\n}\n; // ./src/display/editor/toolbar.js\nvar _toolbar = /*#__PURE__*/_classPrivateFieldLooseKey(\"toolbar\");\nvar _colorPicker = /*#__PURE__*/_classPrivateFieldLooseKey(\"colorPicker\");\nvar _editor = /*#__PURE__*/_classPrivateFieldLooseKey(\"editor\");\nvar _buttons = /*#__PURE__*/_classPrivateFieldLooseKey(\"buttons\");\nvar _altText = /*#__PURE__*/_classPrivateFieldLooseKey(\"altText\");\nvar _l10nRemove = /*#__PURE__*/_classPrivateFieldLooseKey(\"l10nRemove\");\nvar _pointerDown = /*#__PURE__*/_classPrivateFieldLooseKey(\"pointerDown\");\nvar _focusIn = /*#__PURE__*/_classPrivateFieldLooseKey(\"focusIn\");\nvar _focusOut = /*#__PURE__*/_classPrivateFieldLooseKey(\"focusOut\");\nvar _addListenersToElement = /*#__PURE__*/_classPrivateFieldLooseKey(\"addListenersToElement\");\nvar _addDeleteButton = /*#__PURE__*/_classPrivateFieldLooseKey(\"addDeleteButton\");\nvar _divider = /*#__PURE__*/_classPrivateFieldLooseKey(\"divider\");\nclass EditorToolbar {\n  constructor(editor) {\n    var _classPrivateFieldLoo2;\n    Object.defineProperty(this, _divider, {\n      get: _get_divider,\n      set: void 0\n    });\n    Object.defineProperty(this, _addDeleteButton, {\n      value: _addDeleteButton2\n    });\n    Object.defineProperty(this, _addListenersToElement, {\n      value: _addListenersToElement2\n    });\n    Object.defineProperty(this, _focusOut, {\n      value: _focusOut2\n    });\n    Object.defineProperty(this, _focusIn, {\n      value: _focusIn2\n    });\n    Object.defineProperty(this, _toolbar, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _colorPicker, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _editor, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _buttons, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _altText, {\n      writable: true,\n      value: null\n    });\n    _classPrivateFieldLooseBase(this, _editor)[_editor] = editor;\n    (_classPrivateFieldLoo2 = _classPrivateFieldLooseBase(EditorToolbar, _l10nRemove))[_l10nRemove] || (_classPrivateFieldLoo2[_l10nRemove] = Object.freeze({\n      freetext: \"pdfjs-editor-remove-freetext-button\",\n      highlight: \"pdfjs-editor-remove-highlight-button\",\n      ink: \"pdfjs-editor-remove-ink-button\",\n      stamp: \"pdfjs-editor-remove-stamp-button\"\n    }));\n  }\n  render() {\n    const editToolbar = _classPrivateFieldLooseBase(this, _toolbar)[_toolbar] = document.createElement(\"div\");\n    editToolbar.classList.add(\"editToolbar\", \"hidden\");\n    editToolbar.setAttribute(\"role\", \"toolbar\");\n    const signal = _classPrivateFieldLooseBase(this, _editor)[_editor]._uiManager._signal;\n    editToolbar.addEventListener(\"contextmenu\", noContextMenu, {\n      signal\n    });\n    editToolbar.addEventListener(\"pointerdown\", _classPrivateFieldLooseBase(EditorToolbar, _pointerDown)[_pointerDown], {\n      signal\n    });\n    const buttons = _classPrivateFieldLooseBase(this, _buttons)[_buttons] = document.createElement(\"div\");\n    buttons.className = \"buttons\";\n    editToolbar.append(buttons);\n    const position = _classPrivateFieldLooseBase(this, _editor)[_editor].toolbarPosition;\n    if (position) {\n      const style = editToolbar.style;\n      const x = _classPrivateFieldLooseBase(this, _editor)[_editor]._uiManager.direction === \"ltr\" ? 1 - position[0] : position[0];\n      style.insetInlineEnd = `${100 * x}%`;\n      style.top = `calc(${100 * position[1]}% + var(--editor-toolbar-vert-offset))`;\n    }\n    _classPrivateFieldLooseBase(this, _addDeleteButton)[_addDeleteButton]();\n    return editToolbar;\n  }\n  get div() {\n    return _classPrivateFieldLooseBase(this, _toolbar)[_toolbar];\n  }\n  hide() {\n    var _classPrivateFieldLoo3;\n    _classPrivateFieldLooseBase(this, _toolbar)[_toolbar].classList.add(\"hidden\");\n    (_classPrivateFieldLoo3 = _classPrivateFieldLooseBase(this, _colorPicker)[_colorPicker]) === null || _classPrivateFieldLoo3 === void 0 ? void 0 : _classPrivateFieldLoo3.hideDropdown();\n  }\n  show() {\n    var _classPrivateFieldLoo4;\n    _classPrivateFieldLooseBase(this, _toolbar)[_toolbar].classList.remove(\"hidden\");\n    (_classPrivateFieldLoo4 = _classPrivateFieldLooseBase(this, _altText)[_altText]) === null || _classPrivateFieldLoo4 === void 0 ? void 0 : _classPrivateFieldLoo4.shown();\n  }\n  async addAltText(altText) {\n    const button = await altText.render();\n    _classPrivateFieldLooseBase(this, _addListenersToElement)[_addListenersToElement](button);\n    _classPrivateFieldLooseBase(this, _buttons)[_buttons].prepend(button, _classPrivateFieldLooseBase(this, _divider)[_divider]);\n    _classPrivateFieldLooseBase(this, _altText)[_altText] = altText;\n  }\n  addColorPicker(colorPicker) {\n    _classPrivateFieldLooseBase(this, _colorPicker)[_colorPicker] = colorPicker;\n    const button = colorPicker.renderButton();\n    _classPrivateFieldLooseBase(this, _addListenersToElement)[_addListenersToElement](button);\n    _classPrivateFieldLooseBase(this, _buttons)[_buttons].prepend(button, _classPrivateFieldLooseBase(this, _divider)[_divider]);\n  }\n  remove() {\n    var _classPrivateFieldLoo5;\n    _classPrivateFieldLooseBase(this, _toolbar)[_toolbar].remove();\n    (_classPrivateFieldLoo5 = _classPrivateFieldLooseBase(this, _colorPicker)[_colorPicker]) === null || _classPrivateFieldLoo5 === void 0 ? void 0 : _classPrivateFieldLoo5.destroy();\n    _classPrivateFieldLooseBase(this, _colorPicker)[_colorPicker] = null;\n  }\n}\n_EditorToolbar = EditorToolbar;\nfunction _pointerDown2(e) {\n  e.stopPropagation();\n}\nfunction _focusIn2(e) {\n  _classPrivateFieldLooseBase(this, _editor)[_editor]._focusEventsAllowed = false;\n  e.preventDefault();\n  e.stopPropagation();\n}\nfunction _focusOut2(e) {\n  _classPrivateFieldLooseBase(this, _editor)[_editor]._focusEventsAllowed = true;\n  e.preventDefault();\n  e.stopPropagation();\n}\nfunction _addListenersToElement2(element) {\n  const signal = _classPrivateFieldLooseBase(this, _editor)[_editor]._uiManager._signal;\n  element.addEventListener(\"focusin\", _classPrivateFieldLooseBase(this, _focusIn)[_focusIn].bind(this), {\n    capture: true,\n    signal\n  });\n  element.addEventListener(\"focusout\", _classPrivateFieldLooseBase(this, _focusOut)[_focusOut].bind(this), {\n    capture: true,\n    signal\n  });\n  element.addEventListener(\"contextmenu\", noContextMenu, {\n    signal\n  });\n}\nfunction _addDeleteButton2() {\n  const _classPrivateFieldLoo124 = _classPrivateFieldLooseBase(this, _editor)[_editor],\n    editorType = _classPrivateFieldLoo124.editorType,\n    _uiManager = _classPrivateFieldLoo124._uiManager;\n  const button = document.createElement(\"button\");\n  button.className = \"delete\";\n  button.tabIndex = 0;\n  button.setAttribute(\"data-l10n-id\", _classPrivateFieldLooseBase(_EditorToolbar, _l10nRemove)[_l10nRemove][editorType]);\n  _classPrivateFieldLooseBase(this, _addListenersToElement)[_addListenersToElement](button);\n  button.addEventListener(\"click\", e => {\n    _uiManager.delete();\n  }, {\n    signal: _uiManager._signal\n  });\n  _classPrivateFieldLooseBase(this, _buttons)[_buttons].append(button);\n}\nfunction _get_divider() {\n  const divider = document.createElement(\"div\");\n  divider.className = \"divider\";\n  return divider;\n}\nObject.defineProperty(EditorToolbar, _pointerDown, {\n  value: _pointerDown2\n});\nObject.defineProperty(EditorToolbar, _l10nRemove, {\n  writable: true,\n  value: null\n});\nvar _buttons2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"buttons\");\nvar _toolbar2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"toolbar\");\nvar _uiManager2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"uiManager\");\nvar _render = /*#__PURE__*/_classPrivateFieldLooseKey(\"render\");\nvar _getLastPoint = /*#__PURE__*/_classPrivateFieldLooseKey(\"getLastPoint\");\nvar _addHighlightButton = /*#__PURE__*/_classPrivateFieldLooseKey(\"addHighlightButton\");\nclass HighlightToolbar {\n  constructor(uiManager) {\n    Object.defineProperty(this, _addHighlightButton, {\n      value: _addHighlightButton2\n    });\n    Object.defineProperty(this, _getLastPoint, {\n      value: _getLastPoint2\n    });\n    Object.defineProperty(this, _render, {\n      value: _render2\n    });\n    Object.defineProperty(this, _buttons2, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _toolbar2, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _uiManager2, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldLooseBase(this, _uiManager2)[_uiManager2] = uiManager;\n  }\n  show(parent, boxes, isLTR) {\n    var _classPrivateFieldLoo9;\n    const _classPrivateFieldLoo6 = _classPrivateFieldLooseBase(this, _getLastPoint)[_getLastPoint](boxes, isLTR),\n      _classPrivateFieldLoo7 = _slicedToArray(_classPrivateFieldLoo6, 2),\n      x = _classPrivateFieldLoo7[0],\n      y = _classPrivateFieldLoo7[1];\n    const _classPrivateFieldLoo8 = (_classPrivateFieldLoo9 = _classPrivateFieldLooseBase(this, _toolbar2))[_toolbar2] || (_classPrivateFieldLoo9[_toolbar2] = _classPrivateFieldLooseBase(this, _render)[_render]()),\n      style = _classPrivateFieldLoo8.style;\n    parent.append(_classPrivateFieldLooseBase(this, _toolbar2)[_toolbar2]);\n    style.insetInlineEnd = `${100 * x}%`;\n    style.top = `calc(${100 * y}% + var(--editor-toolbar-vert-offset))`;\n  }\n  hide() {\n    _classPrivateFieldLooseBase(this, _toolbar2)[_toolbar2].remove();\n  }\n}\nfunction _render2() {\n  const editToolbar = _classPrivateFieldLooseBase(this, _toolbar2)[_toolbar2] = document.createElement(\"div\");\n  editToolbar.className = \"editToolbar\";\n  editToolbar.setAttribute(\"role\", \"toolbar\");\n  editToolbar.addEventListener(\"contextmenu\", noContextMenu, {\n    signal: _classPrivateFieldLooseBase(this, _uiManager2)[_uiManager2]._signal\n  });\n  const buttons = _classPrivateFieldLooseBase(this, _buttons2)[_buttons2] = document.createElement(\"div\");\n  buttons.className = \"buttons\";\n  editToolbar.append(buttons);\n  _classPrivateFieldLooseBase(this, _addHighlightButton)[_addHighlightButton]();\n  return editToolbar;\n}\nfunction _getLastPoint2(boxes, isLTR) {\n  let lastY = 0;\n  let lastX = 0;\n  for (const box of boxes) {\n    const y = box.y + box.height;\n    if (y < lastY) {\n      continue;\n    }\n    const x = box.x + (isLTR ? box.width : 0);\n    if (y > lastY) {\n      lastX = x;\n      lastY = y;\n      continue;\n    }\n    if (isLTR) {\n      if (x > lastX) {\n        lastX = x;\n      }\n    } else if (x < lastX) {\n      lastX = x;\n    }\n  }\n  return [isLTR ? 1 - lastX : lastX, lastY];\n}\nfunction _addHighlightButton2() {\n  const button = document.createElement(\"button\");\n  button.className = \"highlightButton\";\n  button.tabIndex = 0;\n  button.setAttribute(\"data-l10n-id\", `pdfjs-highlight-floating-button1`);\n  const span = document.createElement(\"span\");\n  button.append(span);\n  span.className = \"visuallyHidden\";\n  span.setAttribute(\"data-l10n-id\", \"pdfjs-highlight-floating-button-label\");\n  const signal = _classPrivateFieldLooseBase(this, _uiManager2)[_uiManager2]._signal;\n  button.addEventListener(\"contextmenu\", noContextMenu, {\n    signal\n  });\n  button.addEventListener(\"click\", () => {\n    _classPrivateFieldLooseBase(this, _uiManager2)[_uiManager2].highlightSelection(\"floating_button\");\n  }, {\n    signal\n  });\n  _classPrivateFieldLooseBase(this, _buttons2)[_buttons2].append(button);\n}\n; // ./src/display/editor/tools.js\n\nfunction bindEvents(obj, element, names) {\n  for (const name of names) {\n    element.addEventListener(name, obj[name].bind(obj));\n  }\n}\nfunction opacityToHex(opacity) {\n  return Math.round(Math.min(255, Math.max(1, 255 * opacity))).toString(16).padStart(2, \"0\");\n}\nvar _id = /*#__PURE__*/_classPrivateFieldLooseKey(\"id\");\nclass IdManager {\n  constructor() {\n    Object.defineProperty(this, _id, {\n      writable: true,\n      value: 0\n    });\n  }\n  get id() {\n    return `${AnnotationEditorPrefix}${_classPrivateFieldLooseBase(this, _id)[_id]++}`;\n  }\n}\nvar _baseId = /*#__PURE__*/_classPrivateFieldLooseKey(\"baseId\");\nvar _id2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"id\");\nvar _cache = /*#__PURE__*/_classPrivateFieldLooseKey(\"cache\");\nvar _get = /*#__PURE__*/_classPrivateFieldLooseKey(\"get\");\nclass ImageManager {\n  constructor() {\n    Object.defineProperty(this, _get, {\n      value: _get2\n    });\n    Object.defineProperty(this, _baseId, {\n      writable: true,\n      value: getUuid()\n    });\n    Object.defineProperty(this, _id2, {\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, _cache, {\n      writable: true,\n      value: null\n    });\n  }\n  static get _isSVGFittingCanvas() {\n    const svg = `data:image/svg+xml;charset=UTF-8,<svg viewBox=\"0 0 1 1\" width=\"1\" height=\"1\" xmlns=\"http://www.w3.org/2000/svg\"><rect width=\"1\" height=\"1\" style=\"fill:red;\"/></svg>`;\n    const canvas = new OffscreenCanvas(1, 3);\n    const ctx = canvas.getContext(\"2d\", {\n      willReadFrequently: true\n    });\n    const image = new Image();\n    image.src = svg;\n    const promise = image.decode().then(() => {\n      ctx.drawImage(image, 0, 0, 1, 1, 0, 0, 1, 3);\n      return new Uint32Array(ctx.getImageData(0, 0, 1, 1).data.buffer)[0] === 0;\n    });\n    return shadow(this, \"_isSVGFittingCanvas\", promise);\n  }\n  async getFromFile(file) {\n    const lastModified = file.lastModified,\n      name = file.name,\n      size = file.size,\n      type = file.type;\n    return _classPrivateFieldLooseBase(this, _get)[_get](`${lastModified}_${name}_${size}_${type}`, file);\n  }\n  async getFromUrl(url) {\n    return _classPrivateFieldLooseBase(this, _get)[_get](url, url);\n  }\n  async getFromBlob(id, blobPromise) {\n    const blob = await blobPromise;\n    return _classPrivateFieldLooseBase(this, _get)[_get](id, blob);\n  }\n  async getFromId(id) {\n    var _classPrivateFieldLoo0;\n    (_classPrivateFieldLoo0 = _classPrivateFieldLooseBase(this, _cache))[_cache] || (_classPrivateFieldLoo0[_cache] = new Map());\n    const data = _classPrivateFieldLooseBase(this, _cache)[_cache].get(id);\n    if (!data) {\n      return null;\n    }\n    if (data.bitmap) {\n      data.refCounter += 1;\n      return data;\n    }\n    if (data.file) {\n      return this.getFromFile(data.file);\n    }\n    if (data.blobPromise) {\n      const blobPromise = data.blobPromise;\n      delete data.blobPromise;\n      return this.getFromBlob(data.id, blobPromise);\n    }\n    return this.getFromUrl(data.url);\n  }\n  getFromCanvas(id, canvas) {\n    var _classPrivateFieldLoo1, _data;\n    (_classPrivateFieldLoo1 = _classPrivateFieldLooseBase(this, _cache))[_cache] || (_classPrivateFieldLoo1[_cache] = new Map());\n    let data = _classPrivateFieldLooseBase(this, _cache)[_cache].get(id);\n    if ((_data = data) !== null && _data !== void 0 && _data.bitmap) {\n      data.refCounter += 1;\n      return data;\n    }\n    const offscreen = new OffscreenCanvas(canvas.width, canvas.height);\n    const ctx = offscreen.getContext(\"2d\");\n    ctx.drawImage(canvas, 0, 0);\n    data = {\n      bitmap: offscreen.transferToImageBitmap(),\n      id: `image_${_classPrivateFieldLooseBase(this, _baseId)[_baseId]}_${_classPrivateFieldLooseBase(this, _id2)[_id2]++}`,\n      refCounter: 1,\n      isSvg: false\n    };\n    _classPrivateFieldLooseBase(this, _cache)[_cache].set(id, data);\n    _classPrivateFieldLooseBase(this, _cache)[_cache].set(data.id, data);\n    return data;\n  }\n  getSvgUrl(id) {\n    const data = _classPrivateFieldLooseBase(this, _cache)[_cache].get(id);\n    if (!(data !== null && data !== void 0 && data.isSvg)) {\n      return null;\n    }\n    return data.svgUrl;\n  }\n  deleteId(id) {\n    var _classPrivateFieldLoo10, _bitmap$close;\n    (_classPrivateFieldLoo10 = _classPrivateFieldLooseBase(this, _cache))[_cache] || (_classPrivateFieldLoo10[_cache] = new Map());\n    const data = _classPrivateFieldLooseBase(this, _cache)[_cache].get(id);\n    if (!data) {\n      return;\n    }\n    data.refCounter -= 1;\n    if (data.refCounter !== 0) {\n      return;\n    }\n    const bitmap = data.bitmap;\n    if (!data.url && !data.file) {\n      const canvas = new OffscreenCanvas(bitmap.width, bitmap.height);\n      const ctx = canvas.getContext(\"bitmaprenderer\");\n      ctx.transferFromImageBitmap(bitmap);\n      data.blobPromise = canvas.convertToBlob();\n    }\n    (_bitmap$close = bitmap.close) === null || _bitmap$close === void 0 ? void 0 : _bitmap$close.call(bitmap);\n    data.bitmap = null;\n  }\n  isValidId(id) {\n    return id.startsWith(`image_${_classPrivateFieldLooseBase(this, _baseId)[_baseId]}_`);\n  }\n}\n_ImageManager = ImageManager;\nasync function _get2(key, rawData) {\n  var _classPrivateFieldLoo125, _data9;\n  (_classPrivateFieldLoo125 = _classPrivateFieldLooseBase(this, _cache))[_cache] || (_classPrivateFieldLoo125[_cache] = new Map());\n  let data = _classPrivateFieldLooseBase(this, _cache)[_cache].get(key);\n  if (data === null) {\n    return null;\n  }\n  if ((_data9 = data) !== null && _data9 !== void 0 && _data9.bitmap) {\n    data.refCounter += 1;\n    return data;\n  }\n  try {\n    data || (data = {\n      bitmap: null,\n      id: `image_${_classPrivateFieldLooseBase(this, _baseId)[_baseId]}_${_classPrivateFieldLooseBase(this, _id2)[_id2]++}`,\n      refCounter: 0,\n      isSvg: false\n    });\n    let image;\n    if (typeof rawData === \"string\") {\n      data.url = rawData;\n      image = await fetchData(rawData, \"blob\");\n    } else if (rawData instanceof File) {\n      image = data.file = rawData;\n    } else if (rawData instanceof Blob) {\n      image = rawData;\n    }\n    if (image.type === \"image/svg+xml\") {\n      const mustRemoveAspectRatioPromise = _ImageManager._isSVGFittingCanvas;\n      const fileReader = new FileReader();\n      const imageElement = new Image();\n      const imagePromise = new Promise((resolve, reject) => {\n        imageElement.onload = () => {\n          data.bitmap = imageElement;\n          data.isSvg = true;\n          resolve();\n        };\n        fileReader.onload = async () => {\n          const url = data.svgUrl = fileReader.result;\n          imageElement.src = (await mustRemoveAspectRatioPromise) ? `${url}#svgView(preserveAspectRatio(none))` : url;\n        };\n        imageElement.onerror = fileReader.onerror = reject;\n      });\n      fileReader.readAsDataURL(image);\n      await imagePromise;\n    } else {\n      data.bitmap = await createImageBitmap(image);\n    }\n    data.refCounter = 1;\n  } catch (e) {\n    console.error(e);\n    data = null;\n  }\n  _classPrivateFieldLooseBase(this, _cache)[_cache].set(key, data);\n  if (data) {\n    _classPrivateFieldLooseBase(this, _cache)[_cache].set(data.id, data);\n  }\n  return data;\n}\nvar _commands = /*#__PURE__*/_classPrivateFieldLooseKey(\"commands\");\nvar _locked = /*#__PURE__*/_classPrivateFieldLooseKey(\"locked\");\nvar _maxSize = /*#__PURE__*/_classPrivateFieldLooseKey(\"maxSize\");\nvar _position = /*#__PURE__*/_classPrivateFieldLooseKey(\"position\");\nclass CommandManager {\n  constructor() {\n    let maxSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 128;\n    Object.defineProperty(this, _commands, {\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(this, _locked, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _maxSize, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _position, {\n      writable: true,\n      value: -1\n    });\n    _classPrivateFieldLooseBase(this, _maxSize)[_maxSize] = maxSize;\n  }\n  add(_ref9) {\n    let cmd = _ref9.cmd,\n      undo = _ref9.undo,\n      post = _ref9.post,\n      mustExec = _ref9.mustExec,\n      _ref9$type = _ref9.type,\n      type = _ref9$type === void 0 ? NaN : _ref9$type,\n      _ref9$overwriteIfSame = _ref9.overwriteIfSameType,\n      overwriteIfSameType = _ref9$overwriteIfSame === void 0 ? false : _ref9$overwriteIfSame,\n      _ref9$keepUndo = _ref9.keepUndo,\n      keepUndo = _ref9$keepUndo === void 0 ? false : _ref9$keepUndo;\n    if (mustExec) {\n      cmd();\n    }\n    if (_classPrivateFieldLooseBase(this, _locked)[_locked]) {\n      return;\n    }\n    const save = {\n      cmd,\n      undo,\n      post,\n      type\n    };\n    if (_classPrivateFieldLooseBase(this, _position)[_position] === -1) {\n      if (_classPrivateFieldLooseBase(this, _commands)[_commands].length > 0) {\n        _classPrivateFieldLooseBase(this, _commands)[_commands].length = 0;\n      }\n      _classPrivateFieldLooseBase(this, _position)[_position] = 0;\n      _classPrivateFieldLooseBase(this, _commands)[_commands].push(save);\n      return;\n    }\n    if (overwriteIfSameType && _classPrivateFieldLooseBase(this, _commands)[_commands][_classPrivateFieldLooseBase(this, _position)[_position]].type === type) {\n      if (keepUndo) {\n        save.undo = _classPrivateFieldLooseBase(this, _commands)[_commands][_classPrivateFieldLooseBase(this, _position)[_position]].undo;\n      }\n      _classPrivateFieldLooseBase(this, _commands)[_commands][_classPrivateFieldLooseBase(this, _position)[_position]] = save;\n      return;\n    }\n    const next = _classPrivateFieldLooseBase(this, _position)[_position] + 1;\n    if (next === _classPrivateFieldLooseBase(this, _maxSize)[_maxSize]) {\n      _classPrivateFieldLooseBase(this, _commands)[_commands].splice(0, 1);\n    } else {\n      _classPrivateFieldLooseBase(this, _position)[_position] = next;\n      if (next < _classPrivateFieldLooseBase(this, _commands)[_commands].length) {\n        _classPrivateFieldLooseBase(this, _commands)[_commands].splice(next);\n      }\n    }\n    _classPrivateFieldLooseBase(this, _commands)[_commands].push(save);\n  }\n  undo() {\n    if (_classPrivateFieldLooseBase(this, _position)[_position] === -1) {\n      return;\n    }\n    _classPrivateFieldLooseBase(this, _locked)[_locked] = true;\n    const _classPrivateFieldLoo11 = _classPrivateFieldLooseBase(this, _commands)[_commands][_classPrivateFieldLooseBase(this, _position)[_position]],\n      undo = _classPrivateFieldLoo11.undo,\n      post = _classPrivateFieldLoo11.post;\n    undo();\n    post === null || post === void 0 ? void 0 : post();\n    _classPrivateFieldLooseBase(this, _locked)[_locked] = false;\n    _classPrivateFieldLooseBase(this, _position)[_position] -= 1;\n  }\n  redo() {\n    if (_classPrivateFieldLooseBase(this, _position)[_position] < _classPrivateFieldLooseBase(this, _commands)[_commands].length - 1) {\n      _classPrivateFieldLooseBase(this, _position)[_position] += 1;\n      _classPrivateFieldLooseBase(this, _locked)[_locked] = true;\n      const _classPrivateFieldLoo12 = _classPrivateFieldLooseBase(this, _commands)[_commands][_classPrivateFieldLooseBase(this, _position)[_position]],\n        cmd = _classPrivateFieldLoo12.cmd,\n        post = _classPrivateFieldLoo12.post;\n      cmd();\n      post === null || post === void 0 ? void 0 : post();\n      _classPrivateFieldLooseBase(this, _locked)[_locked] = false;\n    }\n  }\n  hasSomethingToUndo() {\n    return _classPrivateFieldLooseBase(this, _position)[_position] !== -1;\n  }\n  hasSomethingToRedo() {\n    return _classPrivateFieldLooseBase(this, _position)[_position] < _classPrivateFieldLooseBase(this, _commands)[_commands].length - 1;\n  }\n  destroy() {\n    _classPrivateFieldLooseBase(this, _commands)[_commands] = null;\n  }\n}\nvar _serialize = /*#__PURE__*/_classPrivateFieldLooseKey(\"serialize\");\nclass KeyboardManager {\n  constructor(callbacks) {\n    Object.defineProperty(this, _serialize, {\n      value: _serialize2\n    });\n    this.buffer = [];\n    this.callbacks = new Map();\n    this.allKeys = new Set();\n    const isMac = util_FeatureTest.platform.isMac;\n    for (const _ref0 of callbacks) {\n      var _ref1 = _slicedToArray(_ref0, 3);\n      const keys = _ref1[0];\n      const callback = _ref1[1];\n      var _ref1$ = _ref1[2];\n      const options = _ref1$ === void 0 ? {} : _ref1$;\n      for (const key of keys) {\n        const isMacKey = key.startsWith(\"mac+\");\n        if (isMac && isMacKey) {\n          this.callbacks.set(key.slice(4), {\n            callback,\n            options\n          });\n          this.allKeys.add(key.split(\"+\").at(-1));\n        } else if (!isMac && !isMacKey) {\n          this.callbacks.set(key, {\n            callback,\n            options\n          });\n          this.allKeys.add(key.split(\"+\").at(-1));\n        }\n      }\n    }\n  }\n  exec(self, event) {\n    if (!this.allKeys.has(event.key)) {\n      return;\n    }\n    const info = this.callbacks.get(_classPrivateFieldLooseBase(this, _serialize)[_serialize](event));\n    if (!info) {\n      return;\n    }\n    const callback = info.callback,\n      _info$options = info.options,\n      _info$options$bubbles = _info$options.bubbles,\n      bubbles = _info$options$bubbles === void 0 ? false : _info$options$bubbles,\n      _info$options$args = _info$options.args,\n      args = _info$options$args === void 0 ? [] : _info$options$args,\n      _info$options$checker = _info$options.checker,\n      checker = _info$options$checker === void 0 ? null : _info$options$checker;\n    if (checker && !checker(self, event)) {\n      return;\n    }\n    callback.bind(self, ...args, event)();\n    if (!bubbles) {\n      event.stopPropagation();\n      event.preventDefault();\n    }\n  }\n}\nfunction _serialize2(event) {\n  if (event.altKey) {\n    this.buffer.push(\"alt\");\n  }\n  if (event.ctrlKey) {\n    this.buffer.push(\"ctrl\");\n  }\n  if (event.metaKey) {\n    this.buffer.push(\"meta\");\n  }\n  if (event.shiftKey) {\n    this.buffer.push(\"shift\");\n  }\n  this.buffer.push(event.key);\n  const str = this.buffer.join(\"+\");\n  this.buffer.length = 0;\n  return str;\n}\nclass ColorManager {\n  get _colors() {\n    const colors = new Map([[\"CanvasText\", null], [\"Canvas\", null]]);\n    getColorValues(colors);\n    return shadow(this, \"_colors\", colors);\n  }\n  convert(color) {\n    const rgb = getRGB(color);\n    if (!window.matchMedia(\"(forced-colors: active)\").matches) {\n      return rgb;\n    }\n    for (const _ref10 of this._colors) {\n      var _ref11 = _slicedToArray(_ref10, 2);\n      const name = _ref11[0];\n      const RGB = _ref11[1];\n      if (RGB.every((x, i) => x === rgb[i])) {\n        return ColorManager._colorsMapping.get(name);\n      }\n    }\n    return rgb;\n  }\n  getHexCode(name) {\n    const rgb = this._colors.get(name);\n    if (!rgb) {\n      return name;\n    }\n    return Util.makeHexColor(...rgb);\n  }\n}\nColorManager._colorsMapping = new Map([[\"CanvasText\", [0, 0, 0]], [\"Canvas\", [255, 255, 255]]]);\nvar _abortController = /*#__PURE__*/_classPrivateFieldLooseKey(\"abortController\");\nvar _activeEditor = /*#__PURE__*/_classPrivateFieldLooseKey(\"activeEditor\");\nvar _allEditors = /*#__PURE__*/_classPrivateFieldLooseKey(\"allEditors\");\nvar _allLayers = /*#__PURE__*/_classPrivateFieldLooseKey(\"allLayers\");\nvar _altTextManager = /*#__PURE__*/_classPrivateFieldLooseKey(\"altTextManager\");\nvar _annotationStorage = /*#__PURE__*/_classPrivateFieldLooseKey(\"annotationStorage\");\nvar _changedExistingAnnotations = /*#__PURE__*/_classPrivateFieldLooseKey(\"changedExistingAnnotations\");\nvar _commandManager = /*#__PURE__*/_classPrivateFieldLooseKey(\"commandManager\");\nvar _copyPasteAC = /*#__PURE__*/_classPrivateFieldLooseKey(\"copyPasteAC\");\nvar _currentPageIndex = /*#__PURE__*/_classPrivateFieldLooseKey(\"currentPageIndex\");\nvar _deletedAnnotationsElementIds = /*#__PURE__*/_classPrivateFieldLooseKey(\"deletedAnnotationsElementIds\");\nvar _draggingEditors = /*#__PURE__*/_classPrivateFieldLooseKey(\"draggingEditors\");\nvar _editorTypes = /*#__PURE__*/_classPrivateFieldLooseKey(\"editorTypes\");\nvar _editorsToRescale = /*#__PURE__*/_classPrivateFieldLooseKey(\"editorsToRescale\");\nvar _enableHighlightFloatingButton = /*#__PURE__*/_classPrivateFieldLooseKey(\"enableHighlightFloatingButton\");\nvar _enableUpdatedAddImage = /*#__PURE__*/_classPrivateFieldLooseKey(\"enableUpdatedAddImage\");\nvar _enableNewAltTextWhenAddingImage = /*#__PURE__*/_classPrivateFieldLooseKey(\"enableNewAltTextWhenAddingImage\");\nvar _filterFactory = /*#__PURE__*/_classPrivateFieldLooseKey(\"filterFactory\");\nvar _focusMainContainerTimeoutId = /*#__PURE__*/_classPrivateFieldLooseKey(\"focusMainContainerTimeoutId\");\nvar _focusManagerAC = /*#__PURE__*/_classPrivateFieldLooseKey(\"focusManagerAC\");\nvar _highlightColors = /*#__PURE__*/_classPrivateFieldLooseKey(\"highlightColors\");\nvar _highlightWhenShiftUp = /*#__PURE__*/_classPrivateFieldLooseKey(\"highlightWhenShiftUp\");\nvar _highlightToolbar = /*#__PURE__*/_classPrivateFieldLooseKey(\"highlightToolbar\");\nvar _idManager = /*#__PURE__*/_classPrivateFieldLooseKey(\"idManager\");\nvar _isEnabled = /*#__PURE__*/_classPrivateFieldLooseKey(\"isEnabled\");\nvar _isWaiting = /*#__PURE__*/_classPrivateFieldLooseKey(\"isWaiting\");\nvar _keyboardManagerAC = /*#__PURE__*/_classPrivateFieldLooseKey(\"keyboardManagerAC\");\nvar _lastActiveElement = /*#__PURE__*/_classPrivateFieldLooseKey(\"lastActiveElement\");\nvar _mainHighlightColorPicker = /*#__PURE__*/_classPrivateFieldLooseKey(\"mainHighlightColorPicker\");\nvar _mlManager = /*#__PURE__*/_classPrivateFieldLooseKey(\"mlManager\");\nvar _mode = /*#__PURE__*/_classPrivateFieldLooseKey(\"mode\");\nvar _selectedEditors = /*#__PURE__*/_classPrivateFieldLooseKey(\"selectedEditors\");\nvar _selectedTextNode = /*#__PURE__*/_classPrivateFieldLooseKey(\"selectedTextNode\");\nvar _pageColors = /*#__PURE__*/_classPrivateFieldLooseKey(\"pageColors\");\nvar _showAllStates = /*#__PURE__*/_classPrivateFieldLooseKey(\"showAllStates\");\nvar _previousStates = /*#__PURE__*/_classPrivateFieldLooseKey(\"previousStates\");\nvar _translation = /*#__PURE__*/_classPrivateFieldLooseKey(\"translation\");\nvar _translationTimeoutId = /*#__PURE__*/_classPrivateFieldLooseKey(\"translationTimeoutId\");\nvar _container = /*#__PURE__*/_classPrivateFieldLooseKey(\"container\");\nvar _viewer = /*#__PURE__*/_classPrivateFieldLooseKey(\"viewer\");\nvar _updateModeCapability = /*#__PURE__*/_classPrivateFieldLooseKey(\"updateModeCapability\");\nvar _getAnchorElementForSelection = /*#__PURE__*/_classPrivateFieldLooseKey(\"getAnchorElementForSelection\");\nvar _getLayerForTextLayer = /*#__PURE__*/_classPrivateFieldLooseKey(\"getLayerForTextLayer\");\nvar _displayHighlightToolbar = /*#__PURE__*/_classPrivateFieldLooseKey(\"displayHighlightToolbar\");\nvar _selectionChange = /*#__PURE__*/_classPrivateFieldLooseKey(\"selectionChange\");\nvar _onSelectEnd = /*#__PURE__*/_classPrivateFieldLooseKey(\"onSelectEnd\");\nvar _addSelectionListener = /*#__PURE__*/_classPrivateFieldLooseKey(\"addSelectionListener\");\nvar _addFocusManager = /*#__PURE__*/_classPrivateFieldLooseKey(\"addFocusManager\");\nvar _removeFocusManager = /*#__PURE__*/_classPrivateFieldLooseKey(\"removeFocusManager\");\nvar _addKeyboardManager = /*#__PURE__*/_classPrivateFieldLooseKey(\"addKeyboardManager\");\nvar _removeKeyboardManager = /*#__PURE__*/_classPrivateFieldLooseKey(\"removeKeyboardManager\");\nvar _addCopyPasteListeners = /*#__PURE__*/_classPrivateFieldLooseKey(\"addCopyPasteListeners\");\nvar _removeCopyPasteListeners = /*#__PURE__*/_classPrivateFieldLooseKey(\"removeCopyPasteListeners\");\nvar _addDragAndDropListeners = /*#__PURE__*/_classPrivateFieldLooseKey(\"addDragAndDropListeners\");\nvar _dispatchUpdateStates = /*#__PURE__*/_classPrivateFieldLooseKey(\"dispatchUpdateStates\");\nvar _dispatchUpdateUI = /*#__PURE__*/_classPrivateFieldLooseKey(\"dispatchUpdateUI\");\nvar _enableAll = /*#__PURE__*/_classPrivateFieldLooseKey(\"enableAll\");\nvar _disableAll = /*#__PURE__*/_classPrivateFieldLooseKey(\"disableAll\");\nvar _addEditorToLayer = /*#__PURE__*/_classPrivateFieldLooseKey(\"addEditorToLayer\");\nvar _lastSelectedEditor = /*#__PURE__*/_classPrivateFieldLooseKey(\"lastSelectedEditor\");\nvar _isEmpty = /*#__PURE__*/_classPrivateFieldLooseKey(\"isEmpty\");\nvar _selectEditors = /*#__PURE__*/_classPrivateFieldLooseKey(\"selectEditors\");\nclass AnnotationEditorUIManager {\n  static get _keyboardManager() {\n    const proto = AnnotationEditorUIManager.prototype;\n    const arrowChecker = self => _classPrivateFieldLooseBase(self, _container)[_container].contains(document.activeElement) && document.activeElement.tagName !== \"BUTTON\" && self.hasSomethingToControl();\n    const textInputChecker = (_self, _ref12) => {\n      let el = _ref12.target;\n      if (el instanceof HTMLInputElement) {\n        const type = el.type;\n        return type !== \"text\" && type !== \"number\";\n      }\n      return true;\n    };\n    const small = this.TRANSLATE_SMALL;\n    const big = this.TRANSLATE_BIG;\n    return shadow(this, \"_keyboardManager\", new KeyboardManager([[[\"ctrl+a\", \"mac+meta+a\"], proto.selectAll, {\n      checker: textInputChecker\n    }], [[\"ctrl+z\", \"mac+meta+z\"], proto.undo, {\n      checker: textInputChecker\n    }], [[\"ctrl+y\", \"ctrl+shift+z\", \"mac+meta+shift+z\", \"ctrl+shift+Z\", \"mac+meta+shift+Z\"], proto.redo, {\n      checker: textInputChecker\n    }], [[\"Backspace\", \"alt+Backspace\", \"ctrl+Backspace\", \"shift+Backspace\", \"mac+Backspace\", \"mac+alt+Backspace\", \"mac+ctrl+Backspace\", \"Delete\", \"ctrl+Delete\", \"shift+Delete\", \"mac+Delete\"], proto.delete, {\n      checker: textInputChecker\n    }], [[\"Enter\", \"mac+Enter\"], proto.addNewEditorFromKeyboard, {\n      checker: (self, _ref13) => {\n        let el = _ref13.target;\n        return !(el instanceof HTMLButtonElement) && _classPrivateFieldLooseBase(self, _container)[_container].contains(el) && !self.isEnterHandled;\n      }\n    }], [[\" \", \"mac+ \"], proto.addNewEditorFromKeyboard, {\n      checker: (self, _ref14) => {\n        let el = _ref14.target;\n        return !(el instanceof HTMLButtonElement) && _classPrivateFieldLooseBase(self, _container)[_container].contains(document.activeElement);\n      }\n    }], [[\"Escape\", \"mac+Escape\"], proto.unselectAll], [[\"ArrowLeft\", \"mac+ArrowLeft\"], proto.translateSelectedEditors, {\n      args: [-small, 0],\n      checker: arrowChecker\n    }], [[\"ctrl+ArrowLeft\", \"mac+shift+ArrowLeft\"], proto.translateSelectedEditors, {\n      args: [-big, 0],\n      checker: arrowChecker\n    }], [[\"ArrowRight\", \"mac+ArrowRight\"], proto.translateSelectedEditors, {\n      args: [small, 0],\n      checker: arrowChecker\n    }], [[\"ctrl+ArrowRight\", \"mac+shift+ArrowRight\"], proto.translateSelectedEditors, {\n      args: [big, 0],\n      checker: arrowChecker\n    }], [[\"ArrowUp\", \"mac+ArrowUp\"], proto.translateSelectedEditors, {\n      args: [0, -small],\n      checker: arrowChecker\n    }], [[\"ctrl+ArrowUp\", \"mac+shift+ArrowUp\"], proto.translateSelectedEditors, {\n      args: [0, -big],\n      checker: arrowChecker\n    }], [[\"ArrowDown\", \"mac+ArrowDown\"], proto.translateSelectedEditors, {\n      args: [0, small],\n      checker: arrowChecker\n    }], [[\"ctrl+ArrowDown\", \"mac+shift+ArrowDown\"], proto.translateSelectedEditors, {\n      args: [0, big],\n      checker: arrowChecker\n    }]]));\n  }\n  constructor(container, viewer, altTextManager, eventBus, pdfDocument, pageColors, highlightColors, enableHighlightFloatingButton, enableUpdatedAddImage, enableNewAltTextWhenAddingImage, mlManager) {\n    Object.defineProperty(this, _selectEditors, {\n      value: _selectEditors2\n    });\n    Object.defineProperty(this, _isEmpty, {\n      value: _isEmpty2\n    });\n    Object.defineProperty(this, _lastSelectedEditor, {\n      get: _get_lastSelectedEditor,\n      set: void 0\n    });\n    Object.defineProperty(this, _addEditorToLayer, {\n      value: _addEditorToLayer2\n    });\n    Object.defineProperty(this, _disableAll, {\n      value: _disableAll2\n    });\n    Object.defineProperty(this, _enableAll, {\n      value: _enableAll2\n    });\n    Object.defineProperty(this, _dispatchUpdateUI, {\n      value: _dispatchUpdateUI2\n    });\n    Object.defineProperty(this, _dispatchUpdateStates, {\n      value: _dispatchUpdateStates2\n    });\n    Object.defineProperty(this, _addDragAndDropListeners, {\n      value: _addDragAndDropListeners2\n    });\n    Object.defineProperty(this, _removeCopyPasteListeners, {\n      value: _removeCopyPasteListeners2\n    });\n    Object.defineProperty(this, _addCopyPasteListeners, {\n      value: _addCopyPasteListeners2\n    });\n    Object.defineProperty(this, _removeKeyboardManager, {\n      value: _removeKeyboardManager2\n    });\n    Object.defineProperty(this, _addKeyboardManager, {\n      value: _addKeyboardManager2\n    });\n    Object.defineProperty(this, _removeFocusManager, {\n      value: _removeFocusManager2\n    });\n    Object.defineProperty(this, _addFocusManager, {\n      value: _addFocusManager2\n    });\n    Object.defineProperty(this, _addSelectionListener, {\n      value: _addSelectionListener2\n    });\n    Object.defineProperty(this, _onSelectEnd, {\n      value: _onSelectEnd2\n    });\n    Object.defineProperty(this, _selectionChange, {\n      value: _selectionChange2\n    });\n    Object.defineProperty(this, _displayHighlightToolbar, {\n      value: _displayHighlightToolbar2\n    });\n    Object.defineProperty(this, _getLayerForTextLayer, {\n      value: _getLayerForTextLayer2\n    });\n    Object.defineProperty(this, _getAnchorElementForSelection, {\n      value: _getAnchorElementForSelection2\n    });\n    Object.defineProperty(this, _abortController, {\n      writable: true,\n      value: new AbortController()\n    });\n    Object.defineProperty(this, _activeEditor, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _allEditors, {\n      writable: true,\n      value: new Map()\n    });\n    Object.defineProperty(this, _allLayers, {\n      writable: true,\n      value: new Map()\n    });\n    Object.defineProperty(this, _altTextManager, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _annotationStorage, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _changedExistingAnnotations, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _commandManager, {\n      writable: true,\n      value: new CommandManager()\n    });\n    Object.defineProperty(this, _copyPasteAC, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _currentPageIndex, {\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, _deletedAnnotationsElementIds, {\n      writable: true,\n      value: new Set()\n    });\n    Object.defineProperty(this, _draggingEditors, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _editorTypes, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _editorsToRescale, {\n      writable: true,\n      value: new Set()\n    });\n    Object.defineProperty(this, _enableHighlightFloatingButton, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _enableUpdatedAddImage, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _enableNewAltTextWhenAddingImage, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _filterFactory, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _focusMainContainerTimeoutId, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _focusManagerAC, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _highlightColors, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _highlightWhenShiftUp, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _highlightToolbar, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _idManager, {\n      writable: true,\n      value: new IdManager()\n    });\n    Object.defineProperty(this, _isEnabled, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _isWaiting, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _keyboardManagerAC, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _lastActiveElement, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _mainHighlightColorPicker, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _mlManager, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _mode, {\n      writable: true,\n      value: AnnotationEditorType.NONE\n    });\n    Object.defineProperty(this, _selectedEditors, {\n      writable: true,\n      value: new Set()\n    });\n    Object.defineProperty(this, _selectedTextNode, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _pageColors, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _showAllStates, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _previousStates, {\n      writable: true,\n      value: {\n        isEditing: false,\n        isEmpty: true,\n        hasSomethingToUndo: false,\n        hasSomethingToRedo: false,\n        hasSelectedEditor: false,\n        hasSelectedText: false\n      }\n    });\n    Object.defineProperty(this, _translation, {\n      writable: true,\n      value: [0, 0]\n    });\n    Object.defineProperty(this, _translationTimeoutId, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _container, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _viewer, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _updateModeCapability, {\n      writable: true,\n      value: null\n    });\n    const _signal = this._signal = _classPrivateFieldLooseBase(this, _abortController)[_abortController].signal;\n    _classPrivateFieldLooseBase(this, _container)[_container] = container;\n    _classPrivateFieldLooseBase(this, _viewer)[_viewer] = viewer;\n    _classPrivateFieldLooseBase(this, _altTextManager)[_altTextManager] = altTextManager;\n    this._eventBus = eventBus;\n    eventBus._on(\"editingaction\", this.onEditingAction.bind(this), {\n      signal: _signal\n    });\n    eventBus._on(\"pagechanging\", this.onPageChanging.bind(this), {\n      signal: _signal\n    });\n    eventBus._on(\"scalechanging\", this.onScaleChanging.bind(this), {\n      signal: _signal\n    });\n    eventBus._on(\"rotationchanging\", this.onRotationChanging.bind(this), {\n      signal: _signal\n    });\n    eventBus._on(\"setpreference\", this.onSetPreference.bind(this), {\n      signal: _signal\n    });\n    eventBus._on(\"switchannotationeditorparams\", evt => this.updateParams(evt.type, evt.value), {\n      signal: _signal\n    });\n    _classPrivateFieldLooseBase(this, _addSelectionListener)[_addSelectionListener]();\n    _classPrivateFieldLooseBase(this, _addDragAndDropListeners)[_addDragAndDropListeners]();\n    _classPrivateFieldLooseBase(this, _addKeyboardManager)[_addKeyboardManager]();\n    _classPrivateFieldLooseBase(this, _annotationStorage)[_annotationStorage] = pdfDocument.annotationStorage;\n    _classPrivateFieldLooseBase(this, _filterFactory)[_filterFactory] = pdfDocument.filterFactory;\n    _classPrivateFieldLooseBase(this, _pageColors)[_pageColors] = pageColors;\n    _classPrivateFieldLooseBase(this, _highlightColors)[_highlightColors] = highlightColors || null;\n    _classPrivateFieldLooseBase(this, _enableHighlightFloatingButton)[_enableHighlightFloatingButton] = enableHighlightFloatingButton;\n    _classPrivateFieldLooseBase(this, _enableUpdatedAddImage)[_enableUpdatedAddImage] = enableUpdatedAddImage;\n    _classPrivateFieldLooseBase(this, _enableNewAltTextWhenAddingImage)[_enableNewAltTextWhenAddingImage] = enableNewAltTextWhenAddingImage;\n    _classPrivateFieldLooseBase(this, _mlManager)[_mlManager] = mlManager || null;\n    this.viewParameters = {\n      realScale: PixelsPerInch.PDF_TO_CSS_UNITS,\n      rotation: 0\n    };\n    this.isShiftKeyDown = false;\n  }\n  destroy() {\n    var _classPrivateFieldLoo13, _classPrivateFieldLoo14, _classPrivateFieldLoo15, _classPrivateFieldLoo16;\n    (_classPrivateFieldLoo13 = _classPrivateFieldLooseBase(this, _updateModeCapability)[_updateModeCapability]) === null || _classPrivateFieldLoo13 === void 0 ? void 0 : _classPrivateFieldLoo13.resolve();\n    _classPrivateFieldLooseBase(this, _updateModeCapability)[_updateModeCapability] = null;\n    (_classPrivateFieldLoo14 = _classPrivateFieldLooseBase(this, _abortController)[_abortController]) === null || _classPrivateFieldLoo14 === void 0 ? void 0 : _classPrivateFieldLoo14.abort();\n    _classPrivateFieldLooseBase(this, _abortController)[_abortController] = null;\n    this._signal = null;\n    for (const layer of _classPrivateFieldLooseBase(this, _allLayers)[_allLayers].values()) {\n      layer.destroy();\n    }\n    _classPrivateFieldLooseBase(this, _allLayers)[_allLayers].clear();\n    _classPrivateFieldLooseBase(this, _allEditors)[_allEditors].clear();\n    _classPrivateFieldLooseBase(this, _editorsToRescale)[_editorsToRescale].clear();\n    _classPrivateFieldLooseBase(this, _activeEditor)[_activeEditor] = null;\n    _classPrivateFieldLooseBase(this, _selectedEditors)[_selectedEditors].clear();\n    _classPrivateFieldLooseBase(this, _commandManager)[_commandManager].destroy();\n    (_classPrivateFieldLoo15 = _classPrivateFieldLooseBase(this, _altTextManager)[_altTextManager]) === null || _classPrivateFieldLoo15 === void 0 ? void 0 : _classPrivateFieldLoo15.destroy();\n    (_classPrivateFieldLoo16 = _classPrivateFieldLooseBase(this, _highlightToolbar)[_highlightToolbar]) === null || _classPrivateFieldLoo16 === void 0 ? void 0 : _classPrivateFieldLoo16.hide();\n    _classPrivateFieldLooseBase(this, _highlightToolbar)[_highlightToolbar] = null;\n    if (_classPrivateFieldLooseBase(this, _focusMainContainerTimeoutId)[_focusMainContainerTimeoutId]) {\n      clearTimeout(_classPrivateFieldLooseBase(this, _focusMainContainerTimeoutId)[_focusMainContainerTimeoutId]);\n      _classPrivateFieldLooseBase(this, _focusMainContainerTimeoutId)[_focusMainContainerTimeoutId] = null;\n    }\n    if (_classPrivateFieldLooseBase(this, _translationTimeoutId)[_translationTimeoutId]) {\n      clearTimeout(_classPrivateFieldLooseBase(this, _translationTimeoutId)[_translationTimeoutId]);\n      _classPrivateFieldLooseBase(this, _translationTimeoutId)[_translationTimeoutId] = null;\n    }\n  }\n  combinedSignal(ac) {\n    return AbortSignal.any([this._signal, ac.signal]);\n  }\n  get mlManager() {\n    return _classPrivateFieldLooseBase(this, _mlManager)[_mlManager];\n  }\n  get useNewAltTextFlow() {\n    return _classPrivateFieldLooseBase(this, _enableUpdatedAddImage)[_enableUpdatedAddImage];\n  }\n  get useNewAltTextWhenAddingImage() {\n    return _classPrivateFieldLooseBase(this, _enableNewAltTextWhenAddingImage)[_enableNewAltTextWhenAddingImage];\n  }\n  get hcmFilter() {\n    return shadow(this, \"hcmFilter\", _classPrivateFieldLooseBase(this, _pageColors)[_pageColors] ? _classPrivateFieldLooseBase(this, _filterFactory)[_filterFactory].addHCMFilter(_classPrivateFieldLooseBase(this, _pageColors)[_pageColors].foreground, _classPrivateFieldLooseBase(this, _pageColors)[_pageColors].background) : \"none\");\n  }\n  get direction() {\n    return shadow(this, \"direction\", getComputedStyle(_classPrivateFieldLooseBase(this, _container)[_container]).direction);\n  }\n  get highlightColors() {\n    return shadow(this, \"highlightColors\", _classPrivateFieldLooseBase(this, _highlightColors)[_highlightColors] ? new Map(_classPrivateFieldLooseBase(this, _highlightColors)[_highlightColors].split(\",\").map(pair => pair.split(\"=\").map(x => x.trim()))) : null);\n  }\n  get highlightColorNames() {\n    return shadow(this, \"highlightColorNames\", this.highlightColors ? new Map(Array.from(this.highlightColors, e => e.reverse())) : null);\n  }\n  setMainHighlightColorPicker(colorPicker) {\n    _classPrivateFieldLooseBase(this, _mainHighlightColorPicker)[_mainHighlightColorPicker] = colorPicker;\n  }\n  editAltText(editor) {\n    var _classPrivateFieldLoo17;\n    let firstTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    (_classPrivateFieldLoo17 = _classPrivateFieldLooseBase(this, _altTextManager)[_altTextManager]) === null || _classPrivateFieldLoo17 === void 0 ? void 0 : _classPrivateFieldLoo17.editAltText(this, editor, firstTime);\n  }\n  switchToMode(mode, callback) {\n    this._eventBus.on(\"annotationeditormodechanged\", callback, {\n      once: true,\n      signal: this._signal\n    });\n    this._eventBus.dispatch(\"showannotationeditorui\", {\n      source: this,\n      mode\n    });\n  }\n  setPreference(name, value) {\n    this._eventBus.dispatch(\"setpreference\", {\n      source: this,\n      name,\n      value\n    });\n  }\n  onSetPreference(_ref15) {\n    let name = _ref15.name,\n      value = _ref15.value;\n    switch (name) {\n      case \"enableNewAltTextWhenAddingImage\":\n        _classPrivateFieldLooseBase(this, _enableNewAltTextWhenAddingImage)[_enableNewAltTextWhenAddingImage] = value;\n        break;\n    }\n  }\n  onPageChanging(_ref16) {\n    let pageNumber = _ref16.pageNumber;\n    _classPrivateFieldLooseBase(this, _currentPageIndex)[_currentPageIndex] = pageNumber - 1;\n  }\n  focusMainContainer() {\n    _classPrivateFieldLooseBase(this, _container)[_container].focus();\n  }\n  findParent(x, y) {\n    for (const layer of _classPrivateFieldLooseBase(this, _allLayers)[_allLayers].values()) {\n      const _layer$div$getBoundin = layer.div.getBoundingClientRect(),\n        layerX = _layer$div$getBoundin.x,\n        layerY = _layer$div$getBoundin.y,\n        width = _layer$div$getBoundin.width,\n        height = _layer$div$getBoundin.height;\n      if (x >= layerX && x <= layerX + width && y >= layerY && y <= layerY + height) {\n        return layer;\n      }\n    }\n    return null;\n  }\n  disableUserSelect() {\n    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    _classPrivateFieldLooseBase(this, _viewer)[_viewer].classList.toggle(\"noUserSelect\", value);\n  }\n  addShouldRescale(editor) {\n    _classPrivateFieldLooseBase(this, _editorsToRescale)[_editorsToRescale].add(editor);\n  }\n  removeShouldRescale(editor) {\n    _classPrivateFieldLooseBase(this, _editorsToRescale)[_editorsToRescale].delete(editor);\n  }\n  onScaleChanging(_ref17) {\n    let scale = _ref17.scale;\n    this.commitOrRemove();\n    this.viewParameters.realScale = scale * PixelsPerInch.PDF_TO_CSS_UNITS;\n    for (const editor of _classPrivateFieldLooseBase(this, _editorsToRescale)[_editorsToRescale]) {\n      editor.onScaleChanging();\n    }\n  }\n  onRotationChanging(_ref18) {\n    let pagesRotation = _ref18.pagesRotation;\n    this.commitOrRemove();\n    this.viewParameters.rotation = pagesRotation;\n  }\n  highlightSelection() {\n    let methodOfCreation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    const selection = document.getSelection();\n    if (!selection || selection.isCollapsed) {\n      return;\n    }\n    const anchorNode = selection.anchorNode,\n      anchorOffset = selection.anchorOffset,\n      focusNode = selection.focusNode,\n      focusOffset = selection.focusOffset;\n    const text = selection.toString();\n    const anchorElement = _classPrivateFieldLooseBase(this, _getAnchorElementForSelection)[_getAnchorElementForSelection](selection);\n    const textLayer = anchorElement.closest(\".textLayer\");\n    const boxes = this.getSelectionBoxes(textLayer);\n    if (!boxes) {\n      return;\n    }\n    selection.empty();\n    const layer = _classPrivateFieldLooseBase(this, _getLayerForTextLayer)[_getLayerForTextLayer](textLayer);\n    const isNoneMode = _classPrivateFieldLooseBase(this, _mode)[_mode] === AnnotationEditorType.NONE;\n    const callback = () => {\n      layer === null || layer === void 0 ? void 0 : layer.createAndAddNewEditor({\n        x: 0,\n        y: 0\n      }, false, {\n        methodOfCreation,\n        boxes,\n        anchorNode,\n        anchorOffset,\n        focusNode,\n        focusOffset,\n        text\n      });\n      if (isNoneMode) {\n        this.showAllEditors(\"highlight\", true, true);\n      }\n    };\n    if (isNoneMode) {\n      this.switchToMode(AnnotationEditorType.HIGHLIGHT, callback);\n      return;\n    }\n    callback();\n  }\n  addToAnnotationStorage(editor) {\n    if (!editor.isEmpty() && _classPrivateFieldLooseBase(this, _annotationStorage)[_annotationStorage] && !_classPrivateFieldLooseBase(this, _annotationStorage)[_annotationStorage].has(editor.id)) {\n      _classPrivateFieldLooseBase(this, _annotationStorage)[_annotationStorage].setValue(editor.id, editor);\n    }\n  }\n  blur() {\n    this.isShiftKeyDown = false;\n    if (_classPrivateFieldLooseBase(this, _highlightWhenShiftUp)[_highlightWhenShiftUp]) {\n      _classPrivateFieldLooseBase(this, _highlightWhenShiftUp)[_highlightWhenShiftUp] = false;\n      _classPrivateFieldLooseBase(this, _onSelectEnd)[_onSelectEnd](\"main_toolbar\");\n    }\n    if (!this.hasSelection) {\n      return;\n    }\n    const _document = document,\n      activeElement = _document.activeElement;\n    for (const editor of _classPrivateFieldLooseBase(this, _selectedEditors)[_selectedEditors]) {\n      if (editor.div.contains(activeElement)) {\n        _classPrivateFieldLooseBase(this, _lastActiveElement)[_lastActiveElement] = [editor, activeElement];\n        editor._focusEventsAllowed = false;\n        break;\n      }\n    }\n  }\n  focus() {\n    if (!_classPrivateFieldLooseBase(this, _lastActiveElement)[_lastActiveElement]) {\n      return;\n    }\n    const _classPrivateFieldLoo18 = _slicedToArray(_classPrivateFieldLooseBase(this, _lastActiveElement)[_lastActiveElement], 2),\n      lastEditor = _classPrivateFieldLoo18[0],\n      lastActiveElement = _classPrivateFieldLoo18[1];\n    _classPrivateFieldLooseBase(this, _lastActiveElement)[_lastActiveElement] = null;\n    lastActiveElement.addEventListener(\"focusin\", () => {\n      lastEditor._focusEventsAllowed = true;\n    }, {\n      once: true,\n      signal: this._signal\n    });\n    lastActiveElement.focus();\n  }\n  addEditListeners() {\n    _classPrivateFieldLooseBase(this, _addKeyboardManager)[_addKeyboardManager]();\n    _classPrivateFieldLooseBase(this, _addCopyPasteListeners)[_addCopyPasteListeners]();\n  }\n  removeEditListeners() {\n    _classPrivateFieldLooseBase(this, _removeKeyboardManager)[_removeKeyboardManager]();\n    _classPrivateFieldLooseBase(this, _removeCopyPasteListeners)[_removeCopyPasteListeners]();\n  }\n  dragOver(event) {\n    for (const _ref19 of event.dataTransfer.items) {\n      const type = _ref19.type;\n      for (const editorType of _classPrivateFieldLooseBase(this, _editorTypes)[_editorTypes]) {\n        if (editorType.isHandlingMimeForPasting(type)) {\n          event.dataTransfer.dropEffect = \"copy\";\n          event.preventDefault();\n          return;\n        }\n      }\n    }\n  }\n  drop(event) {\n    for (const item of event.dataTransfer.items) {\n      for (const editorType of _classPrivateFieldLooseBase(this, _editorTypes)[_editorTypes]) {\n        if (editorType.isHandlingMimeForPasting(item.type)) {\n          editorType.paste(item, this.currentLayer);\n          event.preventDefault();\n          return;\n        }\n      }\n    }\n  }\n  copy(event) {\n    var _classPrivateFieldLoo19;\n    event.preventDefault();\n    (_classPrivateFieldLoo19 = _classPrivateFieldLooseBase(this, _activeEditor)[_activeEditor]) === null || _classPrivateFieldLoo19 === void 0 ? void 0 : _classPrivateFieldLoo19.commitOrRemove();\n    if (!this.hasSelection) {\n      return;\n    }\n    const editors = [];\n    for (const editor of _classPrivateFieldLooseBase(this, _selectedEditors)[_selectedEditors]) {\n      const serialized = editor.serialize(true);\n      if (serialized) {\n        editors.push(serialized);\n      }\n    }\n    if (editors.length === 0) {\n      return;\n    }\n    event.clipboardData.setData(\"application/pdfjs\", JSON.stringify(editors));\n  }\n  cut(event) {\n    this.copy(event);\n    this.delete();\n  }\n  async paste(event) {\n    event.preventDefault();\n    const clipboardData = event.clipboardData;\n    for (const item of clipboardData.items) {\n      for (const editorType of _classPrivateFieldLooseBase(this, _editorTypes)[_editorTypes]) {\n        if (editorType.isHandlingMimeForPasting(item.type)) {\n          editorType.paste(item, this.currentLayer);\n          return;\n        }\n      }\n    }\n    let data = clipboardData.getData(\"application/pdfjs\");\n    if (!data) {\n      return;\n    }\n    try {\n      data = JSON.parse(data);\n    } catch (ex) {\n      warn(`paste: \"${ex.message}\".`);\n      return;\n    }\n    if (!Array.isArray(data)) {\n      return;\n    }\n    this.unselectAll();\n    const layer = this.currentLayer;\n    try {\n      const newEditors = [];\n      for (const editor of data) {\n        const deserializedEditor = await layer.deserialize(editor);\n        if (!deserializedEditor) {\n          return;\n        }\n        newEditors.push(deserializedEditor);\n      }\n      const cmd = () => {\n        for (const editor of newEditors) {\n          _classPrivateFieldLooseBase(this, _addEditorToLayer)[_addEditorToLayer](editor);\n        }\n        _classPrivateFieldLooseBase(this, _selectEditors)[_selectEditors](newEditors);\n      };\n      const undo = () => {\n        for (const editor of newEditors) {\n          editor.remove();\n        }\n      };\n      this.addCommands({\n        cmd,\n        undo,\n        mustExec: true\n      });\n    } catch (ex) {\n      warn(`paste: \"${ex.message}\".`);\n    }\n  }\n  keydown(event) {\n    if (!this.isShiftKeyDown && event.key === \"Shift\") {\n      this.isShiftKeyDown = true;\n    }\n    if (_classPrivateFieldLooseBase(this, _mode)[_mode] !== AnnotationEditorType.NONE && !this.isEditorHandlingKeyboard) {\n      AnnotationEditorUIManager._keyboardManager.exec(this, event);\n    }\n  }\n  keyup(event) {\n    if (this.isShiftKeyDown && event.key === \"Shift\") {\n      this.isShiftKeyDown = false;\n      if (_classPrivateFieldLooseBase(this, _highlightWhenShiftUp)[_highlightWhenShiftUp]) {\n        _classPrivateFieldLooseBase(this, _highlightWhenShiftUp)[_highlightWhenShiftUp] = false;\n        _classPrivateFieldLooseBase(this, _onSelectEnd)[_onSelectEnd](\"main_toolbar\");\n      }\n    }\n  }\n  onEditingAction(_ref20) {\n    let name = _ref20.name;\n    switch (name) {\n      case \"undo\":\n      case \"redo\":\n      case \"delete\":\n      case \"selectAll\":\n        this[name]();\n        break;\n      case \"highlightSelection\":\n        this.highlightSelection(\"context_menu\");\n        break;\n    }\n  }\n  setEditingState(isEditing) {\n    if (isEditing) {\n      _classPrivateFieldLooseBase(this, _addFocusManager)[_addFocusManager]();\n      _classPrivateFieldLooseBase(this, _addCopyPasteListeners)[_addCopyPasteListeners]();\n      _classPrivateFieldLooseBase(this, _dispatchUpdateStates)[_dispatchUpdateStates]({\n        isEditing: _classPrivateFieldLooseBase(this, _mode)[_mode] !== AnnotationEditorType.NONE,\n        isEmpty: _classPrivateFieldLooseBase(this, _isEmpty)[_isEmpty](),\n        hasSomethingToUndo: _classPrivateFieldLooseBase(this, _commandManager)[_commandManager].hasSomethingToUndo(),\n        hasSomethingToRedo: _classPrivateFieldLooseBase(this, _commandManager)[_commandManager].hasSomethingToRedo(),\n        hasSelectedEditor: false\n      });\n    } else {\n      _classPrivateFieldLooseBase(this, _removeFocusManager)[_removeFocusManager]();\n      _classPrivateFieldLooseBase(this, _removeCopyPasteListeners)[_removeCopyPasteListeners]();\n      _classPrivateFieldLooseBase(this, _dispatchUpdateStates)[_dispatchUpdateStates]({\n        isEditing: false\n      });\n      this.disableUserSelect(false);\n    }\n  }\n  registerEditorTypes(types) {\n    if (_classPrivateFieldLooseBase(this, _editorTypes)[_editorTypes]) {\n      return;\n    }\n    _classPrivateFieldLooseBase(this, _editorTypes)[_editorTypes] = types;\n    for (const editorType of _classPrivateFieldLooseBase(this, _editorTypes)[_editorTypes]) {\n      _classPrivateFieldLooseBase(this, _dispatchUpdateUI)[_dispatchUpdateUI](editorType.defaultPropertiesToUpdate);\n    }\n  }\n  getId() {\n    return _classPrivateFieldLooseBase(this, _idManager)[_idManager].id;\n  }\n  get currentLayer() {\n    return _classPrivateFieldLooseBase(this, _allLayers)[_allLayers].get(_classPrivateFieldLooseBase(this, _currentPageIndex)[_currentPageIndex]);\n  }\n  getLayer(pageIndex) {\n    return _classPrivateFieldLooseBase(this, _allLayers)[_allLayers].get(pageIndex);\n  }\n  get currentPageIndex() {\n    return _classPrivateFieldLooseBase(this, _currentPageIndex)[_currentPageIndex];\n  }\n  addLayer(layer) {\n    _classPrivateFieldLooseBase(this, _allLayers)[_allLayers].set(layer.pageIndex, layer);\n    if (_classPrivateFieldLooseBase(this, _isEnabled)[_isEnabled]) {\n      layer.enable();\n    } else {\n      layer.disable();\n    }\n  }\n  removeLayer(layer) {\n    _classPrivateFieldLooseBase(this, _allLayers)[_allLayers].delete(layer.pageIndex);\n  }\n  async updateMode(mode) {\n    let editId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let isFromKeyboard = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (_classPrivateFieldLooseBase(this, _mode)[_mode] === mode) {\n      return;\n    }\n    if (_classPrivateFieldLooseBase(this, _updateModeCapability)[_updateModeCapability]) {\n      await _classPrivateFieldLooseBase(this, _updateModeCapability)[_updateModeCapability].promise;\n      if (!_classPrivateFieldLooseBase(this, _updateModeCapability)[_updateModeCapability]) {\n        return;\n      }\n    }\n    _classPrivateFieldLooseBase(this, _updateModeCapability)[_updateModeCapability] = Promise.withResolvers();\n    _classPrivateFieldLooseBase(this, _mode)[_mode] = mode;\n    if (mode === AnnotationEditorType.NONE) {\n      this.setEditingState(false);\n      _classPrivateFieldLooseBase(this, _disableAll)[_disableAll]();\n      _classPrivateFieldLooseBase(this, _updateModeCapability)[_updateModeCapability].resolve();\n      return;\n    }\n    this.setEditingState(true);\n    await _classPrivateFieldLooseBase(this, _enableAll)[_enableAll]();\n    this.unselectAll();\n    for (const layer of _classPrivateFieldLooseBase(this, _allLayers)[_allLayers].values()) {\n      layer.updateMode(mode);\n    }\n    if (!editId) {\n      if (isFromKeyboard) {\n        this.addNewEditorFromKeyboard();\n      }\n      _classPrivateFieldLooseBase(this, _updateModeCapability)[_updateModeCapability].resolve();\n      return;\n    }\n    for (const editor of _classPrivateFieldLooseBase(this, _allEditors)[_allEditors].values()) {\n      if (editor.annotationElementId === editId) {\n        this.setSelected(editor);\n        editor.enterInEditMode();\n      } else {\n        editor.unselect();\n      }\n    }\n    _classPrivateFieldLooseBase(this, _updateModeCapability)[_updateModeCapability].resolve();\n  }\n  addNewEditorFromKeyboard() {\n    if (this.currentLayer.canCreateNewEmptyEditor()) {\n      this.currentLayer.addNewEditor();\n    }\n  }\n  updateToolbar(mode) {\n    if (mode === _classPrivateFieldLooseBase(this, _mode)[_mode]) {\n      return;\n    }\n    this._eventBus.dispatch(\"switchannotationeditormode\", {\n      source: this,\n      mode\n    });\n  }\n  updateParams(type, value) {\n    var _classPrivateFieldLoo20, _classPrivateFieldLoo21;\n    if (!_classPrivateFieldLooseBase(this, _editorTypes)[_editorTypes]) {\n      return;\n    }\n    switch (type) {\n      case AnnotationEditorParamsType.CREATE:\n        this.currentLayer.addNewEditor();\n        return;\n      case AnnotationEditorParamsType.HIGHLIGHT_DEFAULT_COLOR:\n        (_classPrivateFieldLoo20 = _classPrivateFieldLooseBase(this, _mainHighlightColorPicker)[_mainHighlightColorPicker]) === null || _classPrivateFieldLoo20 === void 0 ? void 0 : _classPrivateFieldLoo20.updateColor(value);\n        break;\n      case AnnotationEditorParamsType.HIGHLIGHT_SHOW_ALL:\n        this._eventBus.dispatch(\"reporttelemetry\", {\n          source: this,\n          details: {\n            type: \"editing\",\n            data: {\n              type: \"highlight\",\n              action: \"toggle_visibility\"\n            }\n          }\n        });\n        ((_classPrivateFieldLoo21 = _classPrivateFieldLooseBase(this, _showAllStates))[_showAllStates] || (_classPrivateFieldLoo21[_showAllStates] = new Map())).set(type, value);\n        this.showAllEditors(\"highlight\", value);\n        break;\n    }\n    for (const editor of _classPrivateFieldLooseBase(this, _selectedEditors)[_selectedEditors]) {\n      editor.updateParams(type, value);\n    }\n    for (const editorType of _classPrivateFieldLooseBase(this, _editorTypes)[_editorTypes]) {\n      editorType.updateDefaultParams(type, value);\n    }\n  }\n  showAllEditors(type, visible) {\n    var _classPrivateFieldLoo22, _classPrivateFieldLoo23;\n    let updateButton = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    for (const editor of _classPrivateFieldLooseBase(this, _allEditors)[_allEditors].values()) {\n      if (editor.editorType === type) {\n        editor.show(visible);\n      }\n    }\n    const state = (_classPrivateFieldLoo22 = (_classPrivateFieldLoo23 = _classPrivateFieldLooseBase(this, _showAllStates)[_showAllStates]) === null || _classPrivateFieldLoo23 === void 0 ? void 0 : _classPrivateFieldLoo23.get(AnnotationEditorParamsType.HIGHLIGHT_SHOW_ALL)) !== null && _classPrivateFieldLoo22 !== void 0 ? _classPrivateFieldLoo22 : true;\n    if (state !== visible) {\n      _classPrivateFieldLooseBase(this, _dispatchUpdateUI)[_dispatchUpdateUI]([[AnnotationEditorParamsType.HIGHLIGHT_SHOW_ALL, visible]]);\n    }\n  }\n  enableWaiting() {\n    let mustWait = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (_classPrivateFieldLooseBase(this, _isWaiting)[_isWaiting] === mustWait) {\n      return;\n    }\n    _classPrivateFieldLooseBase(this, _isWaiting)[_isWaiting] = mustWait;\n    for (const layer of _classPrivateFieldLooseBase(this, _allLayers)[_allLayers].values()) {\n      if (mustWait) {\n        layer.disableClick();\n      } else {\n        layer.enableClick();\n      }\n      layer.div.classList.toggle(\"waiting\", mustWait);\n    }\n  }\n  getEditors(pageIndex) {\n    const editors = [];\n    for (const editor of _classPrivateFieldLooseBase(this, _allEditors)[_allEditors].values()) {\n      if (editor.pageIndex === pageIndex) {\n        editors.push(editor);\n      }\n    }\n    return editors;\n  }\n  getEditor(id) {\n    return _classPrivateFieldLooseBase(this, _allEditors)[_allEditors].get(id);\n  }\n  addEditor(editor) {\n    _classPrivateFieldLooseBase(this, _allEditors)[_allEditors].set(editor.id, editor);\n  }\n  removeEditor(editor) {\n    if (editor.div.contains(document.activeElement)) {\n      if (_classPrivateFieldLooseBase(this, _focusMainContainerTimeoutId)[_focusMainContainerTimeoutId]) {\n        clearTimeout(_classPrivateFieldLooseBase(this, _focusMainContainerTimeoutId)[_focusMainContainerTimeoutId]);\n      }\n      _classPrivateFieldLooseBase(this, _focusMainContainerTimeoutId)[_focusMainContainerTimeoutId] = setTimeout(() => {\n        this.focusMainContainer();\n        _classPrivateFieldLooseBase(this, _focusMainContainerTimeoutId)[_focusMainContainerTimeoutId] = null;\n      }, 0);\n    }\n    _classPrivateFieldLooseBase(this, _allEditors)[_allEditors].delete(editor.id);\n    this.unselect(editor);\n    if (!editor.annotationElementId || !_classPrivateFieldLooseBase(this, _deletedAnnotationsElementIds)[_deletedAnnotationsElementIds].has(editor.annotationElementId)) {\n      var _classPrivateFieldLoo24;\n      (_classPrivateFieldLoo24 = _classPrivateFieldLooseBase(this, _annotationStorage)[_annotationStorage]) === null || _classPrivateFieldLoo24 === void 0 ? void 0 : _classPrivateFieldLoo24.remove(editor.id);\n    }\n  }\n  addDeletedAnnotationElement(editor) {\n    _classPrivateFieldLooseBase(this, _deletedAnnotationsElementIds)[_deletedAnnotationsElementIds].add(editor.annotationElementId);\n    this.addChangedExistingAnnotation(editor);\n    editor.deleted = true;\n  }\n  isDeletedAnnotationElement(annotationElementId) {\n    return _classPrivateFieldLooseBase(this, _deletedAnnotationsElementIds)[_deletedAnnotationsElementIds].has(annotationElementId);\n  }\n  removeDeletedAnnotationElement(editor) {\n    _classPrivateFieldLooseBase(this, _deletedAnnotationsElementIds)[_deletedAnnotationsElementIds].delete(editor.annotationElementId);\n    this.removeChangedExistingAnnotation(editor);\n    editor.deleted = false;\n  }\n  setActiveEditor(editor) {\n    if (_classPrivateFieldLooseBase(this, _activeEditor)[_activeEditor] === editor) {\n      return;\n    }\n    _classPrivateFieldLooseBase(this, _activeEditor)[_activeEditor] = editor;\n    if (editor) {\n      _classPrivateFieldLooseBase(this, _dispatchUpdateUI)[_dispatchUpdateUI](editor.propertiesToUpdate);\n    }\n  }\n  updateUI(editor) {\n    if (_classPrivateFieldLooseBase(this, _lastSelectedEditor)[_lastSelectedEditor] === editor) {\n      _classPrivateFieldLooseBase(this, _dispatchUpdateUI)[_dispatchUpdateUI](editor.propertiesToUpdate);\n    }\n  }\n  toggleSelected(editor) {\n    if (_classPrivateFieldLooseBase(this, _selectedEditors)[_selectedEditors].has(editor)) {\n      _classPrivateFieldLooseBase(this, _selectedEditors)[_selectedEditors].delete(editor);\n      editor.unselect();\n      _classPrivateFieldLooseBase(this, _dispatchUpdateStates)[_dispatchUpdateStates]({\n        hasSelectedEditor: this.hasSelection\n      });\n      return;\n    }\n    _classPrivateFieldLooseBase(this, _selectedEditors)[_selectedEditors].add(editor);\n    editor.select();\n    _classPrivateFieldLooseBase(this, _dispatchUpdateUI)[_dispatchUpdateUI](editor.propertiesToUpdate);\n    _classPrivateFieldLooseBase(this, _dispatchUpdateStates)[_dispatchUpdateStates]({\n      hasSelectedEditor: true\n    });\n  }\n  setSelected(editor) {\n    for (const ed of _classPrivateFieldLooseBase(this, _selectedEditors)[_selectedEditors]) {\n      if (ed !== editor) {\n        ed.unselect();\n      }\n    }\n    _classPrivateFieldLooseBase(this, _selectedEditors)[_selectedEditors].clear();\n    _classPrivateFieldLooseBase(this, _selectedEditors)[_selectedEditors].add(editor);\n    editor.select();\n    _classPrivateFieldLooseBase(this, _dispatchUpdateUI)[_dispatchUpdateUI](editor.propertiesToUpdate);\n    _classPrivateFieldLooseBase(this, _dispatchUpdateStates)[_dispatchUpdateStates]({\n      hasSelectedEditor: true\n    });\n  }\n  isSelected(editor) {\n    return _classPrivateFieldLooseBase(this, _selectedEditors)[_selectedEditors].has(editor);\n  }\n  get firstSelectedEditor() {\n    return _classPrivateFieldLooseBase(this, _selectedEditors)[_selectedEditors].values().next().value;\n  }\n  unselect(editor) {\n    editor.unselect();\n    _classPrivateFieldLooseBase(this, _selectedEditors)[_selectedEditors].delete(editor);\n    _classPrivateFieldLooseBase(this, _dispatchUpdateStates)[_dispatchUpdateStates]({\n      hasSelectedEditor: this.hasSelection\n    });\n  }\n  get hasSelection() {\n    return _classPrivateFieldLooseBase(this, _selectedEditors)[_selectedEditors].size !== 0;\n  }\n  get isEnterHandled() {\n    return _classPrivateFieldLooseBase(this, _selectedEditors)[_selectedEditors].size === 1 && this.firstSelectedEditor.isEnterHandled;\n  }\n  undo() {\n    _classPrivateFieldLooseBase(this, _commandManager)[_commandManager].undo();\n    _classPrivateFieldLooseBase(this, _dispatchUpdateStates)[_dispatchUpdateStates]({\n      hasSomethingToUndo: _classPrivateFieldLooseBase(this, _commandManager)[_commandManager].hasSomethingToUndo(),\n      hasSomethingToRedo: true,\n      isEmpty: _classPrivateFieldLooseBase(this, _isEmpty)[_isEmpty]()\n    });\n  }\n  redo() {\n    _classPrivateFieldLooseBase(this, _commandManager)[_commandManager].redo();\n    _classPrivateFieldLooseBase(this, _dispatchUpdateStates)[_dispatchUpdateStates]({\n      hasSomethingToUndo: true,\n      hasSomethingToRedo: _classPrivateFieldLooseBase(this, _commandManager)[_commandManager].hasSomethingToRedo(),\n      isEmpty: _classPrivateFieldLooseBase(this, _isEmpty)[_isEmpty]()\n    });\n  }\n  addCommands(params) {\n    _classPrivateFieldLooseBase(this, _commandManager)[_commandManager].add(params);\n    _classPrivateFieldLooseBase(this, _dispatchUpdateStates)[_dispatchUpdateStates]({\n      hasSomethingToUndo: true,\n      hasSomethingToRedo: false,\n      isEmpty: _classPrivateFieldLooseBase(this, _isEmpty)[_isEmpty]()\n    });\n  }\n  delete() {\n    this.commitOrRemove();\n    if (!this.hasSelection) {\n      return;\n    }\n    const editors = [..._classPrivateFieldLooseBase(this, _selectedEditors)[_selectedEditors]];\n    const cmd = () => {\n      for (const editor of editors) {\n        editor.remove();\n      }\n    };\n    const undo = () => {\n      for (const editor of editors) {\n        _classPrivateFieldLooseBase(this, _addEditorToLayer)[_addEditorToLayer](editor);\n      }\n    };\n    this.addCommands({\n      cmd,\n      undo,\n      mustExec: true\n    });\n  }\n  commitOrRemove() {\n    var _classPrivateFieldLoo25;\n    (_classPrivateFieldLoo25 = _classPrivateFieldLooseBase(this, _activeEditor)[_activeEditor]) === null || _classPrivateFieldLoo25 === void 0 ? void 0 : _classPrivateFieldLoo25.commitOrRemove();\n  }\n  hasSomethingToControl() {\n    return _classPrivateFieldLooseBase(this, _activeEditor)[_activeEditor] || this.hasSelection;\n  }\n  selectAll() {\n    for (const editor of _classPrivateFieldLooseBase(this, _selectedEditors)[_selectedEditors]) {\n      editor.commit();\n    }\n    _classPrivateFieldLooseBase(this, _selectEditors)[_selectEditors](_classPrivateFieldLooseBase(this, _allEditors)[_allEditors].values());\n  }\n  unselectAll() {\n    if (_classPrivateFieldLooseBase(this, _activeEditor)[_activeEditor]) {\n      _classPrivateFieldLooseBase(this, _activeEditor)[_activeEditor].commitOrRemove();\n      if (_classPrivateFieldLooseBase(this, _mode)[_mode] !== AnnotationEditorType.NONE) {\n        return;\n      }\n    }\n    if (!this.hasSelection) {\n      return;\n    }\n    for (const editor of _classPrivateFieldLooseBase(this, _selectedEditors)[_selectedEditors]) {\n      editor.unselect();\n    }\n    _classPrivateFieldLooseBase(this, _selectedEditors)[_selectedEditors].clear();\n    _classPrivateFieldLooseBase(this, _dispatchUpdateStates)[_dispatchUpdateStates]({\n      hasSelectedEditor: false\n    });\n  }\n  translateSelectedEditors(x, y) {\n    let noCommit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (!noCommit) {\n      this.commitOrRemove();\n    }\n    if (!this.hasSelection) {\n      return;\n    }\n    _classPrivateFieldLooseBase(this, _translation)[_translation][0] += x;\n    _classPrivateFieldLooseBase(this, _translation)[_translation][1] += y;\n    const _classPrivateFieldLoo26 = _slicedToArray(_classPrivateFieldLooseBase(this, _translation)[_translation], 2),\n      totalX = _classPrivateFieldLoo26[0],\n      totalY = _classPrivateFieldLoo26[1];\n    const editors = [..._classPrivateFieldLooseBase(this, _selectedEditors)[_selectedEditors]];\n    const TIME_TO_WAIT = 1000;\n    if (_classPrivateFieldLooseBase(this, _translationTimeoutId)[_translationTimeoutId]) {\n      clearTimeout(_classPrivateFieldLooseBase(this, _translationTimeoutId)[_translationTimeoutId]);\n    }\n    _classPrivateFieldLooseBase(this, _translationTimeoutId)[_translationTimeoutId] = setTimeout(() => {\n      _classPrivateFieldLooseBase(this, _translationTimeoutId)[_translationTimeoutId] = null;\n      _classPrivateFieldLooseBase(this, _translation)[_translation][0] = _classPrivateFieldLooseBase(this, _translation)[_translation][1] = 0;\n      this.addCommands({\n        cmd: () => {\n          for (const editor of editors) {\n            if (_classPrivateFieldLooseBase(this, _allEditors)[_allEditors].has(editor.id)) {\n              editor.translateInPage(totalX, totalY);\n            }\n          }\n        },\n        undo: () => {\n          for (const editor of editors) {\n            if (_classPrivateFieldLooseBase(this, _allEditors)[_allEditors].has(editor.id)) {\n              editor.translateInPage(-totalX, -totalY);\n            }\n          }\n        },\n        mustExec: false\n      });\n    }, TIME_TO_WAIT);\n    for (const editor of editors) {\n      editor.translateInPage(x, y);\n    }\n  }\n  setUpDragSession() {\n    if (!this.hasSelection) {\n      return;\n    }\n    this.disableUserSelect(true);\n    _classPrivateFieldLooseBase(this, _draggingEditors)[_draggingEditors] = new Map();\n    for (const editor of _classPrivateFieldLooseBase(this, _selectedEditors)[_selectedEditors]) {\n      _classPrivateFieldLooseBase(this, _draggingEditors)[_draggingEditors].set(editor, {\n        savedX: editor.x,\n        savedY: editor.y,\n        savedPageIndex: editor.pageIndex,\n        newX: 0,\n        newY: 0,\n        newPageIndex: -1\n      });\n    }\n  }\n  endDragSession() {\n    if (!_classPrivateFieldLooseBase(this, _draggingEditors)[_draggingEditors]) {\n      return false;\n    }\n    this.disableUserSelect(false);\n    const map = _classPrivateFieldLooseBase(this, _draggingEditors)[_draggingEditors];\n    _classPrivateFieldLooseBase(this, _draggingEditors)[_draggingEditors] = null;\n    let mustBeAddedInUndoStack = false;\n    for (const _ref21 of map) {\n      var _ref22 = _slicedToArray(_ref21, 2);\n      var _ref22$ = _ref22[0];\n      const x = _ref22$.x;\n      const y = _ref22$.y;\n      const pageIndex = _ref22$.pageIndex;\n      const value = _ref22[1];\n      value.newX = x;\n      value.newY = y;\n      value.newPageIndex = pageIndex;\n      mustBeAddedInUndoStack || (mustBeAddedInUndoStack = x !== value.savedX || y !== value.savedY || pageIndex !== value.savedPageIndex);\n    }\n    if (!mustBeAddedInUndoStack) {\n      return false;\n    }\n    const move = (editor, x, y, pageIndex) => {\n      if (_classPrivateFieldLooseBase(this, _allEditors)[_allEditors].has(editor.id)) {\n        const parent = _classPrivateFieldLooseBase(this, _allLayers)[_allLayers].get(pageIndex);\n        if (parent) {\n          editor._setParentAndPosition(parent, x, y);\n        } else {\n          editor.pageIndex = pageIndex;\n          editor.x = x;\n          editor.y = y;\n        }\n      }\n    };\n    this.addCommands({\n      cmd: () => {\n        for (const _ref23 of map) {\n          var _ref24 = _slicedToArray(_ref23, 2);\n          const editor = _ref24[0];\n          var _ref24$ = _ref24[1];\n          const newX = _ref24$.newX;\n          const newY = _ref24$.newY;\n          const newPageIndex = _ref24$.newPageIndex;\n          move(editor, newX, newY, newPageIndex);\n        }\n      },\n      undo: () => {\n        for (const _ref25 of map) {\n          var _ref26 = _slicedToArray(_ref25, 2);\n          const editor = _ref26[0];\n          var _ref26$ = _ref26[1];\n          const savedX = _ref26$.savedX;\n          const savedY = _ref26$.savedY;\n          const savedPageIndex = _ref26$.savedPageIndex;\n          move(editor, savedX, savedY, savedPageIndex);\n        }\n      },\n      mustExec: true\n    });\n    return true;\n  }\n  dragSelectedEditors(tx, ty) {\n    if (!_classPrivateFieldLooseBase(this, _draggingEditors)[_draggingEditors]) {\n      return;\n    }\n    for (const editor of _classPrivateFieldLooseBase(this, _draggingEditors)[_draggingEditors].keys()) {\n      editor.drag(tx, ty);\n    }\n  }\n  rebuild(editor) {\n    if (editor.parent === null) {\n      const parent = this.getLayer(editor.pageIndex);\n      if (parent) {\n        parent.changeParent(editor);\n        parent.addOrRebuild(editor);\n      } else {\n        this.addEditor(editor);\n        this.addToAnnotationStorage(editor);\n        editor.rebuild();\n      }\n    } else {\n      editor.parent.addOrRebuild(editor);\n    }\n  }\n  get isEditorHandlingKeyboard() {\n    var _this$getActive;\n    return ((_this$getActive = this.getActive()) === null || _this$getActive === void 0 ? void 0 : _this$getActive.shouldGetKeyboardEvents()) || _classPrivateFieldLooseBase(this, _selectedEditors)[_selectedEditors].size === 1 && this.firstSelectedEditor.shouldGetKeyboardEvents();\n  }\n  isActive(editor) {\n    return _classPrivateFieldLooseBase(this, _activeEditor)[_activeEditor] === editor;\n  }\n  getActive() {\n    return _classPrivateFieldLooseBase(this, _activeEditor)[_activeEditor];\n  }\n  getMode() {\n    return _classPrivateFieldLooseBase(this, _mode)[_mode];\n  }\n  get imageManager() {\n    return shadow(this, \"imageManager\", new ImageManager());\n  }\n  getSelectionBoxes(textLayer) {\n    if (!textLayer) {\n      return null;\n    }\n    const selection = document.getSelection();\n    for (let i = 0, ii = selection.rangeCount; i < ii; i++) {\n      if (!textLayer.contains(selection.getRangeAt(i).commonAncestorContainer)) {\n        return null;\n      }\n    }\n    const _textLayer$getBoundin = textLayer.getBoundingClientRect(),\n      layerX = _textLayer$getBoundin.x,\n      layerY = _textLayer$getBoundin.y,\n      parentWidth = _textLayer$getBoundin.width,\n      parentHeight = _textLayer$getBoundin.height;\n    let rotator;\n    switch (textLayer.getAttribute(\"data-main-rotation\")) {\n      case \"90\":\n        rotator = (x, y, w, h) => ({\n          x: (y - layerY) / parentHeight,\n          y: 1 - (x + w - layerX) / parentWidth,\n          width: h / parentHeight,\n          height: w / parentWidth\n        });\n        break;\n      case \"180\":\n        rotator = (x, y, w, h) => ({\n          x: 1 - (x + w - layerX) / parentWidth,\n          y: 1 - (y + h - layerY) / parentHeight,\n          width: w / parentWidth,\n          height: h / parentHeight\n        });\n        break;\n      case \"270\":\n        rotator = (x, y, w, h) => ({\n          x: 1 - (y + h - layerY) / parentHeight,\n          y: (x - layerX) / parentWidth,\n          width: h / parentHeight,\n          height: w / parentWidth\n        });\n        break;\n      default:\n        rotator = (x, y, w, h) => ({\n          x: (x - layerX) / parentWidth,\n          y: (y - layerY) / parentHeight,\n          width: w / parentWidth,\n          height: h / parentHeight\n        });\n        break;\n    }\n    const boxes = [];\n    for (let i = 0, ii = selection.rangeCount; i < ii; i++) {\n      const range = selection.getRangeAt(i);\n      if (range.collapsed) {\n        continue;\n      }\n      for (const _ref27 of range.getClientRects()) {\n        const x = _ref27.x;\n        const y = _ref27.y;\n        const width = _ref27.width;\n        const height = _ref27.height;\n        if (width === 0 || height === 0) {\n          continue;\n        }\n        boxes.push(rotator(x, y, width, height));\n      }\n    }\n    return boxes.length === 0 ? null : boxes;\n  }\n  addChangedExistingAnnotation(_ref28) {\n    var _classPrivateFieldLoo27;\n    let annotationElementId = _ref28.annotationElementId,\n      id = _ref28.id;\n    ((_classPrivateFieldLoo27 = _classPrivateFieldLooseBase(this, _changedExistingAnnotations))[_changedExistingAnnotations] || (_classPrivateFieldLoo27[_changedExistingAnnotations] = new Map())).set(annotationElementId, id);\n  }\n  removeChangedExistingAnnotation(_ref29) {\n    var _classPrivateFieldLoo28;\n    let annotationElementId = _ref29.annotationElementId;\n    (_classPrivateFieldLoo28 = _classPrivateFieldLooseBase(this, _changedExistingAnnotations)[_changedExistingAnnotations]) === null || _classPrivateFieldLoo28 === void 0 ? void 0 : _classPrivateFieldLoo28.delete(annotationElementId);\n  }\n  renderAnnotationElement(annotation) {\n    var _classPrivateFieldLoo29;\n    const editorId = (_classPrivateFieldLoo29 = _classPrivateFieldLooseBase(this, _changedExistingAnnotations)[_changedExistingAnnotations]) === null || _classPrivateFieldLoo29 === void 0 ? void 0 : _classPrivateFieldLoo29.get(annotation.data.id);\n    if (!editorId) {\n      return;\n    }\n    const editor = _classPrivateFieldLooseBase(this, _annotationStorage)[_annotationStorage].getRawValue(editorId);\n    if (!editor) {\n      return;\n    }\n    if (_classPrivateFieldLooseBase(this, _mode)[_mode] === AnnotationEditorType.NONE && !editor.hasBeenModified) {\n      return;\n    }\n    editor.renderAnnotationElement(annotation);\n  }\n}\nfunction _getAnchorElementForSelection2(_ref158) {\n  let anchorNode = _ref158.anchorNode;\n  return anchorNode.nodeType === Node.TEXT_NODE ? anchorNode.parentElement : anchorNode;\n}\nfunction _getLayerForTextLayer2(textLayer) {\n  const currentLayer = this.currentLayer;\n  if (currentLayer.hasTextLayer(textLayer)) {\n    return currentLayer;\n  }\n  for (const layer of _classPrivateFieldLooseBase(this, _allLayers)[_allLayers].values()) {\n    if (layer.hasTextLayer(textLayer)) {\n      return layer;\n    }\n  }\n  return null;\n}\nfunction _displayHighlightToolbar2() {\n  var _classPrivateFieldLoo126;\n  const selection = document.getSelection();\n  if (!selection || selection.isCollapsed) {\n    return;\n  }\n  const anchorElement = _classPrivateFieldLooseBase(this, _getAnchorElementForSelection)[_getAnchorElementForSelection](selection);\n  const textLayer = anchorElement.closest(\".textLayer\");\n  const boxes = this.getSelectionBoxes(textLayer);\n  if (!boxes) {\n    return;\n  }\n  (_classPrivateFieldLoo126 = _classPrivateFieldLooseBase(this, _highlightToolbar))[_highlightToolbar] || (_classPrivateFieldLoo126[_highlightToolbar] = new HighlightToolbar(this));\n  _classPrivateFieldLooseBase(this, _highlightToolbar)[_highlightToolbar].show(textLayer, boxes, this.direction === \"ltr\");\n}\nfunction _selectionChange2() {\n  var _classPrivateFieldLoo129;\n  const selection = document.getSelection();\n  if (!selection || selection.isCollapsed) {\n    if (_classPrivateFieldLooseBase(this, _selectedTextNode)[_selectedTextNode]) {\n      var _classPrivateFieldLoo127;\n      (_classPrivateFieldLoo127 = _classPrivateFieldLooseBase(this, _highlightToolbar)[_highlightToolbar]) === null || _classPrivateFieldLoo127 === void 0 ? void 0 : _classPrivateFieldLoo127.hide();\n      _classPrivateFieldLooseBase(this, _selectedTextNode)[_selectedTextNode] = null;\n      _classPrivateFieldLooseBase(this, _dispatchUpdateStates)[_dispatchUpdateStates]({\n        hasSelectedText: false\n      });\n    }\n    return;\n  }\n  const anchorNode = selection.anchorNode;\n  if (anchorNode === _classPrivateFieldLooseBase(this, _selectedTextNode)[_selectedTextNode]) {\n    return;\n  }\n  const anchorElement = _classPrivateFieldLooseBase(this, _getAnchorElementForSelection)[_getAnchorElementForSelection](selection);\n  const textLayer = anchorElement.closest(\".textLayer\");\n  if (!textLayer) {\n    if (_classPrivateFieldLooseBase(this, _selectedTextNode)[_selectedTextNode]) {\n      var _classPrivateFieldLoo128;\n      (_classPrivateFieldLoo128 = _classPrivateFieldLooseBase(this, _highlightToolbar)[_highlightToolbar]) === null || _classPrivateFieldLoo128 === void 0 ? void 0 : _classPrivateFieldLoo128.hide();\n      _classPrivateFieldLooseBase(this, _selectedTextNode)[_selectedTextNode] = null;\n      _classPrivateFieldLooseBase(this, _dispatchUpdateStates)[_dispatchUpdateStates]({\n        hasSelectedText: false\n      });\n    }\n    return;\n  }\n  (_classPrivateFieldLoo129 = _classPrivateFieldLooseBase(this, _highlightToolbar)[_highlightToolbar]) === null || _classPrivateFieldLoo129 === void 0 ? void 0 : _classPrivateFieldLoo129.hide();\n  _classPrivateFieldLooseBase(this, _selectedTextNode)[_selectedTextNode] = anchorNode;\n  _classPrivateFieldLooseBase(this, _dispatchUpdateStates)[_dispatchUpdateStates]({\n    hasSelectedText: true\n  });\n  if (_classPrivateFieldLooseBase(this, _mode)[_mode] !== AnnotationEditorType.HIGHLIGHT && _classPrivateFieldLooseBase(this, _mode)[_mode] !== AnnotationEditorType.NONE) {\n    return;\n  }\n  if (_classPrivateFieldLooseBase(this, _mode)[_mode] === AnnotationEditorType.HIGHLIGHT) {\n    this.showAllEditors(\"highlight\", true, true);\n  }\n  _classPrivateFieldLooseBase(this, _highlightWhenShiftUp)[_highlightWhenShiftUp] = this.isShiftKeyDown;\n  if (!this.isShiftKeyDown) {\n    const activeLayer = _classPrivateFieldLooseBase(this, _mode)[_mode] === AnnotationEditorType.HIGHLIGHT ? _classPrivateFieldLooseBase(this, _getLayerForTextLayer)[_getLayerForTextLayer](textLayer) : null;\n    activeLayer === null || activeLayer === void 0 ? void 0 : activeLayer.toggleDrawing();\n    const ac = new AbortController();\n    const signal = this.combinedSignal(ac);\n    const pointerup = e => {\n      if (e.type === \"pointerup\" && e.button !== 0) {\n        return;\n      }\n      ac.abort();\n      activeLayer === null || activeLayer === void 0 ? void 0 : activeLayer.toggleDrawing(true);\n      if (e.type === \"pointerup\") {\n        _classPrivateFieldLooseBase(this, _onSelectEnd)[_onSelectEnd](\"main_toolbar\");\n      }\n    };\n    window.addEventListener(\"pointerup\", pointerup, {\n      signal\n    });\n    window.addEventListener(\"blur\", pointerup, {\n      signal\n    });\n  }\n}\nfunction _onSelectEnd2() {\n  let methodOfCreation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  if (_classPrivateFieldLooseBase(this, _mode)[_mode] === AnnotationEditorType.HIGHLIGHT) {\n    this.highlightSelection(methodOfCreation);\n  } else if (_classPrivateFieldLooseBase(this, _enableHighlightFloatingButton)[_enableHighlightFloatingButton]) {\n    _classPrivateFieldLooseBase(this, _displayHighlightToolbar)[_displayHighlightToolbar]();\n  }\n}\nfunction _addSelectionListener2() {\n  document.addEventListener(\"selectionchange\", _classPrivateFieldLooseBase(this, _selectionChange)[_selectionChange].bind(this), {\n    signal: this._signal\n  });\n}\nfunction _addFocusManager2() {\n  if (_classPrivateFieldLooseBase(this, _focusManagerAC)[_focusManagerAC]) {\n    return;\n  }\n  _classPrivateFieldLooseBase(this, _focusManagerAC)[_focusManagerAC] = new AbortController();\n  const signal = this.combinedSignal(_classPrivateFieldLooseBase(this, _focusManagerAC)[_focusManagerAC]);\n  window.addEventListener(\"focus\", this.focus.bind(this), {\n    signal\n  });\n  window.addEventListener(\"blur\", this.blur.bind(this), {\n    signal\n  });\n}\nfunction _removeFocusManager2() {\n  var _classPrivateFieldLoo130;\n  (_classPrivateFieldLoo130 = _classPrivateFieldLooseBase(this, _focusManagerAC)[_focusManagerAC]) === null || _classPrivateFieldLoo130 === void 0 ? void 0 : _classPrivateFieldLoo130.abort();\n  _classPrivateFieldLooseBase(this, _focusManagerAC)[_focusManagerAC] = null;\n}\nfunction _addKeyboardManager2() {\n  if (_classPrivateFieldLooseBase(this, _keyboardManagerAC)[_keyboardManagerAC]) {\n    return;\n  }\n  _classPrivateFieldLooseBase(this, _keyboardManagerAC)[_keyboardManagerAC] = new AbortController();\n  const signal = this.combinedSignal(_classPrivateFieldLooseBase(this, _keyboardManagerAC)[_keyboardManagerAC]);\n  window.addEventListener(\"keydown\", this.keydown.bind(this), {\n    signal\n  });\n  window.addEventListener(\"keyup\", this.keyup.bind(this), {\n    signal\n  });\n}\nfunction _removeKeyboardManager2() {\n  var _classPrivateFieldLoo131;\n  (_classPrivateFieldLoo131 = _classPrivateFieldLooseBase(this, _keyboardManagerAC)[_keyboardManagerAC]) === null || _classPrivateFieldLoo131 === void 0 ? void 0 : _classPrivateFieldLoo131.abort();\n  _classPrivateFieldLooseBase(this, _keyboardManagerAC)[_keyboardManagerAC] = null;\n}\nfunction _addCopyPasteListeners2() {\n  if (_classPrivateFieldLooseBase(this, _copyPasteAC)[_copyPasteAC]) {\n    return;\n  }\n  _classPrivateFieldLooseBase(this, _copyPasteAC)[_copyPasteAC] = new AbortController();\n  const signal = this.combinedSignal(_classPrivateFieldLooseBase(this, _copyPasteAC)[_copyPasteAC]);\n  document.addEventListener(\"copy\", this.copy.bind(this), {\n    signal\n  });\n  document.addEventListener(\"cut\", this.cut.bind(this), {\n    signal\n  });\n  document.addEventListener(\"paste\", this.paste.bind(this), {\n    signal\n  });\n}\nfunction _removeCopyPasteListeners2() {\n  var _classPrivateFieldLoo132;\n  (_classPrivateFieldLoo132 = _classPrivateFieldLooseBase(this, _copyPasteAC)[_copyPasteAC]) === null || _classPrivateFieldLoo132 === void 0 ? void 0 : _classPrivateFieldLoo132.abort();\n  _classPrivateFieldLooseBase(this, _copyPasteAC)[_copyPasteAC] = null;\n}\nfunction _addDragAndDropListeners2() {\n  const signal = this._signal;\n  document.addEventListener(\"dragover\", this.dragOver.bind(this), {\n    signal\n  });\n  document.addEventListener(\"drop\", this.drop.bind(this), {\n    signal\n  });\n}\nfunction _dispatchUpdateStates2(details) {\n  const hasChanged = Object.entries(details).some(_ref159 => {\n    let _ref160 = _slicedToArray(_ref159, 2),\n      key = _ref160[0],\n      value = _ref160[1];\n    return _classPrivateFieldLooseBase(this, _previousStates)[_previousStates][key] !== value;\n  });\n  if (hasChanged) {\n    this._eventBus.dispatch(\"annotationeditorstateschanged\", {\n      source: this,\n      details: Object.assign(_classPrivateFieldLooseBase(this, _previousStates)[_previousStates], details)\n    });\n    if (_classPrivateFieldLooseBase(this, _mode)[_mode] === AnnotationEditorType.HIGHLIGHT && details.hasSelectedEditor === false) {\n      _classPrivateFieldLooseBase(this, _dispatchUpdateUI)[_dispatchUpdateUI]([[AnnotationEditorParamsType.HIGHLIGHT_FREE, true]]);\n    }\n  }\n}\nfunction _dispatchUpdateUI2(details) {\n  this._eventBus.dispatch(\"annotationeditorparamschanged\", {\n    source: this,\n    details\n  });\n}\nasync function _enableAll2() {\n  if (!_classPrivateFieldLooseBase(this, _isEnabled)[_isEnabled]) {\n    _classPrivateFieldLooseBase(this, _isEnabled)[_isEnabled] = true;\n    const promises = [];\n    for (const layer of _classPrivateFieldLooseBase(this, _allLayers)[_allLayers].values()) {\n      promises.push(layer.enable());\n    }\n    await Promise.all(promises);\n    for (const editor of _classPrivateFieldLooseBase(this, _allEditors)[_allEditors].values()) {\n      editor.enable();\n    }\n  }\n}\nfunction _disableAll2() {\n  this.unselectAll();\n  if (_classPrivateFieldLooseBase(this, _isEnabled)[_isEnabled]) {\n    _classPrivateFieldLooseBase(this, _isEnabled)[_isEnabled] = false;\n    for (const layer of _classPrivateFieldLooseBase(this, _allLayers)[_allLayers].values()) {\n      layer.disable();\n    }\n    for (const editor of _classPrivateFieldLooseBase(this, _allEditors)[_allEditors].values()) {\n      editor.disable();\n    }\n  }\n}\nfunction _addEditorToLayer2(editor) {\n  const layer = _classPrivateFieldLooseBase(this, _allLayers)[_allLayers].get(editor.pageIndex);\n  if (layer) {\n    layer.addOrRebuild(editor);\n  } else {\n    this.addEditor(editor);\n    this.addToAnnotationStorage(editor);\n  }\n}\nfunction _get_lastSelectedEditor() {\n  let ed = null;\n  for (ed of _classPrivateFieldLooseBase(this, _selectedEditors)[_selectedEditors]) {}\n  return ed;\n}\nfunction _isEmpty2() {\n  if (_classPrivateFieldLooseBase(this, _allEditors)[_allEditors].size === 0) {\n    return true;\n  }\n  if (_classPrivateFieldLooseBase(this, _allEditors)[_allEditors].size === 1) {\n    for (const editor of _classPrivateFieldLooseBase(this, _allEditors)[_allEditors].values()) {\n      return editor.isEmpty();\n    }\n  }\n  return false;\n}\nfunction _selectEditors2(editors) {\n  for (const editor of _classPrivateFieldLooseBase(this, _selectedEditors)[_selectedEditors]) {\n    editor.unselect();\n  }\n  _classPrivateFieldLooseBase(this, _selectedEditors)[_selectedEditors].clear();\n  for (const editor of editors) {\n    if (editor.isEmpty()) {\n      continue;\n    }\n    _classPrivateFieldLooseBase(this, _selectedEditors)[_selectedEditors].add(editor);\n    editor.select();\n  }\n  _classPrivateFieldLooseBase(this, _dispatchUpdateStates)[_dispatchUpdateStates]({\n    hasSelectedEditor: this.hasSelection\n  });\n}\nAnnotationEditorUIManager.TRANSLATE_SMALL = 1;\nAnnotationEditorUIManager.TRANSLATE_BIG = 10;\n; // ./src/display/editor/alt_text.js\nvar _altText2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"altText\");\nvar _altTextDecorative = /*#__PURE__*/_classPrivateFieldLooseKey(\"altTextDecorative\");\nvar _altTextButton = /*#__PURE__*/_classPrivateFieldLooseKey(\"altTextButton\");\nvar _altTextButtonLabel = /*#__PURE__*/_classPrivateFieldLooseKey(\"altTextButtonLabel\");\nvar _altTextTooltip = /*#__PURE__*/_classPrivateFieldLooseKey(\"altTextTooltip\");\nvar _altTextTooltipTimeout = /*#__PURE__*/_classPrivateFieldLooseKey(\"altTextTooltipTimeout\");\nvar _altTextWasFromKeyBoard = /*#__PURE__*/_classPrivateFieldLooseKey(\"altTextWasFromKeyBoard\");\nvar _badge = /*#__PURE__*/_classPrivateFieldLooseKey(\"badge\");\nvar _editor2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"editor\");\nvar _guessedText = /*#__PURE__*/_classPrivateFieldLooseKey(\"guessedText\");\nvar _textWithDisclaimer = /*#__PURE__*/_classPrivateFieldLooseKey(\"textWithDisclaimer\");\nvar _useNewAltTextFlow = /*#__PURE__*/_classPrivateFieldLooseKey(\"useNewAltTextFlow\");\nvar _l10nNewButton = /*#__PURE__*/_classPrivateFieldLooseKey(\"l10nNewButton\");\nvar _label = /*#__PURE__*/_classPrivateFieldLooseKey(\"label\");\nvar _setState = /*#__PURE__*/_classPrivateFieldLooseKey(\"setState\");\nclass AltText {\n  constructor(editor) {\n    var _classPrivateFieldLoo30;\n    Object.defineProperty(this, _setState, {\n      value: _setState2\n    });\n    Object.defineProperty(this, _label, {\n      get: _get_label,\n      set: void 0\n    });\n    Object.defineProperty(this, _altText2, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _altTextDecorative, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _altTextButton, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _altTextButtonLabel, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _altTextTooltip, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _altTextTooltipTimeout, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _altTextWasFromKeyBoard, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _badge, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _editor2, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _guessedText, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _textWithDisclaimer, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _useNewAltTextFlow, {\n      writable: true,\n      value: false\n    });\n    _classPrivateFieldLooseBase(this, _editor2)[_editor2] = editor;\n    _classPrivateFieldLooseBase(this, _useNewAltTextFlow)[_useNewAltTextFlow] = editor._uiManager.useNewAltTextFlow;\n    (_classPrivateFieldLoo30 = _classPrivateFieldLooseBase(AltText, _l10nNewButton))[_l10nNewButton] || (_classPrivateFieldLoo30[_l10nNewButton] = Object.freeze({\n      added: \"pdfjs-editor-new-alt-text-added-button\",\n      \"added-label\": \"pdfjs-editor-new-alt-text-added-button-label\",\n      missing: \"pdfjs-editor-new-alt-text-missing-button\",\n      \"missing-label\": \"pdfjs-editor-new-alt-text-missing-button-label\",\n      review: \"pdfjs-editor-new-alt-text-to-review-button\",\n      \"review-label\": \"pdfjs-editor-new-alt-text-to-review-button-label\"\n    }));\n  }\n  static initialize(l10n) {\n    var _AltText$_l10n;\n    (_AltText$_l10n = AltText._l10n) !== null && _AltText$_l10n !== void 0 ? _AltText$_l10n : AltText._l10n = l10n;\n  }\n  async render() {\n    const altText = _classPrivateFieldLooseBase(this, _altTextButton)[_altTextButton] = document.createElement(\"button\");\n    altText.className = \"altText\";\n    altText.tabIndex = \"0\";\n    const label = _classPrivateFieldLooseBase(this, _altTextButtonLabel)[_altTextButtonLabel] = document.createElement(\"span\");\n    altText.append(label);\n    if (_classPrivateFieldLooseBase(this, _useNewAltTextFlow)[_useNewAltTextFlow]) {\n      altText.classList.add(\"new\");\n      altText.setAttribute(\"data-l10n-id\", _classPrivateFieldLooseBase(AltText, _l10nNewButton)[_l10nNewButton].missing);\n      label.setAttribute(\"data-l10n-id\", _classPrivateFieldLooseBase(AltText, _l10nNewButton)[_l10nNewButton][\"missing-label\"]);\n    } else {\n      altText.setAttribute(\"data-l10n-id\", \"pdfjs-editor-alt-text-button\");\n      label.setAttribute(\"data-l10n-id\", \"pdfjs-editor-alt-text-button-label\");\n    }\n    const signal = _classPrivateFieldLooseBase(this, _editor2)[_editor2]._uiManager._signal;\n    altText.addEventListener(\"contextmenu\", noContextMenu, {\n      signal\n    });\n    altText.addEventListener(\"pointerdown\", event => event.stopPropagation(), {\n      signal\n    });\n    const onClick = event => {\n      event.preventDefault();\n      _classPrivateFieldLooseBase(this, _editor2)[_editor2]._uiManager.editAltText(_classPrivateFieldLooseBase(this, _editor2)[_editor2]);\n      if (_classPrivateFieldLooseBase(this, _useNewAltTextFlow)[_useNewAltTextFlow]) {\n        _classPrivateFieldLooseBase(this, _editor2)[_editor2]._reportTelemetry({\n          action: \"pdfjs.image.alt_text.image_status_label_clicked\",\n          data: {\n            label: _classPrivateFieldLooseBase(this, _label)[_label]\n          }\n        });\n      }\n    };\n    altText.addEventListener(\"click\", onClick, {\n      capture: true,\n      signal\n    });\n    altText.addEventListener(\"keydown\", event => {\n      if (event.target === altText && event.key === \"Enter\") {\n        _classPrivateFieldLooseBase(this, _altTextWasFromKeyBoard)[_altTextWasFromKeyBoard] = true;\n        onClick(event);\n      }\n    }, {\n      signal\n    });\n    await _classPrivateFieldLooseBase(this, _setState)[_setState]();\n    return altText;\n  }\n  finish() {\n    if (!_classPrivateFieldLooseBase(this, _altTextButton)[_altTextButton]) {\n      return;\n    }\n    _classPrivateFieldLooseBase(this, _altTextButton)[_altTextButton].focus({\n      focusVisible: _classPrivateFieldLooseBase(this, _altTextWasFromKeyBoard)[_altTextWasFromKeyBoard]\n    });\n    _classPrivateFieldLooseBase(this, _altTextWasFromKeyBoard)[_altTextWasFromKeyBoard] = false;\n  }\n  isEmpty() {\n    if (_classPrivateFieldLooseBase(this, _useNewAltTextFlow)[_useNewAltTextFlow]) {\n      return _classPrivateFieldLooseBase(this, _altText2)[_altText2] === null;\n    }\n    return !_classPrivateFieldLooseBase(this, _altText2)[_altText2] && !_classPrivateFieldLooseBase(this, _altTextDecorative)[_altTextDecorative];\n  }\n  hasData() {\n    if (_classPrivateFieldLooseBase(this, _useNewAltTextFlow)[_useNewAltTextFlow]) {\n      return _classPrivateFieldLooseBase(this, _altText2)[_altText2] !== null || !!_classPrivateFieldLooseBase(this, _guessedText)[_guessedText];\n    }\n    return this.isEmpty();\n  }\n  get guessedText() {\n    return _classPrivateFieldLooseBase(this, _guessedText)[_guessedText];\n  }\n  async setGuessedText(guessedText) {\n    if (_classPrivateFieldLooseBase(this, _altText2)[_altText2] !== null) {\n      return;\n    }\n    _classPrivateFieldLooseBase(this, _guessedText)[_guessedText] = guessedText;\n    _classPrivateFieldLooseBase(this, _textWithDisclaimer)[_textWithDisclaimer] = await AltText._l10n.get(\"pdfjs-editor-new-alt-text-generated-alt-text-with-disclaimer\", {\n      generatedAltText: guessedText\n    });\n    _classPrivateFieldLooseBase(this, _setState)[_setState]();\n  }\n  toggleAltTextBadge() {\n    let visibility = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (!_classPrivateFieldLooseBase(this, _useNewAltTextFlow)[_useNewAltTextFlow] || _classPrivateFieldLooseBase(this, _altText2)[_altText2]) {\n      var _classPrivateFieldLoo31;\n      (_classPrivateFieldLoo31 = _classPrivateFieldLooseBase(this, _badge)[_badge]) === null || _classPrivateFieldLoo31 === void 0 ? void 0 : _classPrivateFieldLoo31.remove();\n      _classPrivateFieldLooseBase(this, _badge)[_badge] = null;\n      return;\n    }\n    if (!_classPrivateFieldLooseBase(this, _badge)[_badge]) {\n      const badge = _classPrivateFieldLooseBase(this, _badge)[_badge] = document.createElement(\"div\");\n      badge.className = \"noAltTextBadge\";\n      _classPrivateFieldLooseBase(this, _editor2)[_editor2].div.append(badge);\n    }\n    _classPrivateFieldLooseBase(this, _badge)[_badge].classList.toggle(\"hidden\", !visibility);\n  }\n  serialize(isForCopying) {\n    let altText = _classPrivateFieldLooseBase(this, _altText2)[_altText2];\n    if (!isForCopying && _classPrivateFieldLooseBase(this, _guessedText)[_guessedText] === altText) {\n      altText = _classPrivateFieldLooseBase(this, _textWithDisclaimer)[_textWithDisclaimer];\n    }\n    return {\n      altText,\n      decorative: _classPrivateFieldLooseBase(this, _altTextDecorative)[_altTextDecorative],\n      guessedText: _classPrivateFieldLooseBase(this, _guessedText)[_guessedText],\n      textWithDisclaimer: _classPrivateFieldLooseBase(this, _textWithDisclaimer)[_textWithDisclaimer]\n    };\n  }\n  get data() {\n    return {\n      altText: _classPrivateFieldLooseBase(this, _altText2)[_altText2],\n      decorative: _classPrivateFieldLooseBase(this, _altTextDecorative)[_altTextDecorative]\n    };\n  }\n  set data(_ref30) {\n    let altText = _ref30.altText,\n      decorative = _ref30.decorative,\n      guessedText = _ref30.guessedText,\n      textWithDisclaimer = _ref30.textWithDisclaimer,\n      _ref30$cancel = _ref30.cancel,\n      cancel = _ref30$cancel === void 0 ? false : _ref30$cancel;\n    if (guessedText) {\n      _classPrivateFieldLooseBase(this, _guessedText)[_guessedText] = guessedText;\n      _classPrivateFieldLooseBase(this, _textWithDisclaimer)[_textWithDisclaimer] = textWithDisclaimer;\n    }\n    if (_classPrivateFieldLooseBase(this, _altText2)[_altText2] === altText && _classPrivateFieldLooseBase(this, _altTextDecorative)[_altTextDecorative] === decorative) {\n      return;\n    }\n    if (!cancel) {\n      _classPrivateFieldLooseBase(this, _altText2)[_altText2] = altText;\n      _classPrivateFieldLooseBase(this, _altTextDecorative)[_altTextDecorative] = decorative;\n    }\n    _classPrivateFieldLooseBase(this, _setState)[_setState]();\n  }\n  toggle() {\n    let enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (!_classPrivateFieldLooseBase(this, _altTextButton)[_altTextButton]) {\n      return;\n    }\n    if (!enabled && _classPrivateFieldLooseBase(this, _altTextTooltipTimeout)[_altTextTooltipTimeout]) {\n      clearTimeout(_classPrivateFieldLooseBase(this, _altTextTooltipTimeout)[_altTextTooltipTimeout]);\n      _classPrivateFieldLooseBase(this, _altTextTooltipTimeout)[_altTextTooltipTimeout] = null;\n    }\n    _classPrivateFieldLooseBase(this, _altTextButton)[_altTextButton].disabled = !enabled;\n  }\n  shown() {\n    _classPrivateFieldLooseBase(this, _editor2)[_editor2]._reportTelemetry({\n      action: \"pdfjs.image.alt_text.image_status_label_displayed\",\n      data: {\n        label: _classPrivateFieldLooseBase(this, _label)[_label]\n      }\n    });\n  }\n  destroy() {\n    var _classPrivateFieldLoo32, _classPrivateFieldLoo33;\n    (_classPrivateFieldLoo32 = _classPrivateFieldLooseBase(this, _altTextButton)[_altTextButton]) === null || _classPrivateFieldLoo32 === void 0 ? void 0 : _classPrivateFieldLoo32.remove();\n    _classPrivateFieldLooseBase(this, _altTextButton)[_altTextButton] = null;\n    _classPrivateFieldLooseBase(this, _altTextButtonLabel)[_altTextButtonLabel] = null;\n    _classPrivateFieldLooseBase(this, _altTextTooltip)[_altTextTooltip] = null;\n    (_classPrivateFieldLoo33 = _classPrivateFieldLooseBase(this, _badge)[_badge]) === null || _classPrivateFieldLoo33 === void 0 ? void 0 : _classPrivateFieldLoo33.remove();\n    _classPrivateFieldLooseBase(this, _badge)[_badge] = null;\n  }\n}\n_AltText = AltText;\nfunction _get_label() {\n  return _classPrivateFieldLooseBase(this, _altText2)[_altText2] && \"added\" || _classPrivateFieldLooseBase(this, _altText2)[_altText2] === null && this.guessedText && \"review\" || \"missing\";\n}\nasync function _setState2() {\n  const button = _classPrivateFieldLooseBase(this, _altTextButton)[_altTextButton];\n  if (!button) {\n    return;\n  }\n  if (_classPrivateFieldLooseBase(this, _useNewAltTextFlow)[_useNewAltTextFlow]) {\n    var _classPrivateFieldLoo133;\n    button.classList.toggle(\"done\", !!_classPrivateFieldLooseBase(this, _altText2)[_altText2]);\n    button.setAttribute(\"data-l10n-id\", _classPrivateFieldLooseBase(_AltText, _l10nNewButton)[_l10nNewButton][_classPrivateFieldLooseBase(this, _label)[_label]]);\n    (_classPrivateFieldLoo133 = _classPrivateFieldLooseBase(this, _altTextButtonLabel)[_altTextButtonLabel]) === null || _classPrivateFieldLoo133 === void 0 ? void 0 : _classPrivateFieldLoo133.setAttribute(\"data-l10n-id\", _classPrivateFieldLooseBase(_AltText, _l10nNewButton)[_l10nNewButton][`${_classPrivateFieldLooseBase(this, _label)[_label]}-label`]);\n    if (!_classPrivateFieldLooseBase(this, _altText2)[_altText2]) {\n      var _classPrivateFieldLoo134;\n      (_classPrivateFieldLoo134 = _classPrivateFieldLooseBase(this, _altTextTooltip)[_altTextTooltip]) === null || _classPrivateFieldLoo134 === void 0 ? void 0 : _classPrivateFieldLoo134.remove();\n      return;\n    }\n  } else {\n    if (!_classPrivateFieldLooseBase(this, _altText2)[_altText2] && !_classPrivateFieldLooseBase(this, _altTextDecorative)[_altTextDecorative]) {\n      var _classPrivateFieldLoo135;\n      button.classList.remove(\"done\");\n      (_classPrivateFieldLoo135 = _classPrivateFieldLooseBase(this, _altTextTooltip)[_altTextTooltip]) === null || _classPrivateFieldLoo135 === void 0 ? void 0 : _classPrivateFieldLoo135.remove();\n      return;\n    }\n    button.classList.add(\"done\");\n    button.setAttribute(\"data-l10n-id\", \"pdfjs-editor-alt-text-edit-button\");\n  }\n  let tooltip = _classPrivateFieldLooseBase(this, _altTextTooltip)[_altTextTooltip];\n  if (!tooltip) {\n    _classPrivateFieldLooseBase(this, _altTextTooltip)[_altTextTooltip] = tooltip = document.createElement(\"span\");\n    tooltip.className = \"tooltip\";\n    tooltip.setAttribute(\"role\", \"tooltip\");\n    tooltip.id = `alt-text-tooltip-${_classPrivateFieldLooseBase(this, _editor2)[_editor2].id}`;\n    const DELAY_TO_SHOW_TOOLTIP = 100;\n    const signal = _classPrivateFieldLooseBase(this, _editor2)[_editor2]._uiManager._signal;\n    signal.addEventListener(\"abort\", () => {\n      clearTimeout(_classPrivateFieldLooseBase(this, _altTextTooltipTimeout)[_altTextTooltipTimeout]);\n      _classPrivateFieldLooseBase(this, _altTextTooltipTimeout)[_altTextTooltipTimeout] = null;\n    }, {\n      once: true\n    });\n    button.addEventListener(\"mouseenter\", () => {\n      _classPrivateFieldLooseBase(this, _altTextTooltipTimeout)[_altTextTooltipTimeout] = setTimeout(() => {\n        _classPrivateFieldLooseBase(this, _altTextTooltipTimeout)[_altTextTooltipTimeout] = null;\n        _classPrivateFieldLooseBase(this, _altTextTooltip)[_altTextTooltip].classList.add(\"show\");\n        _classPrivateFieldLooseBase(this, _editor2)[_editor2]._reportTelemetry({\n          action: \"alt_text_tooltip\"\n        });\n      }, DELAY_TO_SHOW_TOOLTIP);\n    }, {\n      signal\n    });\n    button.addEventListener(\"mouseleave\", () => {\n      var _classPrivateFieldLoo136;\n      if (_classPrivateFieldLooseBase(this, _altTextTooltipTimeout)[_altTextTooltipTimeout]) {\n        clearTimeout(_classPrivateFieldLooseBase(this, _altTextTooltipTimeout)[_altTextTooltipTimeout]);\n        _classPrivateFieldLooseBase(this, _altTextTooltipTimeout)[_altTextTooltipTimeout] = null;\n      }\n      (_classPrivateFieldLoo136 = _classPrivateFieldLooseBase(this, _altTextTooltip)[_altTextTooltip]) === null || _classPrivateFieldLoo136 === void 0 ? void 0 : _classPrivateFieldLoo136.classList.remove(\"show\");\n    }, {\n      signal\n    });\n  }\n  if (_classPrivateFieldLooseBase(this, _altTextDecorative)[_altTextDecorative]) {\n    tooltip.setAttribute(\"data-l10n-id\", \"pdfjs-editor-alt-text-decorative-tooltip\");\n  } else {\n    tooltip.removeAttribute(\"data-l10n-id\");\n    tooltip.textContent = _classPrivateFieldLooseBase(this, _altText2)[_altText2];\n  }\n  if (!tooltip.parentNode) {\n    button.append(tooltip);\n  }\n  const element = _classPrivateFieldLooseBase(this, _editor2)[_editor2].getImageForAltText();\n  element === null || element === void 0 ? void 0 : element.setAttribute(\"aria-describedby\", tooltip.id);\n}\nObject.defineProperty(AltText, _l10nNewButton, {\n  writable: true,\n  value: null\n});\nAltText._l10n = null;\n; // ./src/display/editor/editor.js\nvar _accessibilityData = /*#__PURE__*/_classPrivateFieldLooseKey(\"accessibilityData\");\nvar _allResizerDivs = /*#__PURE__*/_classPrivateFieldLooseKey(\"allResizerDivs\");\nvar _altText3 = /*#__PURE__*/_classPrivateFieldLooseKey(\"altText\");\nvar _disabled = /*#__PURE__*/_classPrivateFieldLooseKey(\"disabled\");\nvar _keepAspectRatio = /*#__PURE__*/_classPrivateFieldLooseKey(\"keepAspectRatio\");\nvar _resizersDiv = /*#__PURE__*/_classPrivateFieldLooseKey(\"resizersDiv\");\nvar _savedDimensions = /*#__PURE__*/_classPrivateFieldLooseKey(\"savedDimensions\");\nvar _focusAC = /*#__PURE__*/_classPrivateFieldLooseKey(\"focusAC\");\nvar _focusedResizerName = /*#__PURE__*/_classPrivateFieldLooseKey(\"focusedResizerName\");\nvar _hasBeenClicked = /*#__PURE__*/_classPrivateFieldLooseKey(\"hasBeenClicked\");\nvar _initialPosition = /*#__PURE__*/_classPrivateFieldLooseKey(\"initialPosition\");\nvar _isEditing = /*#__PURE__*/_classPrivateFieldLooseKey(\"isEditing\");\nvar _isInEditMode = /*#__PURE__*/_classPrivateFieldLooseKey(\"isInEditMode\");\nvar _isResizerEnabledForKeyboard = /*#__PURE__*/_classPrivateFieldLooseKey(\"isResizerEnabledForKeyboard\");\nvar _moveInDOMTimeout = /*#__PURE__*/_classPrivateFieldLooseKey(\"moveInDOMTimeout\");\nvar _prevDragX = /*#__PURE__*/_classPrivateFieldLooseKey(\"prevDragX\");\nvar _prevDragY = /*#__PURE__*/_classPrivateFieldLooseKey(\"prevDragY\");\nvar _telemetryTimeouts = /*#__PURE__*/_classPrivateFieldLooseKey(\"telemetryTimeouts\");\nvar _isDraggable = /*#__PURE__*/_classPrivateFieldLooseKey(\"isDraggable\");\nvar _zIndex = /*#__PURE__*/_classPrivateFieldLooseKey(\"zIndex\");\nvar _translate = /*#__PURE__*/_classPrivateFieldLooseKey(\"translate\");\nvar _rotatePoint = /*#__PURE__*/_classPrivateFieldLooseKey(\"rotatePoint\");\nvar _getRotationMatrix = /*#__PURE__*/_classPrivateFieldLooseKey(\"getRotationMatrix\");\nvar _createResizers = /*#__PURE__*/_classPrivateFieldLooseKey(\"createResizers\");\nvar _resizerPointerdown = /*#__PURE__*/_classPrivateFieldLooseKey(\"resizerPointerdown\");\nvar _addResizeToUndoStack = /*#__PURE__*/_classPrivateFieldLooseKey(\"addResizeToUndoStack\");\nvar _resizerPointermove = /*#__PURE__*/_classPrivateFieldLooseKey(\"resizerPointermove\");\nvar _selectOnPointerEvent = /*#__PURE__*/_classPrivateFieldLooseKey(\"selectOnPointerEvent\");\nvar _setUpDragSession = /*#__PURE__*/_classPrivateFieldLooseKey(\"setUpDragSession\");\nvar _addFocusListeners = /*#__PURE__*/_classPrivateFieldLooseKey(\"addFocusListeners\");\nvar _resizerKeydown = /*#__PURE__*/_classPrivateFieldLooseKey(\"resizerKeydown\");\nvar _resizerBlur = /*#__PURE__*/_classPrivateFieldLooseKey(\"resizerBlur\");\nvar _resizerFocus = /*#__PURE__*/_classPrivateFieldLooseKey(\"resizerFocus\");\nvar _setResizerTabIndex = /*#__PURE__*/_classPrivateFieldLooseKey(\"setResizerTabIndex\");\nvar _stopResizing = /*#__PURE__*/_classPrivateFieldLooseKey(\"stopResizing\");\nclass AnnotationEditor {\n  static get _resizerKeyboardManager() {\n    const resize = AnnotationEditor.prototype._resizeWithKeyboard;\n    const small = AnnotationEditorUIManager.TRANSLATE_SMALL;\n    const big = AnnotationEditorUIManager.TRANSLATE_BIG;\n    return shadow(this, \"_resizerKeyboardManager\", new KeyboardManager([[[\"ArrowLeft\", \"mac+ArrowLeft\"], resize, {\n      args: [-small, 0]\n    }], [[\"ctrl+ArrowLeft\", \"mac+shift+ArrowLeft\"], resize, {\n      args: [-big, 0]\n    }], [[\"ArrowRight\", \"mac+ArrowRight\"], resize, {\n      args: [small, 0]\n    }], [[\"ctrl+ArrowRight\", \"mac+shift+ArrowRight\"], resize, {\n      args: [big, 0]\n    }], [[\"ArrowUp\", \"mac+ArrowUp\"], resize, {\n      args: [0, -small]\n    }], [[\"ctrl+ArrowUp\", \"mac+shift+ArrowUp\"], resize, {\n      args: [0, -big]\n    }], [[\"ArrowDown\", \"mac+ArrowDown\"], resize, {\n      args: [0, small]\n    }], [[\"ctrl+ArrowDown\", \"mac+shift+ArrowDown\"], resize, {\n      args: [0, big]\n    }], [[\"Escape\", \"mac+Escape\"], AnnotationEditor.prototype._stopResizingWithKeyboard]]));\n  }\n  constructor(parameters) {\n    Object.defineProperty(this, _stopResizing, {\n      value: _stopResizing2\n    });\n    Object.defineProperty(this, _setResizerTabIndex, {\n      value: _setResizerTabIndex2\n    });\n    Object.defineProperty(this, _resizerFocus, {\n      value: _resizerFocus2\n    });\n    Object.defineProperty(this, _resizerBlur, {\n      value: _resizerBlur2\n    });\n    Object.defineProperty(this, _resizerKeydown, {\n      value: _resizerKeydown2\n    });\n    Object.defineProperty(this, _addFocusListeners, {\n      value: _addFocusListeners2\n    });\n    Object.defineProperty(this, _setUpDragSession, {\n      value: _setUpDragSession2\n    });\n    Object.defineProperty(this, _selectOnPointerEvent, {\n      value: _selectOnPointerEvent2\n    });\n    Object.defineProperty(this, _resizerPointermove, {\n      value: _resizerPointermove2\n    });\n    Object.defineProperty(this, _addResizeToUndoStack, {\n      value: _addResizeToUndoStack2\n    });\n    Object.defineProperty(this, _resizerPointerdown, {\n      value: _resizerPointerdown2\n    });\n    Object.defineProperty(this, _createResizers, {\n      value: _createResizers2\n    });\n    Object.defineProperty(this, _getRotationMatrix, {\n      value: _getRotationMatrix2\n    });\n    Object.defineProperty(this, _translate, {\n      value: _translate2\n    });\n    Object.defineProperty(this, _accessibilityData, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _allResizerDivs, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _altText3, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _disabled, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _keepAspectRatio, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _resizersDiv, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _savedDimensions, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _focusAC, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _focusedResizerName, {\n      writable: true,\n      value: \"\"\n    });\n    Object.defineProperty(this, _hasBeenClicked, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _initialPosition, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _isEditing, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _isInEditMode, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _isResizerEnabledForKeyboard, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _moveInDOMTimeout, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _prevDragX, {\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, _prevDragY, {\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, _telemetryTimeouts, {\n      writable: true,\n      value: null\n    });\n    this._editToolbar = null;\n    this._initialOptions = Object.create(null);\n    this._initialData = null;\n    this._isVisible = true;\n    this._uiManager = null;\n    this._focusEventsAllowed = true;\n    Object.defineProperty(this, _isDraggable, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _zIndex, {\n      writable: true,\n      value: AnnotationEditor._zIndex++\n    });\n    this.parent = parameters.parent;\n    this.id = parameters.id;\n    this.width = this.height = null;\n    this.pageIndex = parameters.parent.pageIndex;\n    this.name = parameters.name;\n    this.div = null;\n    this._uiManager = parameters.uiManager;\n    this.annotationElementId = null;\n    this._willKeepAspectRatio = false;\n    this._initialOptions.isCentered = parameters.isCentered;\n    this._structTreeParentId = null;\n    const _this$parent$viewport = this.parent.viewport,\n      _rotation2 = _this$parent$viewport.rotation,\n      _this$parent$viewport2 = _this$parent$viewport.rawDims,\n      _pageWidth = _this$parent$viewport2.pageWidth,\n      _pageHeight = _this$parent$viewport2.pageHeight,\n      pageX = _this$parent$viewport2.pageX,\n      pageY = _this$parent$viewport2.pageY;\n    this.rotation = _rotation2;\n    this.pageRotation = (360 + _rotation2 - this._uiManager.viewParameters.rotation) % 360;\n    this.pageDimensions = [_pageWidth, _pageHeight];\n    this.pageTranslation = [pageX, pageY];\n    const _this$parentDimension = _slicedToArray(this.parentDimensions, 2),\n      _width = _this$parentDimension[0],\n      _height = _this$parentDimension[1];\n    this.x = parameters.x / _width;\n    this.y = parameters.y / _height;\n    this.isAttachedToDOM = false;\n    this.deleted = false;\n  }\n  get editorType() {\n    return Object.getPrototypeOf(this).constructor._type;\n  }\n  static get _defaultLineColor() {\n    return shadow(this, \"_defaultLineColor\", this._colorManager.getHexCode(\"CanvasText\"));\n  }\n  static deleteAnnotationElement(editor) {\n    const fakeEditor = new FakeEditor({\n      id: editor.parent.getNextId(),\n      parent: editor.parent,\n      uiManager: editor._uiManager\n    });\n    fakeEditor.annotationElementId = editor.annotationElementId;\n    fakeEditor.deleted = true;\n    fakeEditor._uiManager.addToAnnotationStorage(fakeEditor);\n  }\n  static initialize(l10n, _uiManager) {\n    var _AnnotationEditor$_l;\n    (_AnnotationEditor$_l = AnnotationEditor._l10n) !== null && _AnnotationEditor$_l !== void 0 ? _AnnotationEditor$_l : AnnotationEditor._l10n = l10n;\n    AnnotationEditor._l10nResizer || (AnnotationEditor._l10nResizer = Object.freeze({\n      topLeft: \"pdfjs-editor-resizer-top-left\",\n      topMiddle: \"pdfjs-editor-resizer-top-middle\",\n      topRight: \"pdfjs-editor-resizer-top-right\",\n      middleRight: \"pdfjs-editor-resizer-middle-right\",\n      bottomRight: \"pdfjs-editor-resizer-bottom-right\",\n      bottomMiddle: \"pdfjs-editor-resizer-bottom-middle\",\n      bottomLeft: \"pdfjs-editor-resizer-bottom-left\",\n      middleLeft: \"pdfjs-editor-resizer-middle-left\"\n    }));\n    if (AnnotationEditor._borderLineWidth !== -1) {\n      return;\n    }\n    const style = getComputedStyle(document.documentElement);\n    AnnotationEditor._borderLineWidth = parseFloat(style.getPropertyValue(\"--outline-width\")) || 0;\n  }\n  static updateDefaultParams(_type, _value) {}\n  static get defaultPropertiesToUpdate() {\n    return [];\n  }\n  static isHandlingMimeForPasting(mime) {\n    return false;\n  }\n  static paste(item, parent) {\n    unreachable(\"Not implemented\");\n  }\n  get propertiesToUpdate() {\n    return [];\n  }\n  get _isDraggable() {\n    return _classPrivateFieldLooseBase(this, _isDraggable)[_isDraggable];\n  }\n  set _isDraggable(value) {\n    var _this$div;\n    _classPrivateFieldLooseBase(this, _isDraggable)[_isDraggable] = value;\n    (_this$div = this.div) === null || _this$div === void 0 ? void 0 : _this$div.classList.toggle(\"draggable\", value);\n  }\n  get isEnterHandled() {\n    return true;\n  }\n  center() {\n    const _this$pageDimensions = _slicedToArray(this.pageDimensions, 2),\n      pageWidth = _this$pageDimensions[0],\n      pageHeight = _this$pageDimensions[1];\n    switch (this.parentRotation) {\n      case 90:\n        this.x -= this.height * pageHeight / (pageWidth * 2);\n        this.y += this.width * pageWidth / (pageHeight * 2);\n        break;\n      case 180:\n        this.x += this.width / 2;\n        this.y += this.height / 2;\n        break;\n      case 270:\n        this.x += this.height * pageHeight / (pageWidth * 2);\n        this.y -= this.width * pageWidth / (pageHeight * 2);\n        break;\n      default:\n        this.x -= this.width / 2;\n        this.y -= this.height / 2;\n        break;\n    }\n    this.fixAndSetPosition();\n  }\n  addCommands(params) {\n    this._uiManager.addCommands(params);\n  }\n  get currentLayer() {\n    return this._uiManager.currentLayer;\n  }\n  setInBackground() {\n    this.div.style.zIndex = 0;\n  }\n  setInForeground() {\n    this.div.style.zIndex = _classPrivateFieldLooseBase(this, _zIndex)[_zIndex];\n  }\n  setParent(parent) {\n    if (parent !== null) {\n      this.pageIndex = parent.pageIndex;\n      this.pageDimensions = parent.pageDimensions;\n    } else {\n      _classPrivateFieldLooseBase(this, _stopResizing)[_stopResizing]();\n    }\n    this.parent = parent;\n  }\n  focusin(event) {\n    if (!this._focusEventsAllowed) {\n      return;\n    }\n    if (!_classPrivateFieldLooseBase(this, _hasBeenClicked)[_hasBeenClicked]) {\n      this.parent.setSelected(this);\n    } else {\n      _classPrivateFieldLooseBase(this, _hasBeenClicked)[_hasBeenClicked] = false;\n    }\n  }\n  focusout(event) {\n    var _this$parent;\n    if (!this._focusEventsAllowed) {\n      return;\n    }\n    if (!this.isAttachedToDOM) {\n      return;\n    }\n    const target = event.relatedTarget;\n    if (target !== null && target !== void 0 && target.closest(`#${this.id}`)) {\n      return;\n    }\n    event.preventDefault();\n    if (!((_this$parent = this.parent) !== null && _this$parent !== void 0 && _this$parent.isMultipleSelection)) {\n      this.commitOrRemove();\n    }\n  }\n  commitOrRemove() {\n    if (this.isEmpty()) {\n      this.remove();\n    } else {\n      this.commit();\n    }\n  }\n  commit() {\n    this.addToAnnotationStorage();\n  }\n  addToAnnotationStorage() {\n    this._uiManager.addToAnnotationStorage(this);\n  }\n  setAt(x, y, tx, ty) {\n    const _this$parentDimension2 = _slicedToArray(this.parentDimensions, 2),\n      width = _this$parentDimension2[0],\n      height = _this$parentDimension2[1];\n    var _this$screenToPageTra = this.screenToPageTranslation(tx, ty);\n    var _this$screenToPageTra2 = _slicedToArray(_this$screenToPageTra, 2);\n    tx = _this$screenToPageTra2[0];\n    ty = _this$screenToPageTra2[1];\n    this.x = (x + tx) / width;\n    this.y = (y + ty) / height;\n    this.fixAndSetPosition();\n  }\n  translate(x, y) {\n    _classPrivateFieldLooseBase(this, _translate)[_translate](this.parentDimensions, x, y);\n  }\n  translateInPage(x, y) {\n    var _classPrivateFieldLoo34;\n    (_classPrivateFieldLoo34 = _classPrivateFieldLooseBase(this, _initialPosition))[_initialPosition] || (_classPrivateFieldLoo34[_initialPosition] = [this.x, this.y]);\n    _classPrivateFieldLooseBase(this, _translate)[_translate](this.pageDimensions, x, y);\n    this.div.scrollIntoView({\n      block: \"nearest\"\n    });\n  }\n  drag(tx, ty) {\n    var _classPrivateFieldLoo35;\n    (_classPrivateFieldLoo35 = _classPrivateFieldLooseBase(this, _initialPosition))[_initialPosition] || (_classPrivateFieldLoo35[_initialPosition] = [this.x, this.y]);\n    const _this$parentDimension3 = _slicedToArray(this.parentDimensions, 2),\n      parentWidth = _this$parentDimension3[0],\n      parentHeight = _this$parentDimension3[1];\n    this.x += tx / parentWidth;\n    this.y += ty / parentHeight;\n    if (this.parent && (this.x < 0 || this.x > 1 || this.y < 0 || this.y > 1)) {\n      const _this$div$getBounding = this.div.getBoundingClientRect(),\n        x = _this$div$getBounding.x,\n        y = _this$div$getBounding.y;\n      if (this.parent.findNewParent(this, x, y)) {\n        this.x -= Math.floor(this.x);\n        this.y -= Math.floor(this.y);\n      }\n    }\n    let x = this.x,\n      y = this.y;\n    const _this$getBaseTranslat = this.getBaseTranslation(),\n      _this$getBaseTranslat2 = _slicedToArray(_this$getBaseTranslat, 2),\n      bx = _this$getBaseTranslat2[0],\n      by = _this$getBaseTranslat2[1];\n    x += bx;\n    y += by;\n    this.div.style.left = `${(100 * x).toFixed(2)}%`;\n    this.div.style.top = `${(100 * y).toFixed(2)}%`;\n    this.div.scrollIntoView({\n      block: \"nearest\"\n    });\n  }\n  get _hasBeenMoved() {\n    return !!_classPrivateFieldLooseBase(this, _initialPosition)[_initialPosition] && (_classPrivateFieldLooseBase(this, _initialPosition)[_initialPosition][0] !== this.x || _classPrivateFieldLooseBase(this, _initialPosition)[_initialPosition][1] !== this.y);\n  }\n  getBaseTranslation() {\n    const _this$parentDimension4 = _slicedToArray(this.parentDimensions, 2),\n      parentWidth = _this$parentDimension4[0],\n      parentHeight = _this$parentDimension4[1];\n    const _borderLineWidth = AnnotationEditor._borderLineWidth;\n    const x = _borderLineWidth / parentWidth;\n    const y = _borderLineWidth / parentHeight;\n    switch (this.rotation) {\n      case 90:\n        return [-x, y];\n      case 180:\n        return [x, y];\n      case 270:\n        return [x, -y];\n      default:\n        return [-x, -y];\n    }\n  }\n  get _mustFixPosition() {\n    return true;\n  }\n  fixAndSetPosition() {\n    let rotation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.rotation;\n    const _this$pageDimensions2 = _slicedToArray(this.pageDimensions, 2),\n      pageWidth = _this$pageDimensions2[0],\n      pageHeight = _this$pageDimensions2[1];\n    let x = this.x,\n      y = this.y,\n      width = this.width,\n      height = this.height;\n    width *= pageWidth;\n    height *= pageHeight;\n    x *= pageWidth;\n    y *= pageHeight;\n    if (this._mustFixPosition) {\n      switch (rotation) {\n        case 0:\n          x = Math.max(0, Math.min(pageWidth - width, x));\n          y = Math.max(0, Math.min(pageHeight - height, y));\n          break;\n        case 90:\n          x = Math.max(0, Math.min(pageWidth - height, x));\n          y = Math.min(pageHeight, Math.max(width, y));\n          break;\n        case 180:\n          x = Math.min(pageWidth, Math.max(width, x));\n          y = Math.min(pageHeight, Math.max(height, y));\n          break;\n        case 270:\n          x = Math.min(pageWidth, Math.max(height, x));\n          y = Math.max(0, Math.min(pageHeight - width, y));\n          break;\n      }\n    }\n    this.x = x /= pageWidth;\n    this.y = y /= pageHeight;\n    const _this$getBaseTranslat3 = this.getBaseTranslation(),\n      _this$getBaseTranslat4 = _slicedToArray(_this$getBaseTranslat3, 2),\n      bx = _this$getBaseTranslat4[0],\n      by = _this$getBaseTranslat4[1];\n    x += bx;\n    y += by;\n    const style = this.div.style;\n    style.left = `${(100 * x).toFixed(2)}%`;\n    style.top = `${(100 * y).toFixed(2)}%`;\n    this.moveInDOM();\n  }\n  screenToPageTranslation(x, y) {\n    return _classPrivateFieldLooseBase(AnnotationEditor, _rotatePoint)[_rotatePoint](x, y, this.parentRotation);\n  }\n  pageTranslationToScreen(x, y) {\n    return _classPrivateFieldLooseBase(AnnotationEditor, _rotatePoint)[_rotatePoint](x, y, 360 - this.parentRotation);\n  }\n  get parentScale() {\n    return this._uiManager.viewParameters.realScale;\n  }\n  get parentRotation() {\n    return (this._uiManager.viewParameters.rotation + this.pageRotation) % 360;\n  }\n  get parentDimensions() {\n    const parentScale = this.parentScale,\n      _this$pageDimensions3 = _slicedToArray(this.pageDimensions, 2),\n      pageWidth = _this$pageDimensions3[0],\n      pageHeight = _this$pageDimensions3[1];\n    return [pageWidth * parentScale, pageHeight * parentScale];\n  }\n  setDims(width, height) {\n    const _this$parentDimension5 = _slicedToArray(this.parentDimensions, 2),\n      parentWidth = _this$parentDimension5[0],\n      parentHeight = _this$parentDimension5[1];\n    this.div.style.width = `${(100 * width / parentWidth).toFixed(2)}%`;\n    if (!_classPrivateFieldLooseBase(this, _keepAspectRatio)[_keepAspectRatio]) {\n      this.div.style.height = `${(100 * height / parentHeight).toFixed(2)}%`;\n    }\n  }\n  fixDims() {\n    const style = this.div.style;\n    const height = style.height,\n      width = style.width;\n    const widthPercent = width.endsWith(\"%\");\n    const heightPercent = !_classPrivateFieldLooseBase(this, _keepAspectRatio)[_keepAspectRatio] && height.endsWith(\"%\");\n    if (widthPercent && heightPercent) {\n      return;\n    }\n    const _this$parentDimension6 = _slicedToArray(this.parentDimensions, 2),\n      parentWidth = _this$parentDimension6[0],\n      parentHeight = _this$parentDimension6[1];\n    if (!widthPercent) {\n      style.width = `${(100 * parseFloat(width) / parentWidth).toFixed(2)}%`;\n    }\n    if (!_classPrivateFieldLooseBase(this, _keepAspectRatio)[_keepAspectRatio] && !heightPercent) {\n      style.height = `${(100 * parseFloat(height) / parentHeight).toFixed(2)}%`;\n    }\n  }\n  getInitialTranslation() {\n    return [0, 0];\n  }\n  altTextFinish() {\n    var _classPrivateFieldLoo36;\n    (_classPrivateFieldLoo36 = _classPrivateFieldLooseBase(this, _altText3)[_altText3]) === null || _classPrivateFieldLoo36 === void 0 ? void 0 : _classPrivateFieldLoo36.finish();\n  }\n  async addEditToolbar() {\n    if (this._editToolbar || _classPrivateFieldLooseBase(this, _isInEditMode)[_isInEditMode]) {\n      return this._editToolbar;\n    }\n    this._editToolbar = new EditorToolbar(this);\n    this.div.append(this._editToolbar.render());\n    if (_classPrivateFieldLooseBase(this, _altText3)[_altText3]) {\n      await this._editToolbar.addAltText(_classPrivateFieldLooseBase(this, _altText3)[_altText3]);\n    }\n    return this._editToolbar;\n  }\n  removeEditToolbar() {\n    var _classPrivateFieldLoo37;\n    if (!this._editToolbar) {\n      return;\n    }\n    this._editToolbar.remove();\n    this._editToolbar = null;\n    (_classPrivateFieldLoo37 = _classPrivateFieldLooseBase(this, _altText3)[_altText3]) === null || _classPrivateFieldLoo37 === void 0 ? void 0 : _classPrivateFieldLoo37.destroy();\n  }\n  addContainer(container) {\n    var _this$_editToolbar;\n    const editToolbarDiv = (_this$_editToolbar = this._editToolbar) === null || _this$_editToolbar === void 0 ? void 0 : _this$_editToolbar.div;\n    if (editToolbarDiv) {\n      editToolbarDiv.before(container);\n    } else {\n      this.div.append(container);\n    }\n  }\n  getClientDimensions() {\n    return this.div.getBoundingClientRect();\n  }\n  async addAltTextButton() {\n    if (_classPrivateFieldLooseBase(this, _altText3)[_altText3]) {\n      return;\n    }\n    AltText.initialize(AnnotationEditor._l10n);\n    _classPrivateFieldLooseBase(this, _altText3)[_altText3] = new AltText(this);\n    if (_classPrivateFieldLooseBase(this, _accessibilityData)[_accessibilityData]) {\n      _classPrivateFieldLooseBase(this, _altText3)[_altText3].data = _classPrivateFieldLooseBase(this, _accessibilityData)[_accessibilityData];\n      _classPrivateFieldLooseBase(this, _accessibilityData)[_accessibilityData] = null;\n    }\n    await this.addEditToolbar();\n  }\n  get altTextData() {\n    var _classPrivateFieldLoo38;\n    return (_classPrivateFieldLoo38 = _classPrivateFieldLooseBase(this, _altText3)[_altText3]) === null || _classPrivateFieldLoo38 === void 0 ? void 0 : _classPrivateFieldLoo38.data;\n  }\n  set altTextData(data) {\n    if (!_classPrivateFieldLooseBase(this, _altText3)[_altText3]) {\n      return;\n    }\n    _classPrivateFieldLooseBase(this, _altText3)[_altText3].data = data;\n  }\n  get guessedAltText() {\n    var _classPrivateFieldLoo39;\n    return (_classPrivateFieldLoo39 = _classPrivateFieldLooseBase(this, _altText3)[_altText3]) === null || _classPrivateFieldLoo39 === void 0 ? void 0 : _classPrivateFieldLoo39.guessedText;\n  }\n  async setGuessedAltText(text) {\n    var _classPrivateFieldLoo40;\n    await ((_classPrivateFieldLoo40 = _classPrivateFieldLooseBase(this, _altText3)[_altText3]) === null || _classPrivateFieldLoo40 === void 0 ? void 0 : _classPrivateFieldLoo40.setGuessedText(text));\n  }\n  serializeAltText(isForCopying) {\n    var _classPrivateFieldLoo41;\n    return (_classPrivateFieldLoo41 = _classPrivateFieldLooseBase(this, _altText3)[_altText3]) === null || _classPrivateFieldLoo41 === void 0 ? void 0 : _classPrivateFieldLoo41.serialize(isForCopying);\n  }\n  hasAltText() {\n    return !!_classPrivateFieldLooseBase(this, _altText3)[_altText3] && !_classPrivateFieldLooseBase(this, _altText3)[_altText3].isEmpty();\n  }\n  hasAltTextData() {\n    var _classPrivateFieldLoo42, _classPrivateFieldLoo43;\n    return (_classPrivateFieldLoo42 = (_classPrivateFieldLoo43 = _classPrivateFieldLooseBase(this, _altText3)[_altText3]) === null || _classPrivateFieldLoo43 === void 0 ? void 0 : _classPrivateFieldLoo43.hasData()) !== null && _classPrivateFieldLoo42 !== void 0 ? _classPrivateFieldLoo42 : false;\n  }\n  render() {\n    this.div = document.createElement(\"div\");\n    this.div.setAttribute(\"data-editor-rotation\", (360 - this.rotation) % 360);\n    this.div.className = this.name;\n    this.div.setAttribute(\"id\", this.id);\n    this.div.tabIndex = _classPrivateFieldLooseBase(this, _disabled)[_disabled] ? -1 : 0;\n    if (!this._isVisible) {\n      this.div.classList.add(\"hidden\");\n    }\n    this.setInForeground();\n    _classPrivateFieldLooseBase(this, _addFocusListeners)[_addFocusListeners]();\n    const _this$parentDimension7 = _slicedToArray(this.parentDimensions, 2),\n      parentWidth = _this$parentDimension7[0],\n      parentHeight = _this$parentDimension7[1];\n    if (this.parentRotation % 180 !== 0) {\n      this.div.style.maxWidth = `${(100 * parentHeight / parentWidth).toFixed(2)}%`;\n      this.div.style.maxHeight = `${(100 * parentWidth / parentHeight).toFixed(2)}%`;\n    }\n    const _this$getInitialTrans = this.getInitialTranslation(),\n      _this$getInitialTrans2 = _slicedToArray(_this$getInitialTrans, 2),\n      tx = _this$getInitialTrans2[0],\n      ty = _this$getInitialTrans2[1];\n    this.translate(tx, ty);\n    bindEvents(this, this.div, [\"pointerdown\"]);\n    return this.div;\n  }\n  pointerdown(event) {\n    const isMac = util_FeatureTest.platform.isMac;\n    if (event.button !== 0 || event.ctrlKey && isMac) {\n      event.preventDefault();\n      return;\n    }\n    _classPrivateFieldLooseBase(this, _hasBeenClicked)[_hasBeenClicked] = true;\n    if (this._isDraggable) {\n      _classPrivateFieldLooseBase(this, _setUpDragSession)[_setUpDragSession](event);\n      return;\n    }\n    _classPrivateFieldLooseBase(this, _selectOnPointerEvent)[_selectOnPointerEvent](event);\n  }\n  get isSelected() {\n    return this._uiManager.isSelected(this);\n  }\n  moveInDOM() {\n    if (_classPrivateFieldLooseBase(this, _moveInDOMTimeout)[_moveInDOMTimeout]) {\n      clearTimeout(_classPrivateFieldLooseBase(this, _moveInDOMTimeout)[_moveInDOMTimeout]);\n    }\n    _classPrivateFieldLooseBase(this, _moveInDOMTimeout)[_moveInDOMTimeout] = setTimeout(() => {\n      var _this$parent2;\n      _classPrivateFieldLooseBase(this, _moveInDOMTimeout)[_moveInDOMTimeout] = null;\n      (_this$parent2 = this.parent) === null || _this$parent2 === void 0 ? void 0 : _this$parent2.moveEditorInDOM(this);\n    }, 0);\n  }\n  _setParentAndPosition(parent, x, y) {\n    parent.changeParent(this);\n    this.x = x;\n    this.y = y;\n    this.fixAndSetPosition();\n  }\n  getRect(tx, ty) {\n    let rotation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.rotation;\n    const scale = this.parentScale;\n    const _this$pageDimensions4 = _slicedToArray(this.pageDimensions, 2),\n      pageWidth = _this$pageDimensions4[0],\n      pageHeight = _this$pageDimensions4[1];\n    const _this$pageTranslation = _slicedToArray(this.pageTranslation, 2),\n      pageX = _this$pageTranslation[0],\n      pageY = _this$pageTranslation[1];\n    const shiftX = tx / scale;\n    const shiftY = ty / scale;\n    const x = this.x * pageWidth;\n    const y = this.y * pageHeight;\n    const width = this.width * pageWidth;\n    const height = this.height * pageHeight;\n    switch (rotation) {\n      case 0:\n        return [x + shiftX + pageX, pageHeight - y - shiftY - height + pageY, x + shiftX + width + pageX, pageHeight - y - shiftY + pageY];\n      case 90:\n        return [x + shiftY + pageX, pageHeight - y + shiftX + pageY, x + shiftY + height + pageX, pageHeight - y + shiftX + width + pageY];\n      case 180:\n        return [x - shiftX - width + pageX, pageHeight - y + shiftY + pageY, x - shiftX + pageX, pageHeight - y + shiftY + height + pageY];\n      case 270:\n        return [x - shiftY - height + pageX, pageHeight - y - shiftX - width + pageY, x - shiftY + pageX, pageHeight - y - shiftX + pageY];\n      default:\n        throw new Error(\"Invalid rotation\");\n    }\n  }\n  getRectInCurrentCoords(rect, pageHeight) {\n    const _rect = _slicedToArray(rect, 4),\n      x1 = _rect[0],\n      y1 = _rect[1],\n      x2 = _rect[2],\n      y2 = _rect[3];\n    const width = x2 - x1;\n    const height = y2 - y1;\n    switch (this.rotation) {\n      case 0:\n        return [x1, pageHeight - y2, width, height];\n      case 90:\n        return [x1, pageHeight - y1, height, width];\n      case 180:\n        return [x2, pageHeight - y1, width, height];\n      case 270:\n        return [x2, pageHeight - y2, height, width];\n      default:\n        throw new Error(\"Invalid rotation\");\n    }\n  }\n  onceAdded() {}\n  isEmpty() {\n    return false;\n  }\n  enableEditMode() {\n    _classPrivateFieldLooseBase(this, _isInEditMode)[_isInEditMode] = true;\n  }\n  disableEditMode() {\n    _classPrivateFieldLooseBase(this, _isInEditMode)[_isInEditMode] = false;\n  }\n  isInEditMode() {\n    return _classPrivateFieldLooseBase(this, _isInEditMode)[_isInEditMode];\n  }\n  shouldGetKeyboardEvents() {\n    return _classPrivateFieldLooseBase(this, _isResizerEnabledForKeyboard)[_isResizerEnabledForKeyboard];\n  }\n  needsToBeRebuilt() {\n    return this.div && !this.isAttachedToDOM;\n  }\n  rebuild() {\n    _classPrivateFieldLooseBase(this, _addFocusListeners)[_addFocusListeners]();\n  }\n  rotate(_angle) {}\n  serializeDeleted() {\n    var _this$_initialData;\n    return {\n      id: this.annotationElementId,\n      deleted: true,\n      pageIndex: this.pageIndex,\n      popupRef: ((_this$_initialData = this._initialData) === null || _this$_initialData === void 0 ? void 0 : _this$_initialData.popupRef) || \"\"\n    };\n  }\n  serialize() {\n    let isForCopying = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    unreachable(\"An editor must be serializable\");\n  }\n  static async deserialize(data, parent, uiManager) {\n    const editor = new this.prototype.constructor({\n      parent,\n      id: parent.getNextId(),\n      uiManager\n    });\n    editor.rotation = data.rotation;\n    _classPrivateFieldLooseBase(editor, _accessibilityData)[_accessibilityData] = data.accessibilityData;\n    const _editor$pageDimension = _slicedToArray(editor.pageDimensions, 2),\n      pageWidth = _editor$pageDimension[0],\n      pageHeight = _editor$pageDimension[1];\n    const _editor$getRectInCurr = editor.getRectInCurrentCoords(data.rect, pageHeight),\n      _editor$getRectInCurr2 = _slicedToArray(_editor$getRectInCurr, 4),\n      x = _editor$getRectInCurr2[0],\n      y = _editor$getRectInCurr2[1],\n      width = _editor$getRectInCurr2[2],\n      height = _editor$getRectInCurr2[3];\n    editor.x = x / pageWidth;\n    editor.y = y / pageHeight;\n    editor.width = width / pageWidth;\n    editor.height = height / pageHeight;\n    return editor;\n  }\n  get hasBeenModified() {\n    return !!this.annotationElementId && (this.deleted || this.serialize() !== null);\n  }\n  remove() {\n    var _classPrivateFieldLoo44;\n    (_classPrivateFieldLoo44 = _classPrivateFieldLooseBase(this, _focusAC)[_focusAC]) === null || _classPrivateFieldLoo44 === void 0 ? void 0 : _classPrivateFieldLoo44.abort();\n    _classPrivateFieldLooseBase(this, _focusAC)[_focusAC] = null;\n    if (!this.isEmpty()) {\n      this.commit();\n    }\n    if (this.parent) {\n      this.parent.remove(this);\n    } else {\n      this._uiManager.removeEditor(this);\n    }\n    if (_classPrivateFieldLooseBase(this, _moveInDOMTimeout)[_moveInDOMTimeout]) {\n      clearTimeout(_classPrivateFieldLooseBase(this, _moveInDOMTimeout)[_moveInDOMTimeout]);\n      _classPrivateFieldLooseBase(this, _moveInDOMTimeout)[_moveInDOMTimeout] = null;\n    }\n    _classPrivateFieldLooseBase(this, _stopResizing)[_stopResizing]();\n    this.removeEditToolbar();\n    if (_classPrivateFieldLooseBase(this, _telemetryTimeouts)[_telemetryTimeouts]) {\n      for (const timeout of _classPrivateFieldLooseBase(this, _telemetryTimeouts)[_telemetryTimeouts].values()) {\n        clearTimeout(timeout);\n      }\n      _classPrivateFieldLooseBase(this, _telemetryTimeouts)[_telemetryTimeouts] = null;\n    }\n    this.parent = null;\n  }\n  get isResizable() {\n    return false;\n  }\n  makeResizable() {\n    if (this.isResizable) {\n      _classPrivateFieldLooseBase(this, _createResizers)[_createResizers]();\n      _classPrivateFieldLooseBase(this, _resizersDiv)[_resizersDiv].classList.remove(\"hidden\");\n      bindEvents(this, this.div, [\"keydown\"]);\n    }\n  }\n  get toolbarPosition() {\n    return null;\n  }\n  keydown(event) {\n    if (!this.isResizable || event.target !== this.div || event.key !== \"Enter\") {\n      return;\n    }\n    this._uiManager.setSelected(this);\n    _classPrivateFieldLooseBase(this, _savedDimensions)[_savedDimensions] = {\n      savedX: this.x,\n      savedY: this.y,\n      savedWidth: this.width,\n      savedHeight: this.height\n    };\n    const children = _classPrivateFieldLooseBase(this, _resizersDiv)[_resizersDiv].children;\n    if (!_classPrivateFieldLooseBase(this, _allResizerDivs)[_allResizerDivs]) {\n      _classPrivateFieldLooseBase(this, _allResizerDivs)[_allResizerDivs] = Array.from(children);\n      const boundResizerKeydown = _classPrivateFieldLooseBase(this, _resizerKeydown)[_resizerKeydown].bind(this);\n      const boundResizerBlur = _classPrivateFieldLooseBase(this, _resizerBlur)[_resizerBlur].bind(this);\n      const signal = this._uiManager._signal;\n      for (const div of _classPrivateFieldLooseBase(this, _allResizerDivs)[_allResizerDivs]) {\n        const name = div.getAttribute(\"data-resizer-name\");\n        div.setAttribute(\"role\", \"spinbutton\");\n        div.addEventListener(\"keydown\", boundResizerKeydown, {\n          signal\n        });\n        div.addEventListener(\"blur\", boundResizerBlur, {\n          signal\n        });\n        div.addEventListener(\"focus\", _classPrivateFieldLooseBase(this, _resizerFocus)[_resizerFocus].bind(this, name), {\n          signal\n        });\n        div.setAttribute(\"data-l10n-id\", AnnotationEditor._l10nResizer[name]);\n      }\n    }\n    const first = _classPrivateFieldLooseBase(this, _allResizerDivs)[_allResizerDivs][0];\n    let firstPosition = 0;\n    for (const div of children) {\n      if (div === first) {\n        break;\n      }\n      firstPosition++;\n    }\n    const nextFirstPosition = (360 - this.rotation + this.parentRotation) % 360 / 90 * (_classPrivateFieldLooseBase(this, _allResizerDivs)[_allResizerDivs].length / 4);\n    if (nextFirstPosition !== firstPosition) {\n      if (nextFirstPosition < firstPosition) {\n        for (let i = 0; i < firstPosition - nextFirstPosition; i++) {\n          _classPrivateFieldLooseBase(this, _resizersDiv)[_resizersDiv].append(_classPrivateFieldLooseBase(this, _resizersDiv)[_resizersDiv].firstChild);\n        }\n      } else if (nextFirstPosition > firstPosition) {\n        for (let i = 0; i < nextFirstPosition - firstPosition; i++) {\n          _classPrivateFieldLooseBase(this, _resizersDiv)[_resizersDiv].firstChild.before(_classPrivateFieldLooseBase(this, _resizersDiv)[_resizersDiv].lastChild);\n        }\n      }\n      let i = 0;\n      for (const child of children) {\n        const div = _classPrivateFieldLooseBase(this, _allResizerDivs)[_allResizerDivs][i++];\n        const name = div.getAttribute(\"data-resizer-name\");\n        child.setAttribute(\"data-l10n-id\", AnnotationEditor._l10nResizer[name]);\n      }\n    }\n    _classPrivateFieldLooseBase(this, _setResizerTabIndex)[_setResizerTabIndex](0);\n    _classPrivateFieldLooseBase(this, _isResizerEnabledForKeyboard)[_isResizerEnabledForKeyboard] = true;\n    _classPrivateFieldLooseBase(this, _resizersDiv)[_resizersDiv].firstChild.focus({\n      focusVisible: true\n    });\n    event.preventDefault();\n    event.stopImmediatePropagation();\n  }\n  _resizeWithKeyboard(x, y) {\n    if (!_classPrivateFieldLooseBase(this, _isResizerEnabledForKeyboard)[_isResizerEnabledForKeyboard]) {\n      return;\n    }\n    _classPrivateFieldLooseBase(this, _resizerPointermove)[_resizerPointermove](_classPrivateFieldLooseBase(this, _focusedResizerName)[_focusedResizerName], {\n      movementX: x,\n      movementY: y\n    });\n  }\n  _stopResizingWithKeyboard() {\n    _classPrivateFieldLooseBase(this, _stopResizing)[_stopResizing]();\n    this.div.focus();\n  }\n  select() {\n    var _this$div2, _this$_editToolbar3, _classPrivateFieldLoo45;\n    this.makeResizable();\n    (_this$div2 = this.div) === null || _this$div2 === void 0 ? void 0 : _this$div2.classList.add(\"selectedEditor\");\n    if (!this._editToolbar) {\n      this.addEditToolbar().then(() => {\n        var _this$div3;\n        if ((_this$div3 = this.div) !== null && _this$div3 !== void 0 && _this$div3.classList.contains(\"selectedEditor\")) {\n          var _this$_editToolbar2;\n          (_this$_editToolbar2 = this._editToolbar) === null || _this$_editToolbar2 === void 0 ? void 0 : _this$_editToolbar2.show();\n        }\n      });\n      return;\n    }\n    (_this$_editToolbar3 = this._editToolbar) === null || _this$_editToolbar3 === void 0 ? void 0 : _this$_editToolbar3.show();\n    (_classPrivateFieldLoo45 = _classPrivateFieldLooseBase(this, _altText3)[_altText3]) === null || _classPrivateFieldLoo45 === void 0 ? void 0 : _classPrivateFieldLoo45.toggleAltTextBadge(false);\n  }\n  unselect() {\n    var _classPrivateFieldLoo46, _this$div4, _this$div5, _this$_editToolbar4, _classPrivateFieldLoo47;\n    (_classPrivateFieldLoo46 = _classPrivateFieldLooseBase(this, _resizersDiv)[_resizersDiv]) === null || _classPrivateFieldLoo46 === void 0 ? void 0 : _classPrivateFieldLoo46.classList.add(\"hidden\");\n    (_this$div4 = this.div) === null || _this$div4 === void 0 ? void 0 : _this$div4.classList.remove(\"selectedEditor\");\n    if ((_this$div5 = this.div) !== null && _this$div5 !== void 0 && _this$div5.contains(document.activeElement)) {\n      this._uiManager.currentLayer.div.focus({\n        preventScroll: true\n      });\n    }\n    (_this$_editToolbar4 = this._editToolbar) === null || _this$_editToolbar4 === void 0 ? void 0 : _this$_editToolbar4.hide();\n    (_classPrivateFieldLoo47 = _classPrivateFieldLooseBase(this, _altText3)[_altText3]) === null || _classPrivateFieldLoo47 === void 0 ? void 0 : _classPrivateFieldLoo47.toggleAltTextBadge(true);\n  }\n  updateParams(type, value) {}\n  disableEditing() {}\n  enableEditing() {}\n  enterInEditMode() {}\n  getImageForAltText() {\n    return null;\n  }\n  get contentDiv() {\n    return this.div;\n  }\n  get isEditing() {\n    return _classPrivateFieldLooseBase(this, _isEditing)[_isEditing];\n  }\n  set isEditing(value) {\n    _classPrivateFieldLooseBase(this, _isEditing)[_isEditing] = value;\n    if (!this.parent) {\n      return;\n    }\n    if (value) {\n      this.parent.setSelected(this);\n      this.parent.setActiveEditor(this);\n    } else {\n      this.parent.setActiveEditor(null);\n    }\n  }\n  setAspectRatio(width, height) {\n    _classPrivateFieldLooseBase(this, _keepAspectRatio)[_keepAspectRatio] = true;\n    const aspectRatio = width / height;\n    const style = this.div.style;\n    style.aspectRatio = aspectRatio;\n    style.height = \"auto\";\n  }\n  static get MIN_SIZE() {\n    return 16;\n  }\n  static canCreateNewEmptyEditor() {\n    return true;\n  }\n  get telemetryInitialData() {\n    return {\n      action: \"added\"\n    };\n  }\n  get telemetryFinalData() {\n    return null;\n  }\n  _reportTelemetry(data) {\n    let mustWait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (mustWait) {\n      var _classPrivateFieldLoo48;\n      (_classPrivateFieldLoo48 = _classPrivateFieldLooseBase(this, _telemetryTimeouts))[_telemetryTimeouts] || (_classPrivateFieldLoo48[_telemetryTimeouts] = new Map());\n      const action = data.action;\n      let timeout = _classPrivateFieldLooseBase(this, _telemetryTimeouts)[_telemetryTimeouts].get(action);\n      if (timeout) {\n        clearTimeout(timeout);\n      }\n      timeout = setTimeout(() => {\n        this._reportTelemetry(data);\n        _classPrivateFieldLooseBase(this, _telemetryTimeouts)[_telemetryTimeouts].delete(action);\n        if (_classPrivateFieldLooseBase(this, _telemetryTimeouts)[_telemetryTimeouts].size === 0) {\n          _classPrivateFieldLooseBase(this, _telemetryTimeouts)[_telemetryTimeouts] = null;\n        }\n      }, AnnotationEditor._telemetryTimeout);\n      _classPrivateFieldLooseBase(this, _telemetryTimeouts)[_telemetryTimeouts].set(action, timeout);\n      return;\n    }\n    data.type || (data.type = this.editorType);\n    this._uiManager._eventBus.dispatch(\"reporttelemetry\", {\n      source: this,\n      details: {\n        type: \"editing\",\n        data\n      }\n    });\n  }\n  show() {\n    let visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._isVisible;\n    this.div.classList.toggle(\"hidden\", !visible);\n    this._isVisible = visible;\n  }\n  enable() {\n    if (this.div) {\n      this.div.tabIndex = 0;\n    }\n    _classPrivateFieldLooseBase(this, _disabled)[_disabled] = false;\n  }\n  disable() {\n    if (this.div) {\n      this.div.tabIndex = -1;\n    }\n    _classPrivateFieldLooseBase(this, _disabled)[_disabled] = true;\n  }\n  renderAnnotationElement(annotation) {\n    let content = annotation.container.querySelector(\".annotationContent\");\n    if (!content) {\n      content = document.createElement(\"div\");\n      content.classList.add(\"annotationContent\", this.editorType);\n      annotation.container.prepend(content);\n    } else if (content.nodeName === \"CANVAS\") {\n      const canvas = content;\n      content = document.createElement(\"div\");\n      content.classList.add(\"annotationContent\", this.editorType);\n      canvas.before(content);\n    }\n    return content;\n  }\n  resetAnnotationElement(annotation) {\n    const firstChild = annotation.container.firstChild;\n    if ((firstChild === null || firstChild === void 0 ? void 0 : firstChild.nodeName) === \"DIV\" && firstChild.classList.contains(\"annotationContent\")) {\n      firstChild.remove();\n    }\n  }\n}\n_AnnotationEditor = AnnotationEditor;\nfunction _translate2(_ref161, x, y) {\n  let _ref162 = _slicedToArray(_ref161, 2),\n    width = _ref162[0],\n    height = _ref162[1];\n  var _this$screenToPageTra3 = this.screenToPageTranslation(x, y);\n  var _this$screenToPageTra4 = _slicedToArray(_this$screenToPageTra3, 2);\n  x = _this$screenToPageTra4[0];\n  y = _this$screenToPageTra4[1];\n  this.x += x / width;\n  this.y += y / height;\n  this.fixAndSetPosition();\n}\nfunction _rotatePoint2(x, y, angle) {\n  switch (angle) {\n    case 90:\n      return [y, -x];\n    case 180:\n      return [-x, -y];\n    case 270:\n      return [-y, x];\n    default:\n      return [x, y];\n  }\n}\nfunction _getRotationMatrix2(rotation) {\n  switch (rotation) {\n    case 90:\n      {\n        const _this$pageDimensions6 = _slicedToArray(this.pageDimensions, 2),\n          pageWidth = _this$pageDimensions6[0],\n          pageHeight = _this$pageDimensions6[1];\n        return [0, -pageWidth / pageHeight, pageHeight / pageWidth, 0];\n      }\n    case 180:\n      return [-1, 0, 0, -1];\n    case 270:\n      {\n        const _this$pageDimensions7 = _slicedToArray(this.pageDimensions, 2),\n          pageWidth = _this$pageDimensions7[0],\n          pageHeight = _this$pageDimensions7[1];\n        return [0, pageWidth / pageHeight, -pageHeight / pageWidth, 0];\n      }\n    default:\n      return [1, 0, 0, 1];\n  }\n}\nfunction _createResizers2() {\n  if (_classPrivateFieldLooseBase(this, _resizersDiv)[_resizersDiv]) {\n    return;\n  }\n  _classPrivateFieldLooseBase(this, _resizersDiv)[_resizersDiv] = document.createElement(\"div\");\n  _classPrivateFieldLooseBase(this, _resizersDiv)[_resizersDiv].classList.add(\"resizers\");\n  const classes = this._willKeepAspectRatio ? [\"topLeft\", \"topRight\", \"bottomRight\", \"bottomLeft\"] : [\"topLeft\", \"topMiddle\", \"topRight\", \"middleRight\", \"bottomRight\", \"bottomMiddle\", \"bottomLeft\", \"middleLeft\"];\n  const signal = this._uiManager._signal;\n  for (const name of classes) {\n    const div = document.createElement(\"div\");\n    _classPrivateFieldLooseBase(this, _resizersDiv)[_resizersDiv].append(div);\n    div.classList.add(\"resizer\", name);\n    div.setAttribute(\"data-resizer-name\", name);\n    div.addEventListener(\"pointerdown\", _classPrivateFieldLooseBase(this, _resizerPointerdown)[_resizerPointerdown].bind(this, name), {\n      signal\n    });\n    div.addEventListener(\"contextmenu\", noContextMenu, {\n      signal\n    });\n    div.tabIndex = -1;\n  }\n  this.div.prepend(_classPrivateFieldLooseBase(this, _resizersDiv)[_resizersDiv]);\n}\nfunction _resizerPointerdown2(name, event) {\n  var _classPrivateFieldLoo137;\n  event.preventDefault();\n  const isMac = util_FeatureTest.platform.isMac;\n  if (event.button !== 0 || event.ctrlKey && isMac) {\n    return;\n  }\n  (_classPrivateFieldLoo137 = _classPrivateFieldLooseBase(this, _altText3)[_altText3]) === null || _classPrivateFieldLoo137 === void 0 ? void 0 : _classPrivateFieldLoo137.toggle(false);\n  const savedDraggable = this._isDraggable;\n  this._isDraggable = false;\n  const ac = new AbortController();\n  const signal = this._uiManager.combinedSignal(ac);\n  this.parent.togglePointerEvents(false);\n  window.addEventListener(\"pointermove\", _classPrivateFieldLooseBase(this, _resizerPointermove)[_resizerPointermove].bind(this, name), {\n    passive: true,\n    capture: true,\n    signal\n  });\n  window.addEventListener(\"contextmenu\", noContextMenu, {\n    signal\n  });\n  const savedX = this.x;\n  const savedY = this.y;\n  const savedWidth = this.width;\n  const savedHeight = this.height;\n  const savedParentCursor = this.parent.div.style.cursor;\n  const savedCursor = this.div.style.cursor;\n  this.div.style.cursor = this.parent.div.style.cursor = window.getComputedStyle(event.target).cursor;\n  const pointerUpCallback = () => {\n    var _classPrivateFieldLoo138;\n    ac.abort();\n    this.parent.togglePointerEvents(true);\n    (_classPrivateFieldLoo138 = _classPrivateFieldLooseBase(this, _altText3)[_altText3]) === null || _classPrivateFieldLoo138 === void 0 ? void 0 : _classPrivateFieldLoo138.toggle(true);\n    this._isDraggable = savedDraggable;\n    this.parent.div.style.cursor = savedParentCursor;\n    this.div.style.cursor = savedCursor;\n    _classPrivateFieldLooseBase(this, _addResizeToUndoStack)[_addResizeToUndoStack](savedX, savedY, savedWidth, savedHeight);\n  };\n  window.addEventListener(\"pointerup\", pointerUpCallback, {\n    signal\n  });\n  window.addEventListener(\"blur\", pointerUpCallback, {\n    signal\n  });\n}\nfunction _addResizeToUndoStack2(savedX, savedY, savedWidth, savedHeight) {\n  const newX = this.x;\n  const newY = this.y;\n  const newWidth = this.width;\n  const newHeight = this.height;\n  if (newX === savedX && newY === savedY && newWidth === savedWidth && newHeight === savedHeight) {\n    return;\n  }\n  this.addCommands({\n    cmd: () => {\n      this.width = newWidth;\n      this.height = newHeight;\n      this.x = newX;\n      this.y = newY;\n      const _this$parentDimension12 = _slicedToArray(this.parentDimensions, 2),\n        parentWidth = _this$parentDimension12[0],\n        parentHeight = _this$parentDimension12[1];\n      this.setDims(parentWidth * newWidth, parentHeight * newHeight);\n      this.fixAndSetPosition();\n    },\n    undo: () => {\n      this.width = savedWidth;\n      this.height = savedHeight;\n      this.x = savedX;\n      this.y = savedY;\n      const _this$parentDimension13 = _slicedToArray(this.parentDimensions, 2),\n        parentWidth = _this$parentDimension13[0],\n        parentHeight = _this$parentDimension13[1];\n      this.setDims(parentWidth * savedWidth, parentHeight * savedHeight);\n      this.fixAndSetPosition();\n    },\n    mustExec: true\n  });\n}\nfunction _resizerPointermove2(name, event) {\n  const _this$parentDimension14 = _slicedToArray(this.parentDimensions, 2),\n    parentWidth = _this$parentDimension14[0],\n    parentHeight = _this$parentDimension14[1];\n  const savedX = this.x;\n  const savedY = this.y;\n  const savedWidth = this.width;\n  const savedHeight = this.height;\n  const minWidth = _AnnotationEditor.MIN_SIZE / parentWidth;\n  const minHeight = _AnnotationEditor.MIN_SIZE / parentHeight;\n  const round = x => Math.round(x * 10000) / 10000;\n  const rotationMatrix = _classPrivateFieldLooseBase(this, _getRotationMatrix)[_getRotationMatrix](this.rotation);\n  const transf = (x, y) => [rotationMatrix[0] * x + rotationMatrix[2] * y, rotationMatrix[1] * x + rotationMatrix[3] * y];\n  const invRotationMatrix = _classPrivateFieldLooseBase(this, _getRotationMatrix)[_getRotationMatrix](360 - this.rotation);\n  const invTransf = (x, y) => [invRotationMatrix[0] * x + invRotationMatrix[2] * y, invRotationMatrix[1] * x + invRotationMatrix[3] * y];\n  let getPoint;\n  let getOpposite;\n  let isDiagonal = false;\n  let isHorizontal = false;\n  switch (name) {\n    case \"topLeft\":\n      isDiagonal = true;\n      getPoint = (w, h) => [0, 0];\n      getOpposite = (w, h) => [w, h];\n      break;\n    case \"topMiddle\":\n      getPoint = (w, h) => [w / 2, 0];\n      getOpposite = (w, h) => [w / 2, h];\n      break;\n    case \"topRight\":\n      isDiagonal = true;\n      getPoint = (w, h) => [w, 0];\n      getOpposite = (w, h) => [0, h];\n      break;\n    case \"middleRight\":\n      isHorizontal = true;\n      getPoint = (w, h) => [w, h / 2];\n      getOpposite = (w, h) => [0, h / 2];\n      break;\n    case \"bottomRight\":\n      isDiagonal = true;\n      getPoint = (w, h) => [w, h];\n      getOpposite = (w, h) => [0, 0];\n      break;\n    case \"bottomMiddle\":\n      getPoint = (w, h) => [w / 2, h];\n      getOpposite = (w, h) => [w / 2, 0];\n      break;\n    case \"bottomLeft\":\n      isDiagonal = true;\n      getPoint = (w, h) => [0, h];\n      getOpposite = (w, h) => [w, 0];\n      break;\n    case \"middleLeft\":\n      isHorizontal = true;\n      getPoint = (w, h) => [0, h / 2];\n      getOpposite = (w, h) => [w, h / 2];\n      break;\n  }\n  const point = getPoint(savedWidth, savedHeight);\n  const oppositePoint = getOpposite(savedWidth, savedHeight);\n  let transfOppositePoint = transf(...oppositePoint);\n  const oppositeX = round(savedX + transfOppositePoint[0]);\n  const oppositeY = round(savedY + transfOppositePoint[1]);\n  let ratioX = 1;\n  let ratioY = 1;\n  let _this$screenToPageTra5 = this.screenToPageTranslation(event.movementX, event.movementY),\n    _this$screenToPageTra6 = _slicedToArray(_this$screenToPageTra5, 2),\n    deltaX = _this$screenToPageTra6[0],\n    deltaY = _this$screenToPageTra6[1];\n  var _invTransf = invTransf(deltaX / parentWidth, deltaY / parentHeight);\n  var _invTransf2 = _slicedToArray(_invTransf, 2);\n  deltaX = _invTransf2[0];\n  deltaY = _invTransf2[1];\n  if (isDiagonal) {\n    const oldDiag = Math.hypot(savedWidth, savedHeight);\n    ratioX = ratioY = Math.max(Math.min(Math.hypot(oppositePoint[0] - point[0] - deltaX, oppositePoint[1] - point[1] - deltaY) / oldDiag, 1 / savedWidth, 1 / savedHeight), minWidth / savedWidth, minHeight / savedHeight);\n  } else if (isHorizontal) {\n    ratioX = Math.max(minWidth, Math.min(1, Math.abs(oppositePoint[0] - point[0] - deltaX))) / savedWidth;\n  } else {\n    ratioY = Math.max(minHeight, Math.min(1, Math.abs(oppositePoint[1] - point[1] - deltaY))) / savedHeight;\n  }\n  const newWidth = round(savedWidth * ratioX);\n  const newHeight = round(savedHeight * ratioY);\n  transfOppositePoint = transf(...getOpposite(newWidth, newHeight));\n  const newX = oppositeX - transfOppositePoint[0];\n  const newY = oppositeY - transfOppositePoint[1];\n  this.width = newWidth;\n  this.height = newHeight;\n  this.x = newX;\n  this.y = newY;\n  this.setDims(parentWidth * newWidth, parentHeight * newHeight);\n  this.fixAndSetPosition();\n}\nfunction _selectOnPointerEvent2(event) {\n  const isMac = util_FeatureTest.platform.isMac;\n  if (event.ctrlKey && !isMac || event.shiftKey || event.metaKey && isMac) {\n    this.parent.toggleSelected(this);\n  } else {\n    this.parent.setSelected(this);\n  }\n}\nfunction _setUpDragSession2(event) {\n  const isSelected = this.isSelected;\n  this._uiManager.setUpDragSession();\n  const ac = new AbortController();\n  const signal = this._uiManager.combinedSignal(ac);\n  if (isSelected) {\n    this.div.classList.add(\"moving\");\n    _classPrivateFieldLooseBase(this, _prevDragX)[_prevDragX] = event.clientX;\n    _classPrivateFieldLooseBase(this, _prevDragY)[_prevDragY] = event.clientY;\n    const pointerMoveCallback = e => {\n      const x = e.clientX,\n        y = e.clientY;\n      const _this$screenToPageTra7 = this.screenToPageTranslation(x - _classPrivateFieldLooseBase(this, _prevDragX)[_prevDragX], y - _classPrivateFieldLooseBase(this, _prevDragY)[_prevDragY]),\n        _this$screenToPageTra8 = _slicedToArray(_this$screenToPageTra7, 2),\n        tx = _this$screenToPageTra8[0],\n        ty = _this$screenToPageTra8[1];\n      _classPrivateFieldLooseBase(this, _prevDragX)[_prevDragX] = x;\n      _classPrivateFieldLooseBase(this, _prevDragY)[_prevDragY] = y;\n      this._uiManager.dragSelectedEditors(tx, ty);\n    };\n    window.addEventListener(\"pointermove\", pointerMoveCallback, {\n      passive: true,\n      capture: true,\n      signal\n    });\n  }\n  const pointerUpCallback = () => {\n    ac.abort();\n    if (isSelected) {\n      this.div.classList.remove(\"moving\");\n    }\n    _classPrivateFieldLooseBase(this, _hasBeenClicked)[_hasBeenClicked] = false;\n    if (!this._uiManager.endDragSession()) {\n      _classPrivateFieldLooseBase(this, _selectOnPointerEvent)[_selectOnPointerEvent](event);\n    }\n  };\n  window.addEventListener(\"pointerup\", pointerUpCallback, {\n    signal\n  });\n  window.addEventListener(\"blur\", pointerUpCallback, {\n    signal\n  });\n}\nfunction _addFocusListeners2() {\n  if (_classPrivateFieldLooseBase(this, _focusAC)[_focusAC] || !this.div) {\n    return;\n  }\n  _classPrivateFieldLooseBase(this, _focusAC)[_focusAC] = new AbortController();\n  const signal = this._uiManager.combinedSignal(_classPrivateFieldLooseBase(this, _focusAC)[_focusAC]);\n  this.div.addEventListener(\"focusin\", this.focusin.bind(this), {\n    signal\n  });\n  this.div.addEventListener(\"focusout\", this.focusout.bind(this), {\n    signal\n  });\n}\nfunction _resizerKeydown2(event) {\n  _AnnotationEditor._resizerKeyboardManager.exec(this, event);\n}\nfunction _resizerBlur2(event) {\n  var _event$relatedTarget;\n  if (_classPrivateFieldLooseBase(this, _isResizerEnabledForKeyboard)[_isResizerEnabledForKeyboard] && ((_event$relatedTarget = event.relatedTarget) === null || _event$relatedTarget === void 0 ? void 0 : _event$relatedTarget.parentNode) !== _classPrivateFieldLooseBase(this, _resizersDiv)[_resizersDiv]) {\n    _classPrivateFieldLooseBase(this, _stopResizing)[_stopResizing]();\n  }\n}\nfunction _resizerFocus2(name) {\n  _classPrivateFieldLooseBase(this, _focusedResizerName)[_focusedResizerName] = _classPrivateFieldLooseBase(this, _isResizerEnabledForKeyboard)[_isResizerEnabledForKeyboard] ? name : \"\";\n}\nfunction _setResizerTabIndex2(value) {\n  if (!_classPrivateFieldLooseBase(this, _allResizerDivs)[_allResizerDivs]) {\n    return;\n  }\n  for (const div of _classPrivateFieldLooseBase(this, _allResizerDivs)[_allResizerDivs]) {\n    div.tabIndex = value;\n  }\n}\nfunction _stopResizing2() {\n  _classPrivateFieldLooseBase(this, _isResizerEnabledForKeyboard)[_isResizerEnabledForKeyboard] = false;\n  _classPrivateFieldLooseBase(this, _setResizerTabIndex)[_setResizerTabIndex](-1);\n  if (_classPrivateFieldLooseBase(this, _savedDimensions)[_savedDimensions]) {\n    const _classPrivateFieldLoo139 = _classPrivateFieldLooseBase(this, _savedDimensions)[_savedDimensions],\n      savedX = _classPrivateFieldLoo139.savedX,\n      savedY = _classPrivateFieldLoo139.savedY,\n      savedWidth = _classPrivateFieldLoo139.savedWidth,\n      savedHeight = _classPrivateFieldLoo139.savedHeight;\n    _classPrivateFieldLooseBase(this, _addResizeToUndoStack)[_addResizeToUndoStack](savedX, savedY, savedWidth, savedHeight);\n    _classPrivateFieldLooseBase(this, _savedDimensions)[_savedDimensions] = null;\n  }\n}\nObject.defineProperty(AnnotationEditor, _rotatePoint, {\n  value: _rotatePoint2\n});\nAnnotationEditor._l10n = null;\nAnnotationEditor._l10nResizer = null;\nAnnotationEditor._borderLineWidth = -1;\nAnnotationEditor._colorManager = new ColorManager();\nAnnotationEditor._zIndex = 1;\nAnnotationEditor._telemetryTimeout = 1000;\nclass FakeEditor extends AnnotationEditor {\n  constructor(params) {\n    super(params);\n    this.annotationElementId = params.annotationElementId;\n    this.deleted = true;\n  }\n  serialize() {\n    return this.serializeDeleted();\n  }\n}\n; // ./src/shared/murmurhash3.js\nconst SEED = 0xc3d2e1f0;\nconst MASK_HIGH = 0xffff0000;\nconst MASK_LOW = 0xffff;\nclass MurmurHash3_64 {\n  constructor(seed) {\n    this.h1 = seed ? seed & 0xffffffff : SEED;\n    this.h2 = seed ? seed & 0xffffffff : SEED;\n  }\n  update(input) {\n    let data, length;\n    if (typeof input === \"string\") {\n      data = new Uint8Array(input.length * 2);\n      length = 0;\n      for (let i = 0, ii = input.length; i < ii; i++) {\n        const code = input.charCodeAt(i);\n        if (code <= 0xff) {\n          data[length++] = code;\n        } else {\n          data[length++] = code >>> 8;\n          data[length++] = code & 0xff;\n        }\n      }\n    } else if (ArrayBuffer.isView(input)) {\n      data = input.slice();\n      length = data.byteLength;\n    } else {\n      throw new Error(\"Invalid data format, must be a string or TypedArray.\");\n    }\n    const blockCounts = length >> 2;\n    const tailLength = length - blockCounts * 4;\n    const dataUint32 = new Uint32Array(data.buffer, 0, blockCounts);\n    let k1 = 0,\n      k2 = 0;\n    let h1 = this.h1,\n      h2 = this.h2;\n    const C1 = 0xcc9e2d51,\n      C2 = 0x1b873593;\n    const C1_LOW = C1 & MASK_LOW,\n      C2_LOW = C2 & MASK_LOW;\n    for (let i = 0; i < blockCounts; i++) {\n      if (i & 1) {\n        k1 = dataUint32[i];\n        k1 = k1 * C1 & MASK_HIGH | k1 * C1_LOW & MASK_LOW;\n        k1 = k1 << 15 | k1 >>> 17;\n        k1 = k1 * C2 & MASK_HIGH | k1 * C2_LOW & MASK_LOW;\n        h1 ^= k1;\n        h1 = h1 << 13 | h1 >>> 19;\n        h1 = h1 * 5 + 0xe6546b64;\n      } else {\n        k2 = dataUint32[i];\n        k2 = k2 * C1 & MASK_HIGH | k2 * C1_LOW & MASK_LOW;\n        k2 = k2 << 15 | k2 >>> 17;\n        k2 = k2 * C2 & MASK_HIGH | k2 * C2_LOW & MASK_LOW;\n        h2 ^= k2;\n        h2 = h2 << 13 | h2 >>> 19;\n        h2 = h2 * 5 + 0xe6546b64;\n      }\n    }\n    k1 = 0;\n    switch (tailLength) {\n      case 3:\n        k1 ^= data[blockCounts * 4 + 2] << 16;\n      case 2:\n        k1 ^= data[blockCounts * 4 + 1] << 8;\n      case 1:\n        k1 ^= data[blockCounts * 4];\n        k1 = k1 * C1 & MASK_HIGH | k1 * C1_LOW & MASK_LOW;\n        k1 = k1 << 15 | k1 >>> 17;\n        k1 = k1 * C2 & MASK_HIGH | k1 * C2_LOW & MASK_LOW;\n        if (blockCounts & 1) {\n          h1 ^= k1;\n        } else {\n          h2 ^= k1;\n        }\n    }\n    this.h1 = h1;\n    this.h2 = h2;\n  }\n  hexdigest() {\n    let h1 = this.h1,\n      h2 = this.h2;\n    h1 ^= h2 >>> 1;\n    h1 = h1 * 0xed558ccd & MASK_HIGH | h1 * 0x8ccd & MASK_LOW;\n    h2 = h2 * 0xff51afd7 & MASK_HIGH | ((h2 << 16 | h1 >>> 16) * 0xafd7ed55 & MASK_HIGH) >>> 16;\n    h1 ^= h2 >>> 1;\n    h1 = h1 * 0x1a85ec53 & MASK_HIGH | h1 * 0xec53 & MASK_LOW;\n    h2 = h2 * 0xc4ceb9fe & MASK_HIGH | ((h2 << 16 | h1 >>> 16) * 0xb9fe1a85 & MASK_HIGH) >>> 16;\n    h1 ^= h2 >>> 1;\n    return (h1 >>> 0).toString(16).padStart(8, \"0\") + (h2 >>> 0).toString(16).padStart(8, \"0\");\n  }\n}\n; // ./src/display/annotation_storage.js\n\nconst SerializableEmpty = Object.freeze({\n  map: null,\n  hash: \"\",\n  transfer: undefined\n});\nvar _modified = /*#__PURE__*/_classPrivateFieldLooseKey(\"modified\");\nvar _modifiedIds = /*#__PURE__*/_classPrivateFieldLooseKey(\"modifiedIds\");\nvar _storage = /*#__PURE__*/_classPrivateFieldLooseKey(\"storage\");\nvar _setModified = /*#__PURE__*/_classPrivateFieldLooseKey(\"setModified\");\nclass AnnotationStorage {\n  constructor() {\n    Object.defineProperty(this, _setModified, {\n      value: _setModified2\n    });\n    Object.defineProperty(this, _modified, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _modifiedIds, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _storage, {\n      writable: true,\n      value: new Map()\n    });\n    this.onSetModified = null;\n    this.onResetModified = null;\n    this.onAnnotationEditor = null;\n  }\n  getValue(key, defaultValue) {\n    const value = _classPrivateFieldLooseBase(this, _storage)[_storage].get(key);\n    if (value === undefined) {\n      return defaultValue;\n    }\n    return Object.assign(defaultValue, value);\n  }\n  getRawValue(key) {\n    return _classPrivateFieldLooseBase(this, _storage)[_storage].get(key);\n  }\n  remove(key) {\n    _classPrivateFieldLooseBase(this, _storage)[_storage].delete(key);\n    if (_classPrivateFieldLooseBase(this, _storage)[_storage].size === 0) {\n      this.resetModified();\n    }\n    if (typeof this.onAnnotationEditor === \"function\") {\n      for (const value of _classPrivateFieldLooseBase(this, _storage)[_storage].values()) {\n        if (value instanceof AnnotationEditor) {\n          return;\n        }\n      }\n      this.onAnnotationEditor(null);\n    }\n  }\n  setValue(key, value) {\n    const obj = _classPrivateFieldLooseBase(this, _storage)[_storage].get(key);\n    let modified = false;\n    if (obj !== undefined) {\n      for (const _ref31 of Object.entries(value)) {\n        var _ref32 = _slicedToArray(_ref31, 2);\n        const entry = _ref32[0];\n        const val = _ref32[1];\n        if (obj[entry] !== val) {\n          modified = true;\n          obj[entry] = val;\n        }\n      }\n    } else {\n      modified = true;\n      _classPrivateFieldLooseBase(this, _storage)[_storage].set(key, value);\n    }\n    if (modified) {\n      _classPrivateFieldLooseBase(this, _setModified)[_setModified]();\n    }\n    if (value instanceof AnnotationEditor && typeof this.onAnnotationEditor === \"function\") {\n      this.onAnnotationEditor(value.constructor._type);\n    }\n  }\n  has(key) {\n    return _classPrivateFieldLooseBase(this, _storage)[_storage].has(key);\n  }\n  getAll() {\n    return _classPrivateFieldLooseBase(this, _storage)[_storage].size > 0 ? objectFromMap(_classPrivateFieldLooseBase(this, _storage)[_storage]) : null;\n  }\n  setAll(obj) {\n    for (const _ref33 of Object.entries(obj)) {\n      var _ref34 = _slicedToArray(_ref33, 2);\n      const key = _ref34[0];\n      const val = _ref34[1];\n      this.setValue(key, val);\n    }\n  }\n  get size() {\n    return _classPrivateFieldLooseBase(this, _storage)[_storage].size;\n  }\n  resetModified() {\n    if (_classPrivateFieldLooseBase(this, _modified)[_modified]) {\n      _classPrivateFieldLooseBase(this, _modified)[_modified] = false;\n      if (typeof this.onResetModified === \"function\") {\n        this.onResetModified();\n      }\n    }\n  }\n  get print() {\n    return new PrintAnnotationStorage(this);\n  }\n  get serializable() {\n    if (_classPrivateFieldLooseBase(this, _storage)[_storage].size === 0) {\n      return SerializableEmpty;\n    }\n    const map = new Map(),\n      hash = new MurmurHash3_64(),\n      transfer = [];\n    const context = Object.create(null);\n    let hasBitmap = false;\n    for (const _ref35 of _classPrivateFieldLooseBase(this, _storage)[_storage]) {\n      var _ref36 = _slicedToArray(_ref35, 2);\n      const key = _ref36[0];\n      const val = _ref36[1];\n      const serialized = val instanceof AnnotationEditor ? val.serialize(false, context) : val;\n      if (serialized) {\n        map.set(key, serialized);\n        hash.update(`${key}:${JSON.stringify(serialized)}`);\n        hasBitmap || (hasBitmap = !!serialized.bitmap);\n      }\n    }\n    if (hasBitmap) {\n      for (const value of map.values()) {\n        if (value.bitmap) {\n          transfer.push(value.bitmap);\n        }\n      }\n    }\n    return map.size > 0 ? {\n      map,\n      hash: hash.hexdigest(),\n      transfer\n    } : SerializableEmpty;\n  }\n  get editorStats() {\n    let stats = null;\n    const typeToEditor = new Map();\n    for (const value of _classPrivateFieldLooseBase(this, _storage)[_storage].values()) {\n      var _stats;\n      if (!(value instanceof AnnotationEditor)) {\n        continue;\n      }\n      const editorStats = value.telemetryFinalData;\n      if (!editorStats) {\n        continue;\n      }\n      const type = editorStats.type;\n      if (!typeToEditor.has(type)) {\n        typeToEditor.set(type, Object.getPrototypeOf(value).constructor);\n      }\n      stats || (stats = Object.create(null));\n      const map = (_stats = stats)[type] || (_stats[type] = new Map());\n      for (const _ref37 of Object.entries(editorStats)) {\n        var _counters$get;\n        var _ref38 = _slicedToArray(_ref37, 2);\n        const key = _ref38[0];\n        const val = _ref38[1];\n        if (key === \"type\") {\n          continue;\n        }\n        let counters = map.get(key);\n        if (!counters) {\n          counters = new Map();\n          map.set(key, counters);\n        }\n        const count = (_counters$get = counters.get(val)) !== null && _counters$get !== void 0 ? _counters$get : 0;\n        counters.set(val, count + 1);\n      }\n    }\n    for (const _ref39 of typeToEditor) {\n      var _ref40 = _slicedToArray(_ref39, 2);\n      const type = _ref40[0];\n      const editor = _ref40[1];\n      stats[type] = editor.computeTelemetryFinalData(stats[type]);\n    }\n    return stats;\n  }\n  resetModifiedIds() {\n    _classPrivateFieldLooseBase(this, _modifiedIds)[_modifiedIds] = null;\n  }\n  get modifiedIds() {\n    if (_classPrivateFieldLooseBase(this, _modifiedIds)[_modifiedIds]) {\n      return _classPrivateFieldLooseBase(this, _modifiedIds)[_modifiedIds];\n    }\n    const ids = [];\n    for (const value of _classPrivateFieldLooseBase(this, _storage)[_storage].values()) {\n      if (!(value instanceof AnnotationEditor) || !value.annotationElementId || !value.serialize()) {\n        continue;\n      }\n      ids.push(value.annotationElementId);\n    }\n    return _classPrivateFieldLooseBase(this, _modifiedIds)[_modifiedIds] = {\n      ids: new Set(ids),\n      hash: ids.join(\",\")\n    };\n  }\n}\nfunction _setModified2() {\n  if (!_classPrivateFieldLooseBase(this, _modified)[_modified]) {\n    _classPrivateFieldLooseBase(this, _modified)[_modified] = true;\n    if (typeof this.onSetModified === \"function\") {\n      this.onSetModified();\n    }\n  }\n}\nvar _serializable = /*#__PURE__*/_classPrivateFieldLooseKey(\"serializable\");\nclass PrintAnnotationStorage extends AnnotationStorage {\n  constructor(parent) {\n    super();\n    Object.defineProperty(this, _serializable, {\n      writable: true,\n      value: void 0\n    });\n    const _parent$serializable = parent.serializable,\n      map = _parent$serializable.map,\n      hash = _parent$serializable.hash,\n      transfer = _parent$serializable.transfer;\n    const clone = structuredClone(map, transfer ? {\n      transfer\n    } : null);\n    _classPrivateFieldLooseBase(this, _serializable)[_serializable] = {\n      map: clone,\n      hash,\n      transfer\n    };\n  }\n  get print() {\n    unreachable(\"Should not call PrintAnnotationStorage.print\");\n  }\n  get serializable() {\n    return _classPrivateFieldLooseBase(this, _serializable)[_serializable];\n  }\n  get modifiedIds() {\n    return shadow(this, \"modifiedIds\", {\n      ids: new Set(),\n      hash: \"\"\n    });\n  }\n}\n; // ./src/display/font_loader.js\nvar _systemFonts = /*#__PURE__*/_classPrivateFieldLooseKey(\"systemFonts\");\nclass FontLoader {\n  constructor(_ref41) {\n    let _ref41$ownerDocument = _ref41.ownerDocument,\n      ownerDocument = _ref41$ownerDocument === void 0 ? globalThis.document : _ref41$ownerDocument,\n      _ref41$styleElement = _ref41.styleElement,\n      styleElement = _ref41$styleElement === void 0 ? null : _ref41$styleElement;\n    Object.defineProperty(this, _systemFonts, {\n      writable: true,\n      value: new Set()\n    });\n    this._document = ownerDocument;\n    this.nativeFontFaces = new Set();\n    this.styleElement = null;\n    this.loadingRequests = [];\n    this.loadTestFontId = 0;\n  }\n  addNativeFontFace(nativeFontFace) {\n    this.nativeFontFaces.add(nativeFontFace);\n    this._document.fonts.add(nativeFontFace);\n  }\n  removeNativeFontFace(nativeFontFace) {\n    this.nativeFontFaces.delete(nativeFontFace);\n    this._document.fonts.delete(nativeFontFace);\n  }\n  insertRule(rule) {\n    if (!this.styleElement) {\n      this.styleElement = this._document.createElement(\"style\");\n      this._document.documentElement.getElementsByTagName(\"head\")[0].append(this.styleElement);\n    }\n    const styleSheet = this.styleElement.sheet;\n    styleSheet.insertRule(rule, styleSheet.cssRules.length);\n  }\n  clear() {\n    for (const nativeFontFace of this.nativeFontFaces) {\n      this._document.fonts.delete(nativeFontFace);\n    }\n    this.nativeFontFaces.clear();\n    _classPrivateFieldLooseBase(this, _systemFonts)[_systemFonts].clear();\n    if (this.styleElement) {\n      this.styleElement.remove();\n      this.styleElement = null;\n    }\n  }\n  async loadSystemFont(_ref42) {\n    let info = _ref42.systemFontInfo,\n      _inspectFont = _ref42._inspectFont;\n    if (!info || _classPrivateFieldLooseBase(this, _systemFonts)[_systemFonts].has(info.loadedName)) {\n      return;\n    }\n    assert(!this.disableFontFace, \"loadSystemFont shouldn't be called when `disableFontFace` is set.\");\n    if (this.isFontLoadingAPISupported) {\n      const loadedName = info.loadedName,\n        src = info.src,\n        style = info.style;\n      const fontFace = new FontFace(loadedName, src, style);\n      this.addNativeFontFace(fontFace);\n      try {\n        await fontFace.load();\n        _classPrivateFieldLooseBase(this, _systemFonts)[_systemFonts].add(loadedName);\n        _inspectFont === null || _inspectFont === void 0 ? void 0 : _inspectFont(info);\n      } catch {\n        warn(`Cannot load system font: ${info.baseFontName}, installing it could help to improve PDF rendering.`);\n        this.removeNativeFontFace(fontFace);\n      }\n      return;\n    }\n    unreachable(\"Not implemented: loadSystemFont without the Font Loading API.\");\n  }\n  async bind(font) {\n    if (font.attached || font.missingFile && !font.systemFontInfo) {\n      return;\n    }\n    font.attached = true;\n    if (font.systemFontInfo) {\n      await this.loadSystemFont(font);\n      return;\n    }\n    if (this.isFontLoadingAPISupported) {\n      const nativeFontFace = font.createNativeFontFace();\n      if (nativeFontFace) {\n        this.addNativeFontFace(nativeFontFace);\n        try {\n          await nativeFontFace.loaded;\n        } catch (ex) {\n          warn(`Failed to load font '${nativeFontFace.family}': '${ex}'.`);\n          font.disableFontFace = true;\n          throw ex;\n        }\n      }\n      return;\n    }\n    const rule = font.createFontFaceRule();\n    if (rule) {\n      this.insertRule(rule);\n      if (this.isSyncFontLoadingSupported) {\n        return;\n      }\n      await new Promise(resolve => {\n        const request = this._queueLoadingCallback(resolve);\n        this._prepareFontLoadEvent(font, request);\n      });\n    }\n  }\n  get isFontLoadingAPISupported() {\n    var _this$_document;\n    const hasFonts = !!((_this$_document = this._document) !== null && _this$_document !== void 0 && _this$_document.fonts);\n    return shadow(this, \"isFontLoadingAPISupported\", hasFonts);\n  }\n  get isSyncFontLoadingSupported() {\n    var _navigator3;\n    let supported = false;\n    if (isNodeJS) {\n      supported = true;\n    } else if (typeof navigator !== \"undefined\" && typeof ((_navigator3 = navigator) === null || _navigator3 === void 0 ? void 0 : _navigator3.userAgent) === \"string\" && /Mozilla\\/5.0.*?rv:\\d+.*? Gecko/.test(navigator.userAgent)) {\n      supported = true;\n    }\n    return shadow(this, \"isSyncFontLoadingSupported\", supported);\n  }\n  _queueLoadingCallback(callback) {\n    function completeRequest() {\n      assert(!request.done, \"completeRequest() cannot be called twice.\");\n      request.done = true;\n      while (loadingRequests.length > 0 && loadingRequests[0].done) {\n        const otherRequest = loadingRequests.shift();\n        setTimeout(otherRequest.callback, 0);\n      }\n    }\n    const loadingRequests = this.loadingRequests;\n    const request = {\n      done: false,\n      complete: completeRequest,\n      callback\n    };\n    loadingRequests.push(request);\n    return request;\n  }\n  get _loadTestFont() {\n    const testFont = atob(\"T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQA\" + \"FQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAA\" + \"ALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgA\" + \"AAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1\" + \"AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD\" + \"6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACM\" + \"AooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4D\" + \"IP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAA\" + \"AAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUA\" + \"AQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgAB\" + \"AAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABY\" + \"AAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAA\" + \"AC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAA\" + \"AAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQAC\" + \"AQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3\" + \"Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTj\" + \"FQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==\");\n    return shadow(this, \"_loadTestFont\", testFont);\n  }\n  _prepareFontLoadEvent(font, request) {\n    function int32(data, offset) {\n      return data.charCodeAt(offset) << 24 | data.charCodeAt(offset + 1) << 16 | data.charCodeAt(offset + 2) << 8 | data.charCodeAt(offset + 3) & 0xff;\n    }\n    function spliceString(s, offset, remove, insert) {\n      const chunk1 = s.substring(0, offset);\n      const chunk2 = s.substring(offset + remove);\n      return chunk1 + insert + chunk2;\n    }\n    let i, ii;\n    const canvas = this._document.createElement(\"canvas\");\n    canvas.width = 1;\n    canvas.height = 1;\n    const ctx = canvas.getContext(\"2d\");\n    let called = 0;\n    function isFontReady(name, callback) {\n      if (++called > 30) {\n        warn(\"Load test font never loaded.\");\n        callback();\n        return;\n      }\n      ctx.font = \"30px \" + name;\n      ctx.fillText(\".\", 0, 20);\n      const imageData = ctx.getImageData(0, 0, 1, 1);\n      if (imageData.data[3] > 0) {\n        callback();\n        return;\n      }\n      setTimeout(isFontReady.bind(null, name, callback));\n    }\n    const loadTestFontId = `lt${Date.now()}${this.loadTestFontId++}`;\n    let data = this._loadTestFont;\n    const COMMENT_OFFSET = 976;\n    data = spliceString(data, COMMENT_OFFSET, loadTestFontId.length, loadTestFontId);\n    const CFF_CHECKSUM_OFFSET = 16;\n    const XXXX_VALUE = 0x58585858;\n    let checksum = int32(data, CFF_CHECKSUM_OFFSET);\n    for (i = 0, ii = loadTestFontId.length - 3; i < ii; i += 4) {\n      checksum = checksum - XXXX_VALUE + int32(loadTestFontId, i) | 0;\n    }\n    if (i < loadTestFontId.length) {\n      checksum = checksum - XXXX_VALUE + int32(loadTestFontId + \"XXX\", i) | 0;\n    }\n    data = spliceString(data, CFF_CHECKSUM_OFFSET, 4, string32(checksum));\n    const url = `url(data:font/opentype;base64,${btoa(data)});`;\n    const rule = `@font-face {font-family:\"${loadTestFontId}\";src:${url}}`;\n    this.insertRule(rule);\n    const div = this._document.createElement(\"div\");\n    div.style.visibility = \"hidden\";\n    div.style.width = div.style.height = \"10px\";\n    div.style.position = \"absolute\";\n    div.style.top = div.style.left = \"0px\";\n    for (const name of [font.loadedName, loadTestFontId]) {\n      const span = this._document.createElement(\"span\");\n      span.textContent = \"Hi\";\n      span.style.fontFamily = name;\n      div.append(span);\n    }\n    this._document.body.append(div);\n    isFontReady(loadTestFontId, () => {\n      div.remove();\n      request.complete();\n    });\n  }\n}\nclass FontFaceObject {\n  constructor(translatedData, _ref43) {\n    let _ref43$disableFontFac = _ref43.disableFontFace,\n      disableFontFace = _ref43$disableFontFac === void 0 ? false : _ref43$disableFontFac,\n      _ref43$inspectFont = _ref43.inspectFont,\n      inspectFont = _ref43$inspectFont === void 0 ? null : _ref43$inspectFont;\n    this.compiledGlyphs = Object.create(null);\n    for (const i in translatedData) {\n      this[i] = translatedData[i];\n    }\n    this.disableFontFace = disableFontFace === true;\n    this._inspectFont = inspectFont;\n  }\n  createNativeFontFace() {\n    var _this$_inspectFont;\n    if (!this.data || this.disableFontFace) {\n      return null;\n    }\n    let nativeFontFace;\n    if (!this.cssFontInfo) {\n      nativeFontFace = new FontFace(this.loadedName, this.data, {});\n    } else {\n      const css = {\n        weight: this.cssFontInfo.fontWeight\n      };\n      if (this.cssFontInfo.italicAngle) {\n        css.style = `oblique ${this.cssFontInfo.italicAngle}deg`;\n      }\n      nativeFontFace = new FontFace(this.cssFontInfo.fontFamily, this.data, css);\n    }\n    (_this$_inspectFont = this._inspectFont) === null || _this$_inspectFont === void 0 ? void 0 : _this$_inspectFont.call(this, this);\n    return nativeFontFace;\n  }\n  createFontFaceRule() {\n    var _this$_inspectFont2;\n    if (!this.data || this.disableFontFace) {\n      return null;\n    }\n    const url = `url(data:${this.mimetype};base64,${toBase64Util(this.data)});`;\n    let rule;\n    if (!this.cssFontInfo) {\n      rule = `@font-face {font-family:\"${this.loadedName}\";src:${url}}`;\n    } else {\n      let css = `font-weight: ${this.cssFontInfo.fontWeight};`;\n      if (this.cssFontInfo.italicAngle) {\n        css += `font-style: oblique ${this.cssFontInfo.italicAngle}deg;`;\n      }\n      rule = `@font-face {font-family:\"${this.cssFontInfo.fontFamily}\";${css}src:${url}}`;\n    }\n    (_this$_inspectFont2 = this._inspectFont) === null || _this$_inspectFont2 === void 0 ? void 0 : _this$_inspectFont2.call(this, this, url);\n    return rule;\n  }\n  getPathGenerator(objs, character) {\n    if (this.compiledGlyphs[character] !== undefined) {\n      return this.compiledGlyphs[character];\n    }\n    let cmds;\n    try {\n      cmds = objs.get(this.loadedName + \"_path_\" + character);\n    } catch (ex) {\n      warn(`getPathGenerator - ignoring character: \"${ex}\".`);\n    }\n    if (!Array.isArray(cmds) || cmds.length === 0) {\n      return this.compiledGlyphs[character] = function (c, size) {};\n    }\n    const commands = [];\n    for (let i = 0, ii = cmds.length; i < ii;) {\n      switch (cmds[i++]) {\n        case FontRenderOps.BEZIER_CURVE_TO:\n          {\n            const _cmds$slice = cmds.slice(i, i + 6),\n              _cmds$slice2 = _slicedToArray(_cmds$slice, 6),\n              a = _cmds$slice2[0],\n              b = _cmds$slice2[1],\n              c = _cmds$slice2[2],\n              d = _cmds$slice2[3],\n              e = _cmds$slice2[4],\n              f = _cmds$slice2[5];\n            commands.push(ctx => ctx.bezierCurveTo(a, b, c, d, e, f));\n            i += 6;\n          }\n          break;\n        case FontRenderOps.MOVE_TO:\n          {\n            const _cmds$slice3 = cmds.slice(i, i + 2),\n              _cmds$slice4 = _slicedToArray(_cmds$slice3, 2),\n              a = _cmds$slice4[0],\n              b = _cmds$slice4[1];\n            commands.push(ctx => ctx.moveTo(a, b));\n            i += 2;\n          }\n          break;\n        case FontRenderOps.LINE_TO:\n          {\n            const _cmds$slice5 = cmds.slice(i, i + 2),\n              _cmds$slice6 = _slicedToArray(_cmds$slice5, 2),\n              a = _cmds$slice6[0],\n              b = _cmds$slice6[1];\n            commands.push(ctx => ctx.lineTo(a, b));\n            i += 2;\n          }\n          break;\n        case FontRenderOps.QUADRATIC_CURVE_TO:\n          {\n            const _cmds$slice7 = cmds.slice(i, i + 4),\n              _cmds$slice8 = _slicedToArray(_cmds$slice7, 4),\n              a = _cmds$slice8[0],\n              b = _cmds$slice8[1],\n              c = _cmds$slice8[2],\n              d = _cmds$slice8[3];\n            commands.push(ctx => ctx.quadraticCurveTo(a, b, c, d));\n            i += 4;\n          }\n          break;\n        case FontRenderOps.RESTORE:\n          commands.push(ctx => ctx.restore());\n          break;\n        case FontRenderOps.SAVE:\n          commands.push(ctx => ctx.save());\n          break;\n        case FontRenderOps.SCALE:\n          assert(commands.length === 2, \"Scale command is only valid at the third position.\");\n          break;\n        case FontRenderOps.TRANSFORM:\n          {\n            const _cmds$slice9 = cmds.slice(i, i + 6),\n              _cmds$slice0 = _slicedToArray(_cmds$slice9, 6),\n              a = _cmds$slice0[0],\n              b = _cmds$slice0[1],\n              c = _cmds$slice0[2],\n              d = _cmds$slice0[3],\n              e = _cmds$slice0[4],\n              f = _cmds$slice0[5];\n            commands.push(ctx => ctx.transform(a, b, c, d, e, f));\n            i += 6;\n          }\n          break;\n        case FontRenderOps.TRANSLATE:\n          {\n            const _cmds$slice1 = cmds.slice(i, i + 2),\n              _cmds$slice10 = _slicedToArray(_cmds$slice1, 2),\n              a = _cmds$slice10[0],\n              b = _cmds$slice10[1];\n            commands.push(ctx => ctx.translate(a, b));\n            i += 2;\n          }\n          break;\n      }\n    }\n    return this.compiledGlyphs[character] = function glyphDrawer(ctx, size) {\n      commands[0](ctx);\n      commands[1](ctx);\n      ctx.scale(size, -size);\n      for (let i = 2, ii = commands.length; i < ii; i++) {\n        commands[i](ctx);\n      }\n    };\n  }\n}\n; // ./src/display/canvas_factory.js\nvar _enableHWA = /*#__PURE__*/_classPrivateFieldLooseKey(\"enableHWA\");\nclass BaseCanvasFactory {\n  constructor(_ref44) {\n    let _ref44$enableHWA = _ref44.enableHWA,\n      enableHWA = _ref44$enableHWA === void 0 ? false : _ref44$enableHWA;\n    Object.defineProperty(this, _enableHWA, {\n      writable: true,\n      value: false\n    });\n    _classPrivateFieldLooseBase(this, _enableHWA)[_enableHWA] = enableHWA;\n  }\n  create(width, height) {\n    if (width <= 0 || height <= 0) {\n      throw new Error(\"Invalid canvas size\");\n    }\n    const canvas = this._createCanvas(width, height);\n    return {\n      canvas,\n      context: canvas.getContext(\"2d\", {\n        willReadFrequently: !_classPrivateFieldLooseBase(this, _enableHWA)[_enableHWA]\n      })\n    };\n  }\n  reset(canvasAndContext, width, height) {\n    if (!canvasAndContext.canvas) {\n      throw new Error(\"Canvas is not specified\");\n    }\n    if (width <= 0 || height <= 0) {\n      throw new Error(\"Invalid canvas size\");\n    }\n    canvasAndContext.canvas.width = width;\n    canvasAndContext.canvas.height = height;\n  }\n  destroy(canvasAndContext) {\n    if (!canvasAndContext.canvas) {\n      throw new Error(\"Canvas is not specified\");\n    }\n    canvasAndContext.canvas.width = 0;\n    canvasAndContext.canvas.height = 0;\n    canvasAndContext.canvas = null;\n    canvasAndContext.context = null;\n  }\n  _createCanvas(width, height) {\n    unreachable(\"Abstract method `_createCanvas` called.\");\n  }\n}\nclass DOMCanvasFactory extends BaseCanvasFactory {\n  constructor(_ref45) {\n    let _ref45$ownerDocument = _ref45.ownerDocument,\n      ownerDocument = _ref45$ownerDocument === void 0 ? globalThis.document : _ref45$ownerDocument,\n      _ref45$enableHWA = _ref45.enableHWA,\n      enableHWA = _ref45$enableHWA === void 0 ? false : _ref45$enableHWA;\n    super({\n      enableHWA\n    });\n    this._document = ownerDocument;\n  }\n  _createCanvas(width, height) {\n    const canvas = this._document.createElement(\"canvas\");\n    canvas.width = width;\n    canvas.height = height;\n    return canvas;\n  }\n}\n; // ./src/display/cmap_reader_factory.js\n\nclass BaseCMapReaderFactory {\n  constructor(_ref46) {\n    let _ref46$baseUrl = _ref46.baseUrl,\n      baseUrl = _ref46$baseUrl === void 0 ? null : _ref46$baseUrl,\n      _ref46$isCompressed = _ref46.isCompressed,\n      isCompressed = _ref46$isCompressed === void 0 ? true : _ref46$isCompressed;\n    this.baseUrl = baseUrl;\n    this.isCompressed = isCompressed;\n  }\n  async fetch(_ref47) {\n    let name = _ref47.name;\n    if (!this.baseUrl) {\n      throw new Error(\"Ensure that the `cMapUrl` and `cMapPacked` API parameters are provided.\");\n    }\n    if (!name) {\n      throw new Error(\"CMap name must be specified.\");\n    }\n    const url = this.baseUrl + name + (this.isCompressed ? \".bcmap\" : \"\");\n    return this._fetch(url).then(cMapData => ({\n      cMapData,\n      isCompressed: this.isCompressed\n    })).catch(reason => {\n      throw new Error(`Unable to load ${this.isCompressed ? \"binary \" : \"\"}CMap at: ${url}`);\n    });\n  }\n  async _fetch(url) {\n    unreachable(\"Abstract method `_fetch` called.\");\n  }\n}\nclass DOMCMapReaderFactory extends BaseCMapReaderFactory {\n  async _fetch(url) {\n    const data = await fetchData(url, this.isCompressed ? \"arraybuffer\" : \"text\");\n    return data instanceof ArrayBuffer ? new Uint8Array(data) : stringToBytes(data);\n  }\n}\n; // ./src/display/filter_factory.js\n\nclass BaseFilterFactory {\n  addFilter(maps) {\n    return \"none\";\n  }\n  addHCMFilter(fgColor, bgColor) {\n    return \"none\";\n  }\n  addAlphaFilter(map) {\n    return \"none\";\n  }\n  addLuminosityFilter(map) {\n    return \"none\";\n  }\n  addHighlightHCMFilter(filterName, fgColor, bgColor, newFgColor, newBgColor) {\n    return \"none\";\n  }\n  destroy() {\n    let keepHCM = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  }\n}\nvar _baseUrl = /*#__PURE__*/_classPrivateFieldLooseKey(\"baseUrl\");\nvar _cache2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"_cache\");\nvar _defs = /*#__PURE__*/_classPrivateFieldLooseKey(\"_defs\");\nvar _docId = /*#__PURE__*/_classPrivateFieldLooseKey(\"docId\");\nvar _document2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"document\");\nvar _hcmCache = /*#__PURE__*/_classPrivateFieldLooseKey(\"_hcmCache\");\nvar _id3 = /*#__PURE__*/_classPrivateFieldLooseKey(\"id\");\nvar _cache3 = /*#__PURE__*/_classPrivateFieldLooseKey(\"cache\");\nvar _hcmCache2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"hcmCache\");\nvar _defs2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"defs\");\nvar _createTables = /*#__PURE__*/_classPrivateFieldLooseKey(\"createTables\");\nvar _createUrl = /*#__PURE__*/_classPrivateFieldLooseKey(\"createUrl\");\nvar _addLuminosityConversion = /*#__PURE__*/_classPrivateFieldLooseKey(\"addLuminosityConversion\");\nvar _addGrayConversion = /*#__PURE__*/_classPrivateFieldLooseKey(\"addGrayConversion\");\nvar _createFilter = /*#__PURE__*/_classPrivateFieldLooseKey(\"createFilter\");\nvar _appendFeFunc = /*#__PURE__*/_classPrivateFieldLooseKey(\"appendFeFunc\");\nvar _addTransferMapConversion = /*#__PURE__*/_classPrivateFieldLooseKey(\"addTransferMapConversion\");\nvar _addTransferMapAlphaConversion = /*#__PURE__*/_classPrivateFieldLooseKey(\"addTransferMapAlphaConversion\");\nvar _getRGB = /*#__PURE__*/_classPrivateFieldLooseKey(\"getRGB\");\nclass DOMFilterFactory extends BaseFilterFactory {\n  constructor(_ref48) {\n    let docId = _ref48.docId,\n      _ref48$ownerDocument = _ref48.ownerDocument,\n      ownerDocument = _ref48$ownerDocument === void 0 ? globalThis.document : _ref48$ownerDocument;\n    super();\n    Object.defineProperty(this, _getRGB, {\n      value: _getRGB2\n    });\n    Object.defineProperty(this, _addTransferMapAlphaConversion, {\n      value: _addTransferMapAlphaConversion2\n    });\n    Object.defineProperty(this, _addTransferMapConversion, {\n      value: _addTransferMapConversion2\n    });\n    Object.defineProperty(this, _appendFeFunc, {\n      value: _appendFeFunc2\n    });\n    Object.defineProperty(this, _createFilter, {\n      value: _createFilter2\n    });\n    Object.defineProperty(this, _addGrayConversion, {\n      value: _addGrayConversion2\n    });\n    Object.defineProperty(this, _addLuminosityConversion, {\n      value: _addLuminosityConversion2\n    });\n    Object.defineProperty(this, _createUrl, {\n      value: _createUrl2\n    });\n    Object.defineProperty(this, _createTables, {\n      value: _createTables2\n    });\n    Object.defineProperty(this, _defs2, {\n      get: _get_defs,\n      set: void 0\n    });\n    Object.defineProperty(this, _hcmCache2, {\n      get: _get_hcmCache,\n      set: void 0\n    });\n    Object.defineProperty(this, _cache3, {\n      get: _get_cache,\n      set: void 0\n    });\n    Object.defineProperty(this, _baseUrl, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _cache2, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _defs, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _docId, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _document2, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _hcmCache, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _id3, {\n      writable: true,\n      value: 0\n    });\n    _classPrivateFieldLooseBase(this, _docId)[_docId] = docId;\n    _classPrivateFieldLooseBase(this, _document2)[_document2] = ownerDocument;\n  }\n  addFilter(maps) {\n    if (!maps) {\n      return \"none\";\n    }\n    let value = _classPrivateFieldLooseBase(this, _cache3)[_cache3].get(maps);\n    if (value) {\n      return value;\n    }\n    const _classPrivateFieldLoo49 = _classPrivateFieldLooseBase(this, _createTables)[_createTables](maps),\n      _classPrivateFieldLoo50 = _slicedToArray(_classPrivateFieldLoo49, 3),\n      tableR = _classPrivateFieldLoo50[0],\n      tableG = _classPrivateFieldLoo50[1],\n      tableB = _classPrivateFieldLoo50[2];\n    const key = maps.length === 1 ? tableR : `${tableR}${tableG}${tableB}`;\n    value = _classPrivateFieldLooseBase(this, _cache3)[_cache3].get(key);\n    if (value) {\n      _classPrivateFieldLooseBase(this, _cache3)[_cache3].set(maps, value);\n      return value;\n    }\n    const id = `g_${_classPrivateFieldLooseBase(this, _docId)[_docId]}_transfer_map_${_classPrivateFieldLooseBase(this, _id3)[_id3]++}`;\n    const url = _classPrivateFieldLooseBase(this, _createUrl)[_createUrl](id);\n    _classPrivateFieldLooseBase(this, _cache3)[_cache3].set(maps, url);\n    _classPrivateFieldLooseBase(this, _cache3)[_cache3].set(key, url);\n    const filter = _classPrivateFieldLooseBase(this, _createFilter)[_createFilter](id);\n    _classPrivateFieldLooseBase(this, _addTransferMapConversion)[_addTransferMapConversion](tableR, tableG, tableB, filter);\n    return url;\n  }\n  addHCMFilter(fgColor, bgColor) {\n    var _info;\n    const key = `${fgColor}-${bgColor}`;\n    const filterName = \"base\";\n    let info = _classPrivateFieldLooseBase(this, _hcmCache2)[_hcmCache2].get(filterName);\n    if (((_info = info) === null || _info === void 0 ? void 0 : _info.key) === key) {\n      return info.url;\n    }\n    if (info) {\n      var _info$filter;\n      (_info$filter = info.filter) === null || _info$filter === void 0 ? void 0 : _info$filter.remove();\n      info.key = key;\n      info.url = \"none\";\n      info.filter = null;\n    } else {\n      info = {\n        key,\n        url: \"none\",\n        filter: null\n      };\n      _classPrivateFieldLooseBase(this, _hcmCache2)[_hcmCache2].set(filterName, info);\n    }\n    if (!fgColor || !bgColor) {\n      return info.url;\n    }\n    const fgRGB = _classPrivateFieldLooseBase(this, _getRGB)[_getRGB](fgColor);\n    fgColor = Util.makeHexColor(...fgRGB);\n    const bgRGB = _classPrivateFieldLooseBase(this, _getRGB)[_getRGB](bgColor);\n    bgColor = Util.makeHexColor(...bgRGB);\n    _classPrivateFieldLooseBase(this, _defs2)[_defs2].style.color = \"\";\n    if (fgColor === \"#000000\" && bgColor === \"#ffffff\" || fgColor === bgColor) {\n      return info.url;\n    }\n    const map = new Array(256);\n    for (let i = 0; i <= 255; i++) {\n      const x = i / 255;\n      map[i] = x <= 0.03928 ? x / 12.92 : ((x + 0.055) / 1.055) ** 2.4;\n    }\n    const table = map.join(\",\");\n    const id = `g_${_classPrivateFieldLooseBase(this, _docId)[_docId]}_hcm_filter`;\n    const filter = info.filter = _classPrivateFieldLooseBase(this, _createFilter)[_createFilter](id);\n    _classPrivateFieldLooseBase(this, _addTransferMapConversion)[_addTransferMapConversion](table, table, table, filter);\n    _classPrivateFieldLooseBase(this, _addGrayConversion)[_addGrayConversion](filter);\n    const getSteps = (c, n) => {\n      const start = fgRGB[c] / 255;\n      const end = bgRGB[c] / 255;\n      const arr = new Array(n + 1);\n      for (let i = 0; i <= n; i++) {\n        arr[i] = start + i / n * (end - start);\n      }\n      return arr.join(\",\");\n    };\n    _classPrivateFieldLooseBase(this, _addTransferMapConversion)[_addTransferMapConversion](getSteps(0, 5), getSteps(1, 5), getSteps(2, 5), filter);\n    info.url = _classPrivateFieldLooseBase(this, _createUrl)[_createUrl](id);\n    return info.url;\n  }\n  addAlphaFilter(map) {\n    let value = _classPrivateFieldLooseBase(this, _cache3)[_cache3].get(map);\n    if (value) {\n      return value;\n    }\n    const _classPrivateFieldLoo51 = _classPrivateFieldLooseBase(this, _createTables)[_createTables]([map]),\n      _classPrivateFieldLoo52 = _slicedToArray(_classPrivateFieldLoo51, 1),\n      tableA = _classPrivateFieldLoo52[0];\n    const key = `alpha_${tableA}`;\n    value = _classPrivateFieldLooseBase(this, _cache3)[_cache3].get(key);\n    if (value) {\n      _classPrivateFieldLooseBase(this, _cache3)[_cache3].set(map, value);\n      return value;\n    }\n    const id = `g_${_classPrivateFieldLooseBase(this, _docId)[_docId]}_alpha_map_${_classPrivateFieldLooseBase(this, _id3)[_id3]++}`;\n    const url = _classPrivateFieldLooseBase(this, _createUrl)[_createUrl](id);\n    _classPrivateFieldLooseBase(this, _cache3)[_cache3].set(map, url);\n    _classPrivateFieldLooseBase(this, _cache3)[_cache3].set(key, url);\n    const filter = _classPrivateFieldLooseBase(this, _createFilter)[_createFilter](id);\n    _classPrivateFieldLooseBase(this, _addTransferMapAlphaConversion)[_addTransferMapAlphaConversion](tableA, filter);\n    return url;\n  }\n  addLuminosityFilter(map) {\n    let value = _classPrivateFieldLooseBase(this, _cache3)[_cache3].get(map || \"luminosity\");\n    if (value) {\n      return value;\n    }\n    let tableA, key;\n    if (map) {\n      var _classPrivateFieldLoo53 = _classPrivateFieldLooseBase(this, _createTables)[_createTables]([map]);\n      var _classPrivateFieldLoo54 = _slicedToArray(_classPrivateFieldLoo53, 1);\n      tableA = _classPrivateFieldLoo54[0];\n      key = `luminosity_${tableA}`;\n    } else {\n      key = \"luminosity\";\n    }\n    value = _classPrivateFieldLooseBase(this, _cache3)[_cache3].get(key);\n    if (value) {\n      _classPrivateFieldLooseBase(this, _cache3)[_cache3].set(map, value);\n      return value;\n    }\n    const id = `g_${_classPrivateFieldLooseBase(this, _docId)[_docId]}_luminosity_map_${_classPrivateFieldLooseBase(this, _id3)[_id3]++}`;\n    const url = _classPrivateFieldLooseBase(this, _createUrl)[_createUrl](id);\n    _classPrivateFieldLooseBase(this, _cache3)[_cache3].set(map, url);\n    _classPrivateFieldLooseBase(this, _cache3)[_cache3].set(key, url);\n    const filter = _classPrivateFieldLooseBase(this, _createFilter)[_createFilter](id);\n    _classPrivateFieldLooseBase(this, _addLuminosityConversion)[_addLuminosityConversion](filter);\n    if (map) {\n      _classPrivateFieldLooseBase(this, _addTransferMapAlphaConversion)[_addTransferMapAlphaConversion](tableA, filter);\n    }\n    return url;\n  }\n  addHighlightHCMFilter(filterName, fgColor, bgColor, newFgColor, newBgColor) {\n    var _info2;\n    const key = `${fgColor}-${bgColor}-${newFgColor}-${newBgColor}`;\n    let info = _classPrivateFieldLooseBase(this, _hcmCache2)[_hcmCache2].get(filterName);\n    if (((_info2 = info) === null || _info2 === void 0 ? void 0 : _info2.key) === key) {\n      return info.url;\n    }\n    if (info) {\n      var _info$filter2;\n      (_info$filter2 = info.filter) === null || _info$filter2 === void 0 ? void 0 : _info$filter2.remove();\n      info.key = key;\n      info.url = \"none\";\n      info.filter = null;\n    } else {\n      info = {\n        key,\n        url: \"none\",\n        filter: null\n      };\n      _classPrivateFieldLooseBase(this, _hcmCache2)[_hcmCache2].set(filterName, info);\n    }\n    if (!fgColor || !bgColor) {\n      return info.url;\n    }\n    const _map = [fgColor, bgColor].map(_classPrivateFieldLooseBase(this, _getRGB)[_getRGB].bind(this)),\n      _map2 = _slicedToArray(_map, 2),\n      fgRGB = _map2[0],\n      bgRGB = _map2[1];\n    let fgGray = Math.round(0.2126 * fgRGB[0] + 0.7152 * fgRGB[1] + 0.0722 * fgRGB[2]);\n    let bgGray = Math.round(0.2126 * bgRGB[0] + 0.7152 * bgRGB[1] + 0.0722 * bgRGB[2]);\n    let _map3 = [newFgColor, newBgColor].map(_classPrivateFieldLooseBase(this, _getRGB)[_getRGB].bind(this)),\n      _map4 = _slicedToArray(_map3, 2),\n      newFgRGB = _map4[0],\n      newBgRGB = _map4[1];\n    if (bgGray < fgGray) {\n      var _ref49 = [bgGray, fgGray, newBgRGB, newFgRGB];\n      fgGray = _ref49[0];\n      bgGray = _ref49[1];\n      newFgRGB = _ref49[2];\n      newBgRGB = _ref49[3];\n    }\n    _classPrivateFieldLooseBase(this, _defs2)[_defs2].style.color = \"\";\n    const getSteps = (fg, bg, n) => {\n      const arr = new Array(256);\n      const step = (bgGray - fgGray) / n;\n      const newStart = fg / 255;\n      const newStep = (bg - fg) / (255 * n);\n      let prev = 0;\n      for (let i = 0; i <= n; i++) {\n        const k = Math.round(fgGray + i * step);\n        const value = newStart + i * newStep;\n        for (let j = prev; j <= k; j++) {\n          arr[j] = value;\n        }\n        prev = k + 1;\n      }\n      for (let i = prev; i < 256; i++) {\n        arr[i] = arr[prev - 1];\n      }\n      return arr.join(\",\");\n    };\n    const id = `g_${_classPrivateFieldLooseBase(this, _docId)[_docId]}_hcm_${filterName}_filter`;\n    const filter = info.filter = _classPrivateFieldLooseBase(this, _createFilter)[_createFilter](id);\n    _classPrivateFieldLooseBase(this, _addGrayConversion)[_addGrayConversion](filter);\n    _classPrivateFieldLooseBase(this, _addTransferMapConversion)[_addTransferMapConversion](getSteps(newFgRGB[0], newBgRGB[0], 5), getSteps(newFgRGB[1], newBgRGB[1], 5), getSteps(newFgRGB[2], newBgRGB[2], 5), filter);\n    info.url = _classPrivateFieldLooseBase(this, _createUrl)[_createUrl](id);\n    return info.url;\n  }\n  destroy() {\n    let keepHCM = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (keepHCM && _classPrivateFieldLooseBase(this, _hcmCache2)[_hcmCache2].size !== 0) {\n      return;\n    }\n    if (_classPrivateFieldLooseBase(this, _defs)[_defs]) {\n      _classPrivateFieldLooseBase(this, _defs)[_defs].parentNode.parentNode.remove();\n      _classPrivateFieldLooseBase(this, _defs)[_defs] = null;\n    }\n    if (_classPrivateFieldLooseBase(this, _cache2)[_cache2]) {\n      _classPrivateFieldLooseBase(this, _cache2)[_cache2].clear();\n      _classPrivateFieldLooseBase(this, _cache2)[_cache2] = null;\n    }\n    _classPrivateFieldLooseBase(this, _id3)[_id3] = 0;\n  }\n}\nfunction _get_cache() {\n  var _classPrivateFieldLoo140;\n  return (_classPrivateFieldLoo140 = _classPrivateFieldLooseBase(this, _cache2))[_cache2] || (_classPrivateFieldLoo140[_cache2] = new Map());\n}\nfunction _get_hcmCache() {\n  var _classPrivateFieldLoo141;\n  return (_classPrivateFieldLoo141 = _classPrivateFieldLooseBase(this, _hcmCache))[_hcmCache] || (_classPrivateFieldLoo141[_hcmCache] = new Map());\n}\nfunction _get_defs() {\n  if (!_classPrivateFieldLooseBase(this, _defs)[_defs]) {\n    const div = _classPrivateFieldLooseBase(this, _document2)[_document2].createElement(\"div\");\n    const style = div.style;\n    style.visibility = \"hidden\";\n    style.contain = \"strict\";\n    style.width = style.height = 0;\n    style.position = \"absolute\";\n    style.top = style.left = 0;\n    style.zIndex = -1;\n    const svg = _classPrivateFieldLooseBase(this, _document2)[_document2].createElementNS(SVG_NS, \"svg\");\n    svg.setAttribute(\"width\", 0);\n    svg.setAttribute(\"height\", 0);\n    _classPrivateFieldLooseBase(this, _defs)[_defs] = _classPrivateFieldLooseBase(this, _document2)[_document2].createElementNS(SVG_NS, \"defs\");\n    div.append(svg);\n    svg.append(_classPrivateFieldLooseBase(this, _defs)[_defs]);\n    _classPrivateFieldLooseBase(this, _document2)[_document2].body.append(div);\n  }\n  return _classPrivateFieldLooseBase(this, _defs)[_defs];\n}\nfunction _createTables2(maps) {\n  if (maps.length === 1) {\n    const mapR = maps[0];\n    const buffer = new Array(256);\n    for (let i = 0; i < 256; i++) {\n      buffer[i] = mapR[i] / 255;\n    }\n    const table = buffer.join(\",\");\n    return [table, table, table];\n  }\n  const _maps = _slicedToArray(maps, 3),\n    mapR = _maps[0],\n    mapG = _maps[1],\n    mapB = _maps[2];\n  const bufferR = new Array(256);\n  const bufferG = new Array(256);\n  const bufferB = new Array(256);\n  for (let i = 0; i < 256; i++) {\n    bufferR[i] = mapR[i] / 255;\n    bufferG[i] = mapG[i] / 255;\n    bufferB[i] = mapB[i] / 255;\n  }\n  return [bufferR.join(\",\"), bufferG.join(\",\"), bufferB.join(\",\")];\n}\nfunction _createUrl2(id) {\n  if (_classPrivateFieldLooseBase(this, _baseUrl)[_baseUrl] === undefined) {\n    _classPrivateFieldLooseBase(this, _baseUrl)[_baseUrl] = \"\";\n    const url = _classPrivateFieldLooseBase(this, _document2)[_document2].URL;\n    if (url !== _classPrivateFieldLooseBase(this, _document2)[_document2].baseURI) {\n      if (isDataScheme(url)) {\n        warn('#createUrl: ignore \"data:\"-URL for performance reasons.');\n      } else {\n        _classPrivateFieldLooseBase(this, _baseUrl)[_baseUrl] = url.split(\"#\", 1)[0];\n      }\n    }\n  }\n  return `url(${_classPrivateFieldLooseBase(this, _baseUrl)[_baseUrl]}#${id})`;\n}\nfunction _addLuminosityConversion2(filter) {\n  const feColorMatrix = _classPrivateFieldLooseBase(this, _document2)[_document2].createElementNS(SVG_NS, \"feColorMatrix\");\n  feColorMatrix.setAttribute(\"type\", \"matrix\");\n  feColorMatrix.setAttribute(\"values\", \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0.59 0.11 0 0\");\n  filter.append(feColorMatrix);\n}\nfunction _addGrayConversion2(filter) {\n  const feColorMatrix = _classPrivateFieldLooseBase(this, _document2)[_document2].createElementNS(SVG_NS, \"feColorMatrix\");\n  feColorMatrix.setAttribute(\"type\", \"matrix\");\n  feColorMatrix.setAttribute(\"values\", \"0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0 0 0 1 0\");\n  filter.append(feColorMatrix);\n}\nfunction _createFilter2(id) {\n  const filter = _classPrivateFieldLooseBase(this, _document2)[_document2].createElementNS(SVG_NS, \"filter\");\n  filter.setAttribute(\"color-interpolation-filters\", \"sRGB\");\n  filter.setAttribute(\"id\", id);\n  _classPrivateFieldLooseBase(this, _defs2)[_defs2].append(filter);\n  return filter;\n}\nfunction _appendFeFunc2(feComponentTransfer, func, table) {\n  const feFunc = _classPrivateFieldLooseBase(this, _document2)[_document2].createElementNS(SVG_NS, func);\n  feFunc.setAttribute(\"type\", \"discrete\");\n  feFunc.setAttribute(\"tableValues\", table);\n  feComponentTransfer.append(feFunc);\n}\nfunction _addTransferMapConversion2(rTable, gTable, bTable, filter) {\n  const feComponentTransfer = _classPrivateFieldLooseBase(this, _document2)[_document2].createElementNS(SVG_NS, \"feComponentTransfer\");\n  filter.append(feComponentTransfer);\n  _classPrivateFieldLooseBase(this, _appendFeFunc)[_appendFeFunc](feComponentTransfer, \"feFuncR\", rTable);\n  _classPrivateFieldLooseBase(this, _appendFeFunc)[_appendFeFunc](feComponentTransfer, \"feFuncG\", gTable);\n  _classPrivateFieldLooseBase(this, _appendFeFunc)[_appendFeFunc](feComponentTransfer, \"feFuncB\", bTable);\n}\nfunction _addTransferMapAlphaConversion2(aTable, filter) {\n  const feComponentTransfer = _classPrivateFieldLooseBase(this, _document2)[_document2].createElementNS(SVG_NS, \"feComponentTransfer\");\n  filter.append(feComponentTransfer);\n  _classPrivateFieldLooseBase(this, _appendFeFunc)[_appendFeFunc](feComponentTransfer, \"feFuncA\", aTable);\n}\nfunction _getRGB2(color) {\n  _classPrivateFieldLooseBase(this, _defs2)[_defs2].style.color = color;\n  return getRGB(getComputedStyle(_classPrivateFieldLooseBase(this, _defs2)[_defs2]).getPropertyValue(\"color\"));\n}\n; // ./src/display/standard_fontdata_factory.js\n\nclass BaseStandardFontDataFactory {\n  constructor(_ref50) {\n    let _ref50$baseUrl = _ref50.baseUrl,\n      baseUrl = _ref50$baseUrl === void 0 ? null : _ref50$baseUrl;\n    this.baseUrl = baseUrl;\n  }\n  async fetch(_ref51) {\n    let filename = _ref51.filename;\n    if (!this.baseUrl) {\n      throw new Error(\"Ensure that the `standardFontDataUrl` API parameter is provided.\");\n    }\n    if (!filename) {\n      throw new Error(\"Font filename must be specified.\");\n    }\n    const url = `${this.baseUrl}${filename}`;\n    return this._fetch(url).catch(reason => {\n      throw new Error(`Unable to load font data at: ${url}`);\n    });\n  }\n  async _fetch(url) {\n    unreachable(\"Abstract method `_fetch` called.\");\n  }\n}\nclass DOMStandardFontDataFactory extends BaseStandardFontDataFactory {\n  async _fetch(url) {\n    const data = await fetchData(url, \"arraybuffer\");\n    return new Uint8Array(data);\n  }\n}\n; // ./src/display/node_utils.js\n\nif (isNodeJS) {\n  var packageCapability = Promise.withResolvers();\n  var packageMap = null;\n  const loadPackages = async () => {\n    const fs = await import(/*webpackIgnore: true*/\"fs\"),\n      http = await import(/*webpackIgnore: true*/\"http\"),\n      https = await import(/*webpackIgnore: true*/\"https\"),\n      url = await import(/*webpackIgnore: true*/\"url\");\n    let canvas, path2d;\n    return new Map(Object.entries({\n      fs,\n      http,\n      https,\n      url,\n      canvas,\n      path2d\n    }));\n  };\n  loadPackages().then(map => {\n    packageMap = map;\n    packageCapability.resolve();\n  }, reason => {\n    warn(`loadPackages: ${reason}`);\n    packageMap = new Map();\n    packageCapability.resolve();\n  });\n}\nclass NodePackages {\n  static get promise() {\n    return packageCapability.promise;\n  }\n  static get(name) {\n    var _packageMap;\n    return (_packageMap = packageMap) === null || _packageMap === void 0 ? void 0 : _packageMap.get(name);\n  }\n}\nasync function node_utils_fetchData(url) {\n  const fs = NodePackages.get(\"fs\");\n  const data = await fs.promises.readFile(url);\n  return new Uint8Array(data);\n}\nclass NodeFilterFactory extends BaseFilterFactory {}\nclass NodeCanvasFactory extends BaseCanvasFactory {\n  _createCanvas(width, height) {\n    const canvas = NodePackages.get(\"canvas\");\n    return canvas.createCanvas(width, height);\n  }\n}\nclass NodeCMapReaderFactory extends BaseCMapReaderFactory {\n  async _fetch(url) {\n    return node_utils_fetchData(url);\n  }\n}\nclass NodeStandardFontDataFactory extends BaseStandardFontDataFactory {\n  async _fetch(url) {\n    return node_utils_fetchData(url);\n  }\n}\n; // ./src/display/pattern_helper.js\n\nconst PathType = {\n  FILL: \"Fill\",\n  STROKE: \"Stroke\",\n  SHADING: \"Shading\"\n};\nfunction applyBoundingBox(ctx, bbox) {\n  if (!bbox) {\n    return;\n  }\n  const width = bbox[2] - bbox[0];\n  const height = bbox[3] - bbox[1];\n  const region = new Path2D();\n  region.rect(bbox[0], bbox[1], width, height);\n  ctx.clip(region);\n}\nclass BaseShadingPattern {\n  getPattern() {\n    unreachable(\"Abstract method `getPattern` called.\");\n  }\n}\nclass RadialAxialShadingPattern extends BaseShadingPattern {\n  constructor(IR) {\n    super();\n    this._type = IR[1];\n    this._bbox = IR[2];\n    this._colorStops = IR[3];\n    this._p0 = IR[4];\n    this._p1 = IR[5];\n    this._r0 = IR[6];\n    this._r1 = IR[7];\n    this.matrix = null;\n  }\n  _createGradient(ctx) {\n    let grad;\n    if (this._type === \"axial\") {\n      grad = ctx.createLinearGradient(this._p0[0], this._p0[1], this._p1[0], this._p1[1]);\n    } else if (this._type === \"radial\") {\n      grad = ctx.createRadialGradient(this._p0[0], this._p0[1], this._r0, this._p1[0], this._p1[1], this._r1);\n    }\n    for (const colorStop of this._colorStops) {\n      grad.addColorStop(colorStop[0], colorStop[1]);\n    }\n    return grad;\n  }\n  getPattern(ctx, owner, inverse, pathType) {\n    let pattern;\n    if (pathType === PathType.STROKE || pathType === PathType.FILL) {\n      const ownerBBox = owner.current.getClippedPathBoundingBox(pathType, getCurrentTransform(ctx)) || [0, 0, 0, 0];\n      const width = Math.ceil(ownerBBox[2] - ownerBBox[0]) || 1;\n      const height = Math.ceil(ownerBBox[3] - ownerBBox[1]) || 1;\n      const tmpCanvas = owner.cachedCanvases.getCanvas(\"pattern\", width, height);\n      const tmpCtx = tmpCanvas.context;\n      tmpCtx.clearRect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);\n      tmpCtx.beginPath();\n      tmpCtx.rect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);\n      tmpCtx.translate(-ownerBBox[0], -ownerBBox[1]);\n      inverse = Util.transform(inverse, [1, 0, 0, 1, ownerBBox[0], ownerBBox[1]]);\n      tmpCtx.transform(...owner.baseTransform);\n      if (this.matrix) {\n        tmpCtx.transform(...this.matrix);\n      }\n      applyBoundingBox(tmpCtx, this._bbox);\n      tmpCtx.fillStyle = this._createGradient(tmpCtx);\n      tmpCtx.fill();\n      pattern = ctx.createPattern(tmpCanvas.canvas, \"no-repeat\");\n      const domMatrix = new DOMMatrix(inverse);\n      pattern.setTransform(domMatrix);\n    } else {\n      applyBoundingBox(ctx, this._bbox);\n      pattern = this._createGradient(ctx);\n    }\n    return pattern;\n  }\n}\nfunction drawTriangle(data, context, p1, p2, p3, c1, c2, c3) {\n  const coords = context.coords,\n    colors = context.colors;\n  const bytes = data.data,\n    rowSize = data.width * 4;\n  let tmp;\n  if (coords[p1 + 1] > coords[p2 + 1]) {\n    tmp = p1;\n    p1 = p2;\n    p2 = tmp;\n    tmp = c1;\n    c1 = c2;\n    c2 = tmp;\n  }\n  if (coords[p2 + 1] > coords[p3 + 1]) {\n    tmp = p2;\n    p2 = p3;\n    p3 = tmp;\n    tmp = c2;\n    c2 = c3;\n    c3 = tmp;\n  }\n  if (coords[p1 + 1] > coords[p2 + 1]) {\n    tmp = p1;\n    p1 = p2;\n    p2 = tmp;\n    tmp = c1;\n    c1 = c2;\n    c2 = tmp;\n  }\n  const x1 = (coords[p1] + context.offsetX) * context.scaleX;\n  const y1 = (coords[p1 + 1] + context.offsetY) * context.scaleY;\n  const x2 = (coords[p2] + context.offsetX) * context.scaleX;\n  const y2 = (coords[p2 + 1] + context.offsetY) * context.scaleY;\n  const x3 = (coords[p3] + context.offsetX) * context.scaleX;\n  const y3 = (coords[p3 + 1] + context.offsetY) * context.scaleY;\n  if (y1 >= y3) {\n    return;\n  }\n  const c1r = colors[c1],\n    c1g = colors[c1 + 1],\n    c1b = colors[c1 + 2];\n  const c2r = colors[c2],\n    c2g = colors[c2 + 1],\n    c2b = colors[c2 + 2];\n  const c3r = colors[c3],\n    c3g = colors[c3 + 1],\n    c3b = colors[c3 + 2];\n  const minY = Math.round(y1),\n    maxY = Math.round(y3);\n  let xa, car, cag, cab;\n  let xb, cbr, cbg, cbb;\n  for (let y = minY; y <= maxY; y++) {\n    if (y < y2) {\n      const k = y < y1 ? 0 : (y1 - y) / (y1 - y2);\n      xa = x1 - (x1 - x2) * k;\n      car = c1r - (c1r - c2r) * k;\n      cag = c1g - (c1g - c2g) * k;\n      cab = c1b - (c1b - c2b) * k;\n    } else {\n      let k;\n      if (y > y3) {\n        k = 1;\n      } else if (y2 === y3) {\n        k = 0;\n      } else {\n        k = (y2 - y) / (y2 - y3);\n      }\n      xa = x2 - (x2 - x3) * k;\n      car = c2r - (c2r - c3r) * k;\n      cag = c2g - (c2g - c3g) * k;\n      cab = c2b - (c2b - c3b) * k;\n    }\n    let k;\n    if (y < y1) {\n      k = 0;\n    } else if (y > y3) {\n      k = 1;\n    } else {\n      k = (y1 - y) / (y1 - y3);\n    }\n    xb = x1 - (x1 - x3) * k;\n    cbr = c1r - (c1r - c3r) * k;\n    cbg = c1g - (c1g - c3g) * k;\n    cbb = c1b - (c1b - c3b) * k;\n    const x1_ = Math.round(Math.min(xa, xb));\n    const x2_ = Math.round(Math.max(xa, xb));\n    let j = rowSize * y + x1_ * 4;\n    for (let x = x1_; x <= x2_; x++) {\n      k = (xa - x) / (xa - xb);\n      if (k < 0) {\n        k = 0;\n      } else if (k > 1) {\n        k = 1;\n      }\n      bytes[j++] = car - (car - cbr) * k | 0;\n      bytes[j++] = cag - (cag - cbg) * k | 0;\n      bytes[j++] = cab - (cab - cbb) * k | 0;\n      bytes[j++] = 255;\n    }\n  }\n}\nfunction drawFigure(data, figure, context) {\n  const ps = figure.coords;\n  const cs = figure.colors;\n  let i, ii;\n  switch (figure.type) {\n    case \"lattice\":\n      const verticesPerRow = figure.verticesPerRow;\n      const rows = Math.floor(ps.length / verticesPerRow) - 1;\n      const cols = verticesPerRow - 1;\n      for (i = 0; i < rows; i++) {\n        let q = i * verticesPerRow;\n        for (let j = 0; j < cols; j++, q++) {\n          drawTriangle(data, context, ps[q], ps[q + 1], ps[q + verticesPerRow], cs[q], cs[q + 1], cs[q + verticesPerRow]);\n          drawTriangle(data, context, ps[q + verticesPerRow + 1], ps[q + 1], ps[q + verticesPerRow], cs[q + verticesPerRow + 1], cs[q + 1], cs[q + verticesPerRow]);\n        }\n      }\n      break;\n    case \"triangles\":\n      for (i = 0, ii = ps.length; i < ii; i += 3) {\n        drawTriangle(data, context, ps[i], ps[i + 1], ps[i + 2], cs[i], cs[i + 1], cs[i + 2]);\n      }\n      break;\n    default:\n      throw new Error(\"illegal figure\");\n  }\n}\nclass MeshShadingPattern extends BaseShadingPattern {\n  constructor(IR) {\n    super();\n    this._coords = IR[2];\n    this._colors = IR[3];\n    this._figures = IR[4];\n    this._bounds = IR[5];\n    this._bbox = IR[7];\n    this._background = IR[8];\n    this.matrix = null;\n  }\n  _createMeshCanvas(combinedScale, backgroundColor, cachedCanvases) {\n    const EXPECTED_SCALE = 1.1;\n    const MAX_PATTERN_SIZE = 3000;\n    const BORDER_SIZE = 2;\n    const offsetX = Math.floor(this._bounds[0]);\n    const offsetY = Math.floor(this._bounds[1]);\n    const boundsWidth = Math.ceil(this._bounds[2]) - offsetX;\n    const boundsHeight = Math.ceil(this._bounds[3]) - offsetY;\n    const width = Math.min(Math.ceil(Math.abs(boundsWidth * combinedScale[0] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);\n    const height = Math.min(Math.ceil(Math.abs(boundsHeight * combinedScale[1] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);\n    const scaleX = boundsWidth / width;\n    const scaleY = boundsHeight / height;\n    const context = {\n      coords: this._coords,\n      colors: this._colors,\n      offsetX: -offsetX,\n      offsetY: -offsetY,\n      scaleX: 1 / scaleX,\n      scaleY: 1 / scaleY\n    };\n    const paddedWidth = width + BORDER_SIZE * 2;\n    const paddedHeight = height + BORDER_SIZE * 2;\n    const tmpCanvas = cachedCanvases.getCanvas(\"mesh\", paddedWidth, paddedHeight);\n    const tmpCtx = tmpCanvas.context;\n    const data = tmpCtx.createImageData(width, height);\n    if (backgroundColor) {\n      const bytes = data.data;\n      for (let i = 0, ii = bytes.length; i < ii; i += 4) {\n        bytes[i] = backgroundColor[0];\n        bytes[i + 1] = backgroundColor[1];\n        bytes[i + 2] = backgroundColor[2];\n        bytes[i + 3] = 255;\n      }\n    }\n    for (const figure of this._figures) {\n      drawFigure(data, figure, context);\n    }\n    tmpCtx.putImageData(data, BORDER_SIZE, BORDER_SIZE);\n    const canvas = tmpCanvas.canvas;\n    return {\n      canvas,\n      offsetX: offsetX - BORDER_SIZE * scaleX,\n      offsetY: offsetY - BORDER_SIZE * scaleY,\n      scaleX,\n      scaleY\n    };\n  }\n  getPattern(ctx, owner, inverse, pathType) {\n    applyBoundingBox(ctx, this._bbox);\n    let scale;\n    if (pathType === PathType.SHADING) {\n      scale = Util.singularValueDecompose2dScale(getCurrentTransform(ctx));\n    } else {\n      scale = Util.singularValueDecompose2dScale(owner.baseTransform);\n      if (this.matrix) {\n        const matrixScale = Util.singularValueDecompose2dScale(this.matrix);\n        scale = [scale[0] * matrixScale[0], scale[1] * matrixScale[1]];\n      }\n    }\n    const temporaryPatternCanvas = this._createMeshCanvas(scale, pathType === PathType.SHADING ? null : this._background, owner.cachedCanvases);\n    if (pathType !== PathType.SHADING) {\n      ctx.setTransform(...owner.baseTransform);\n      if (this.matrix) {\n        ctx.transform(...this.matrix);\n      }\n    }\n    ctx.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);\n    ctx.scale(temporaryPatternCanvas.scaleX, temporaryPatternCanvas.scaleY);\n    return ctx.createPattern(temporaryPatternCanvas.canvas, \"no-repeat\");\n  }\n}\nclass DummyShadingPattern extends BaseShadingPattern {\n  getPattern() {\n    return \"hotpink\";\n  }\n}\nfunction getShadingPattern(IR) {\n  switch (IR[0]) {\n    case \"RadialAxial\":\n      return new RadialAxialShadingPattern(IR);\n    case \"Mesh\":\n      return new MeshShadingPattern(IR);\n    case \"Dummy\":\n      return new DummyShadingPattern();\n  }\n  throw new Error(`Unknown IR type: ${IR[0]}`);\n}\nconst PaintType = {\n  COLORED: 1,\n  UNCOLORED: 2\n};\nclass TilingPattern {\n  constructor(IR, color, ctx, canvasGraphicsFactory, baseTransform) {\n    this.operatorList = IR[2];\n    this.matrix = IR[3];\n    this.bbox = IR[4];\n    this.xstep = IR[5];\n    this.ystep = IR[6];\n    this.paintType = IR[7];\n    this.tilingType = IR[8];\n    this.color = color;\n    this.ctx = ctx;\n    this.canvasGraphicsFactory = canvasGraphicsFactory;\n    this.baseTransform = baseTransform;\n  }\n  createPatternCanvas(owner) {\n    const bbox = this.bbox,\n      operatorList = this.operatorList,\n      paintType = this.paintType,\n      tilingType = this.tilingType,\n      color = this.color,\n      canvasGraphicsFactory = this.canvasGraphicsFactory;\n    let xstep = this.xstep,\n      ystep = this.ystep;\n    xstep = Math.abs(xstep);\n    ystep = Math.abs(ystep);\n    info(\"TilingType: \" + tilingType);\n    const x0 = bbox[0],\n      y0 = bbox[1],\n      x1 = bbox[2],\n      y1 = bbox[3];\n    const width = x1 - x0;\n    const height = y1 - y0;\n    const matrixScale = Util.singularValueDecompose2dScale(this.matrix);\n    const curMatrixScale = Util.singularValueDecompose2dScale(this.baseTransform);\n    const combinedScaleX = matrixScale[0] * curMatrixScale[0];\n    const combinedScaleY = matrixScale[1] * curMatrixScale[1];\n    let canvasWidth = width,\n      canvasHeight = height,\n      redrawHorizontally = false,\n      redrawVertically = false;\n    const xScaledStep = Math.ceil(xstep * combinedScaleX);\n    const yScaledStep = Math.ceil(ystep * combinedScaleY);\n    const xScaledWidth = Math.ceil(width * combinedScaleX);\n    const yScaledHeight = Math.ceil(height * combinedScaleY);\n    if (xScaledStep >= xScaledWidth) {\n      canvasWidth = xstep;\n    } else {\n      redrawHorizontally = true;\n    }\n    if (yScaledStep >= yScaledHeight) {\n      canvasHeight = ystep;\n    } else {\n      redrawVertically = true;\n    }\n    const dimx = this.getSizeAndScale(canvasWidth, this.ctx.canvas.width, combinedScaleX);\n    const dimy = this.getSizeAndScale(canvasHeight, this.ctx.canvas.height, combinedScaleY);\n    const tmpCanvas = owner.cachedCanvases.getCanvas(\"pattern\", dimx.size, dimy.size);\n    const tmpCtx = tmpCanvas.context;\n    const graphics = canvasGraphicsFactory.createCanvasGraphics(tmpCtx);\n    graphics.groupLevel = owner.groupLevel;\n    this.setFillAndStrokeStyleToContext(graphics, paintType, color);\n    tmpCtx.translate(-dimx.scale * x0, -dimy.scale * y0);\n    graphics.transform(dimx.scale, 0, 0, dimy.scale, 0, 0);\n    tmpCtx.save();\n    this.clipBbox(graphics, x0, y0, x1, y1);\n    graphics.baseTransform = getCurrentTransform(graphics.ctx);\n    graphics.executeOperatorList(operatorList);\n    graphics.endDrawing();\n    tmpCtx.restore();\n    if (redrawHorizontally || redrawVertically) {\n      const image = tmpCanvas.canvas;\n      if (redrawHorizontally) {\n        canvasWidth = xstep;\n      }\n      if (redrawVertically) {\n        canvasHeight = ystep;\n      }\n      const dimx2 = this.getSizeAndScale(canvasWidth, this.ctx.canvas.width, combinedScaleX);\n      const dimy2 = this.getSizeAndScale(canvasHeight, this.ctx.canvas.height, combinedScaleY);\n      const xSize = dimx2.size;\n      const ySize = dimy2.size;\n      const tmpCanvas2 = owner.cachedCanvases.getCanvas(\"pattern-workaround\", xSize, ySize);\n      const tmpCtx2 = tmpCanvas2.context;\n      const ii = redrawHorizontally ? Math.floor(width / xstep) : 0;\n      const jj = redrawVertically ? Math.floor(height / ystep) : 0;\n      for (let i = 0; i <= ii; i++) {\n        for (let j = 0; j <= jj; j++) {\n          tmpCtx2.drawImage(image, xSize * i, ySize * j, xSize, ySize, 0, 0, xSize, ySize);\n        }\n      }\n      return {\n        canvas: tmpCanvas2.canvas,\n        scaleX: dimx2.scale,\n        scaleY: dimy2.scale,\n        offsetX: x0,\n        offsetY: y0\n      };\n    }\n    return {\n      canvas: tmpCanvas.canvas,\n      scaleX: dimx.scale,\n      scaleY: dimy.scale,\n      offsetX: x0,\n      offsetY: y0\n    };\n  }\n  getSizeAndScale(step, realOutputSize, scale) {\n    const maxSize = Math.max(TilingPattern.MAX_PATTERN_SIZE, realOutputSize);\n    let size = Math.ceil(step * scale);\n    if (size >= maxSize) {\n      size = maxSize;\n    } else {\n      scale = size / step;\n    }\n    return {\n      scale,\n      size\n    };\n  }\n  clipBbox(graphics, x0, y0, x1, y1) {\n    const bboxWidth = x1 - x0;\n    const bboxHeight = y1 - y0;\n    graphics.ctx.rect(x0, y0, bboxWidth, bboxHeight);\n    graphics.current.updateRectMinMax(getCurrentTransform(graphics.ctx), [x0, y0, x1, y1]);\n    graphics.clip();\n    graphics.endPath();\n  }\n  setFillAndStrokeStyleToContext(graphics, paintType, color) {\n    const context = graphics.ctx,\n      current = graphics.current;\n    switch (paintType) {\n      case PaintType.COLORED:\n        const ctx = this.ctx;\n        context.fillStyle = ctx.fillStyle;\n        context.strokeStyle = ctx.strokeStyle;\n        current.fillColor = ctx.fillStyle;\n        current.strokeColor = ctx.strokeStyle;\n        break;\n      case PaintType.UNCOLORED:\n        const cssColor = Util.makeHexColor(color[0], color[1], color[2]);\n        context.fillStyle = cssColor;\n        context.strokeStyle = cssColor;\n        current.fillColor = cssColor;\n        current.strokeColor = cssColor;\n        break;\n      default:\n        throw new FormatError(`Unsupported paint type: ${paintType}`);\n    }\n  }\n  getPattern(ctx, owner, inverse, pathType) {\n    let matrix = inverse;\n    if (pathType !== PathType.SHADING) {\n      matrix = Util.transform(matrix, owner.baseTransform);\n      if (this.matrix) {\n        matrix = Util.transform(matrix, this.matrix);\n      }\n    }\n    const temporaryPatternCanvas = this.createPatternCanvas(owner);\n    let domMatrix = new DOMMatrix(matrix);\n    domMatrix = domMatrix.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);\n    domMatrix = domMatrix.scale(1 / temporaryPatternCanvas.scaleX, 1 / temporaryPatternCanvas.scaleY);\n    const pattern = ctx.createPattern(temporaryPatternCanvas.canvas, \"repeat\");\n    pattern.setTransform(domMatrix);\n    return pattern;\n  }\n}\nTilingPattern.MAX_PATTERN_SIZE = 3000;\n; // ./src/shared/image_utils.js\n\nfunction convertToRGBA(params) {\n  switch (params.kind) {\n    case ImageKind.GRAYSCALE_1BPP:\n      return convertBlackAndWhiteToRGBA(params);\n    case ImageKind.RGB_24BPP:\n      return convertRGBToRGBA(params);\n  }\n  return null;\n}\nfunction convertBlackAndWhiteToRGBA(_ref52) {\n  let src = _ref52.src,\n    _ref52$srcPos = _ref52.srcPos,\n    srcPos = _ref52$srcPos === void 0 ? 0 : _ref52$srcPos,\n    dest = _ref52.dest,\n    width = _ref52.width,\n    height = _ref52.height,\n    _ref52$nonBlackColor = _ref52.nonBlackColor,\n    nonBlackColor = _ref52$nonBlackColor === void 0 ? 0xffffffff : _ref52$nonBlackColor,\n    _ref52$inverseDecode = _ref52.inverseDecode,\n    inverseDecode = _ref52$inverseDecode === void 0 ? false : _ref52$inverseDecode;\n  const black = util_FeatureTest.isLittleEndian ? 0xff000000 : 0x000000ff;\n  const _ref53 = inverseDecode ? [nonBlackColor, black] : [black, nonBlackColor],\n    _ref54 = _slicedToArray(_ref53, 2),\n    zeroMapping = _ref54[0],\n    oneMapping = _ref54[1];\n  const widthInSource = width >> 3;\n  const widthRemainder = width & 7;\n  const srcLength = src.length;\n  dest = new Uint32Array(dest.buffer);\n  let destPos = 0;\n  for (let i = 0; i < height; i++) {\n    for (const max = srcPos + widthInSource; srcPos < max; srcPos++) {\n      const elem = srcPos < srcLength ? src[srcPos] : 255;\n      dest[destPos++] = elem & 0b10000000 ? oneMapping : zeroMapping;\n      dest[destPos++] = elem & 0b1000000 ? oneMapping : zeroMapping;\n      dest[destPos++] = elem & 0b100000 ? oneMapping : zeroMapping;\n      dest[destPos++] = elem & 0b10000 ? oneMapping : zeroMapping;\n      dest[destPos++] = elem & 0b1000 ? oneMapping : zeroMapping;\n      dest[destPos++] = elem & 0b100 ? oneMapping : zeroMapping;\n      dest[destPos++] = elem & 0b10 ? oneMapping : zeroMapping;\n      dest[destPos++] = elem & 0b1 ? oneMapping : zeroMapping;\n    }\n    if (widthRemainder === 0) {\n      continue;\n    }\n    const elem = srcPos < srcLength ? src[srcPos++] : 255;\n    for (let j = 0; j < widthRemainder; j++) {\n      dest[destPos++] = elem & 1 << 7 - j ? oneMapping : zeroMapping;\n    }\n  }\n  return {\n    srcPos,\n    destPos\n  };\n}\nfunction convertRGBToRGBA(_ref55) {\n  let src = _ref55.src,\n    _ref55$srcPos = _ref55.srcPos,\n    srcPos = _ref55$srcPos === void 0 ? 0 : _ref55$srcPos,\n    dest = _ref55.dest,\n    _ref55$destPos = _ref55.destPos,\n    destPos = _ref55$destPos === void 0 ? 0 : _ref55$destPos,\n    width = _ref55.width,\n    height = _ref55.height;\n  let i = 0;\n  const len32 = src.length >> 2;\n  const src32 = new Uint32Array(src.buffer, srcPos, len32);\n  if (FeatureTest.isLittleEndian) {\n    for (; i < len32 - 2; i += 3, destPos += 4) {\n      const s1 = src32[i];\n      const s2 = src32[i + 1];\n      const s3 = src32[i + 2];\n      dest[destPos] = s1 | 0xff000000;\n      dest[destPos + 1] = s1 >>> 24 | s2 << 8 | 0xff000000;\n      dest[destPos + 2] = s2 >>> 16 | s3 << 16 | 0xff000000;\n      dest[destPos + 3] = s3 >>> 8 | 0xff000000;\n    }\n    for (let j = i * 4, jj = src.length; j < jj; j += 3) {\n      dest[destPos++] = src[j] | src[j + 1] << 8 | src[j + 2] << 16 | 0xff000000;\n    }\n  } else {\n    for (; i < len32 - 2; i += 3, destPos += 4) {\n      const s1 = src32[i];\n      const s2 = src32[i + 1];\n      const s3 = src32[i + 2];\n      dest[destPos] = s1 | 0xff;\n      dest[destPos + 1] = s1 << 24 | s2 >>> 8 | 0xff;\n      dest[destPos + 2] = s2 << 16 | s3 >>> 16 | 0xff;\n      dest[destPos + 3] = s3 << 8 | 0xff;\n    }\n    for (let j = i * 4, jj = src.length; j < jj; j += 3) {\n      dest[destPos++] = src[j] << 24 | src[j + 1] << 16 | src[j + 2] << 8 | 0xff;\n    }\n  }\n  return {\n    srcPos,\n    destPos\n  };\n}\nfunction grayToRGBA(src, dest) {\n  if (FeatureTest.isLittleEndian) {\n    for (let i = 0, ii = src.length; i < ii; i++) {\n      dest[i] = src[i] * 0x10101 | 0xff000000;\n    }\n  } else {\n    for (let i = 0, ii = src.length; i < ii; i++) {\n      dest[i] = src[i] * 0x1010100 | 0x000000ff;\n    }\n  }\n}\n; // ./src/display/canvas.js\n\nconst MIN_FONT_SIZE = 16;\nconst MAX_FONT_SIZE = 100;\nconst EXECUTION_TIME = 15;\nconst EXECUTION_STEPS = 10;\nconst MAX_SIZE_TO_COMPILE = 1000;\nconst FULL_CHUNK_HEIGHT = 16;\nfunction mirrorContextOperations(ctx, destCtx) {\n  if (ctx._removeMirroring) {\n    throw new Error(\"Context is already forwarding operations.\");\n  }\n  ctx.__originalSave = ctx.save;\n  ctx.__originalRestore = ctx.restore;\n  ctx.__originalRotate = ctx.rotate;\n  ctx.__originalScale = ctx.scale;\n  ctx.__originalTranslate = ctx.translate;\n  ctx.__originalTransform = ctx.transform;\n  ctx.__originalSetTransform = ctx.setTransform;\n  ctx.__originalResetTransform = ctx.resetTransform;\n  ctx.__originalClip = ctx.clip;\n  ctx.__originalMoveTo = ctx.moveTo;\n  ctx.__originalLineTo = ctx.lineTo;\n  ctx.__originalBezierCurveTo = ctx.bezierCurveTo;\n  ctx.__originalRect = ctx.rect;\n  ctx.__originalClosePath = ctx.closePath;\n  ctx.__originalBeginPath = ctx.beginPath;\n  ctx._removeMirroring = () => {\n    ctx.save = ctx.__originalSave;\n    ctx.restore = ctx.__originalRestore;\n    ctx.rotate = ctx.__originalRotate;\n    ctx.scale = ctx.__originalScale;\n    ctx.translate = ctx.__originalTranslate;\n    ctx.transform = ctx.__originalTransform;\n    ctx.setTransform = ctx.__originalSetTransform;\n    ctx.resetTransform = ctx.__originalResetTransform;\n    ctx.clip = ctx.__originalClip;\n    ctx.moveTo = ctx.__originalMoveTo;\n    ctx.lineTo = ctx.__originalLineTo;\n    ctx.bezierCurveTo = ctx.__originalBezierCurveTo;\n    ctx.rect = ctx.__originalRect;\n    ctx.closePath = ctx.__originalClosePath;\n    ctx.beginPath = ctx.__originalBeginPath;\n    delete ctx._removeMirroring;\n  };\n  ctx.save = function ctxSave() {\n    destCtx.save();\n    this.__originalSave();\n  };\n  ctx.restore = function ctxRestore() {\n    destCtx.restore();\n    this.__originalRestore();\n  };\n  ctx.translate = function ctxTranslate(x, y) {\n    destCtx.translate(x, y);\n    this.__originalTranslate(x, y);\n  };\n  ctx.scale = function ctxScale(x, y) {\n    destCtx.scale(x, y);\n    this.__originalScale(x, y);\n  };\n  ctx.transform = function ctxTransform(a, b, c, d, e, f) {\n    destCtx.transform(a, b, c, d, e, f);\n    this.__originalTransform(a, b, c, d, e, f);\n  };\n  ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {\n    destCtx.setTransform(a, b, c, d, e, f);\n    this.__originalSetTransform(a, b, c, d, e, f);\n  };\n  ctx.resetTransform = function ctxResetTransform() {\n    destCtx.resetTransform();\n    this.__originalResetTransform();\n  };\n  ctx.rotate = function ctxRotate(angle) {\n    destCtx.rotate(angle);\n    this.__originalRotate(angle);\n  };\n  ctx.clip = function ctxRotate(rule) {\n    destCtx.clip(rule);\n    this.__originalClip(rule);\n  };\n  ctx.moveTo = function (x, y) {\n    destCtx.moveTo(x, y);\n    this.__originalMoveTo(x, y);\n  };\n  ctx.lineTo = function (x, y) {\n    destCtx.lineTo(x, y);\n    this.__originalLineTo(x, y);\n  };\n  ctx.bezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {\n    destCtx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n    this.__originalBezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n  };\n  ctx.rect = function (x, y, width, height) {\n    destCtx.rect(x, y, width, height);\n    this.__originalRect(x, y, width, height);\n  };\n  ctx.closePath = function () {\n    destCtx.closePath();\n    this.__originalClosePath();\n  };\n  ctx.beginPath = function () {\n    destCtx.beginPath();\n    this.__originalBeginPath();\n  };\n}\nclass CachedCanvases {\n  constructor(canvasFactory) {\n    this.canvasFactory = canvasFactory;\n    this.cache = Object.create(null);\n  }\n  getCanvas(id, width, height) {\n    let canvasEntry;\n    if (this.cache[id] !== undefined) {\n      canvasEntry = this.cache[id];\n      this.canvasFactory.reset(canvasEntry, width, height);\n    } else {\n      canvasEntry = this.canvasFactory.create(width, height);\n      this.cache[id] = canvasEntry;\n    }\n    return canvasEntry;\n  }\n  delete(id) {\n    delete this.cache[id];\n  }\n  clear() {\n    for (const id in this.cache) {\n      const canvasEntry = this.cache[id];\n      this.canvasFactory.destroy(canvasEntry);\n      delete this.cache[id];\n    }\n  }\n}\nfunction drawImageAtIntegerCoords(ctx, srcImg, srcX, srcY, srcW, srcH, destX, destY, destW, destH) {\n  const _getCurrentTransform = getCurrentTransform(ctx),\n    _getCurrentTransform2 = _slicedToArray(_getCurrentTransform, 6),\n    a = _getCurrentTransform2[0],\n    b = _getCurrentTransform2[1],\n    c = _getCurrentTransform2[2],\n    d = _getCurrentTransform2[3],\n    tx = _getCurrentTransform2[4],\n    ty = _getCurrentTransform2[5];\n  if (b === 0 && c === 0) {\n    const tlX = destX * a + tx;\n    const rTlX = Math.round(tlX);\n    const tlY = destY * d + ty;\n    const rTlY = Math.round(tlY);\n    const brX = (destX + destW) * a + tx;\n    const rWidth = Math.abs(Math.round(brX) - rTlX) || 1;\n    const brY = (destY + destH) * d + ty;\n    const rHeight = Math.abs(Math.round(brY) - rTlY) || 1;\n    ctx.setTransform(Math.sign(a), 0, 0, Math.sign(d), rTlX, rTlY);\n    ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, 0, 0, rWidth, rHeight);\n    ctx.setTransform(a, b, c, d, tx, ty);\n    return [rWidth, rHeight];\n  }\n  if (a === 0 && d === 0) {\n    const tlX = destY * c + tx;\n    const rTlX = Math.round(tlX);\n    const tlY = destX * b + ty;\n    const rTlY = Math.round(tlY);\n    const brX = (destY + destH) * c + tx;\n    const rWidth = Math.abs(Math.round(brX) - rTlX) || 1;\n    const brY = (destX + destW) * b + ty;\n    const rHeight = Math.abs(Math.round(brY) - rTlY) || 1;\n    ctx.setTransform(0, Math.sign(b), Math.sign(c), 0, rTlX, rTlY);\n    ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, 0, 0, rHeight, rWidth);\n    ctx.setTransform(a, b, c, d, tx, ty);\n    return [rHeight, rWidth];\n  }\n  ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, destX, destY, destW, destH);\n  const scaleX = Math.hypot(a, b);\n  const scaleY = Math.hypot(c, d);\n  return [scaleX * destW, scaleY * destH];\n}\nfunction compileType3Glyph(imgData) {\n  const width = imgData.width,\n    height = imgData.height;\n  if (width > MAX_SIZE_TO_COMPILE || height > MAX_SIZE_TO_COMPILE) {\n    return null;\n  }\n  const POINT_TO_PROCESS_LIMIT = 1000;\n  const POINT_TYPES = new Uint8Array([0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0]);\n  const width1 = width + 1;\n  let points = new Uint8Array(width1 * (height + 1));\n  let i, j, j0;\n  const lineSize = width + 7 & ~7;\n  let data = new Uint8Array(lineSize * height),\n    pos = 0;\n  for (const elem of imgData.data) {\n    let mask = 128;\n    while (mask > 0) {\n      data[pos++] = elem & mask ? 0 : 255;\n      mask >>= 1;\n    }\n  }\n  let count = 0;\n  pos = 0;\n  if (data[pos] !== 0) {\n    points[0] = 1;\n    ++count;\n  }\n  for (j = 1; j < width; j++) {\n    if (data[pos] !== data[pos + 1]) {\n      points[j] = data[pos] ? 2 : 1;\n      ++count;\n    }\n    pos++;\n  }\n  if (data[pos] !== 0) {\n    points[j] = 2;\n    ++count;\n  }\n  for (i = 1; i < height; i++) {\n    pos = i * lineSize;\n    j0 = i * width1;\n    if (data[pos - lineSize] !== data[pos]) {\n      points[j0] = data[pos] ? 1 : 8;\n      ++count;\n    }\n    let sum = (data[pos] ? 4 : 0) + (data[pos - lineSize] ? 8 : 0);\n    for (j = 1; j < width; j++) {\n      sum = (sum >> 2) + (data[pos + 1] ? 4 : 0) + (data[pos - lineSize + 1] ? 8 : 0);\n      if (POINT_TYPES[sum]) {\n        points[j0 + j] = POINT_TYPES[sum];\n        ++count;\n      }\n      pos++;\n    }\n    if (data[pos - lineSize] !== data[pos]) {\n      points[j0 + j] = data[pos] ? 2 : 4;\n      ++count;\n    }\n    if (count > POINT_TO_PROCESS_LIMIT) {\n      return null;\n    }\n  }\n  pos = lineSize * (height - 1);\n  j0 = i * width1;\n  if (data[pos] !== 0) {\n    points[j0] = 8;\n    ++count;\n  }\n  for (j = 1; j < width; j++) {\n    if (data[pos] !== data[pos + 1]) {\n      points[j0 + j] = data[pos] ? 4 : 8;\n      ++count;\n    }\n    pos++;\n  }\n  if (data[pos] !== 0) {\n    points[j0 + j] = 4;\n    ++count;\n  }\n  if (count > POINT_TO_PROCESS_LIMIT) {\n    return null;\n  }\n  const steps = new Int32Array([0, width1, -1, 0, -width1, 0, 0, 0, 1]);\n  const path = new Path2D();\n  for (i = 0; count && i <= height; i++) {\n    let p = i * width1;\n    const end = p + width;\n    while (p < end && !points[p]) {\n      p++;\n    }\n    if (p === end) {\n      continue;\n    }\n    path.moveTo(p % width1, i);\n    const p0 = p;\n    let type = points[p];\n    do {\n      const step = steps[type];\n      do {\n        p += step;\n      } while (!points[p]);\n      const pp = points[p];\n      if (pp !== 5 && pp !== 10) {\n        type = pp;\n        points[p] = 0;\n      } else {\n        type = pp & 0x33 * type >> 4;\n        points[p] &= type >> 2 | type << 2;\n      }\n      path.lineTo(p % width1, p / width1 | 0);\n      if (!points[p]) {\n        --count;\n      }\n    } while (p0 !== p);\n    --i;\n  }\n  data = null;\n  points = null;\n  const drawOutline = function (c) {\n    c.save();\n    c.scale(1 / width, -1 / height);\n    c.translate(0, -height);\n    c.fill(path);\n    c.beginPath();\n    c.restore();\n  };\n  return drawOutline;\n}\nclass CanvasExtraState {\n  constructor(width, height) {\n    this.alphaIsShape = false;\n    this.fontSize = 0;\n    this.fontSizeScale = 1;\n    this.textMatrix = IDENTITY_MATRIX;\n    this.textMatrixScale = 1;\n    this.fontMatrix = FONT_IDENTITY_MATRIX;\n    this.leading = 0;\n    this.x = 0;\n    this.y = 0;\n    this.lineX = 0;\n    this.lineY = 0;\n    this.charSpacing = 0;\n    this.wordSpacing = 0;\n    this.textHScale = 1;\n    this.textRenderingMode = TextRenderingMode.FILL;\n    this.textRise = 0;\n    this.fillColor = \"#000000\";\n    this.strokeColor = \"#000000\";\n    this.patternFill = false;\n    this.fillAlpha = 1;\n    this.strokeAlpha = 1;\n    this.lineWidth = 1;\n    this.activeSMask = null;\n    this.transferMaps = \"none\";\n    this.startNewPathAndClipBox([0, 0, width, height]);\n  }\n  clone() {\n    const clone = Object.create(this);\n    clone.clipBox = this.clipBox.slice();\n    return clone;\n  }\n  setCurrentPoint(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n  updatePathMinMax(transform, x, y) {\n    var _Util$applyTransform = Util.applyTransform([x, y], transform);\n    var _Util$applyTransform2 = _slicedToArray(_Util$applyTransform, 2);\n    x = _Util$applyTransform2[0];\n    y = _Util$applyTransform2[1];\n    this.minX = Math.min(this.minX, x);\n    this.minY = Math.min(this.minY, y);\n    this.maxX = Math.max(this.maxX, x);\n    this.maxY = Math.max(this.maxY, y);\n  }\n  updateRectMinMax(transform, rect) {\n    const p1 = Util.applyTransform(rect, transform);\n    const p2 = Util.applyTransform(rect.slice(2), transform);\n    const p3 = Util.applyTransform([rect[0], rect[3]], transform);\n    const p4 = Util.applyTransform([rect[2], rect[1]], transform);\n    this.minX = Math.min(this.minX, p1[0], p2[0], p3[0], p4[0]);\n    this.minY = Math.min(this.minY, p1[1], p2[1], p3[1], p4[1]);\n    this.maxX = Math.max(this.maxX, p1[0], p2[0], p3[0], p4[0]);\n    this.maxY = Math.max(this.maxY, p1[1], p2[1], p3[1], p4[1]);\n  }\n  updateScalingPathMinMax(transform, minMax) {\n    Util.scaleMinMax(transform, minMax);\n    this.minX = Math.min(this.minX, minMax[0]);\n    this.minY = Math.min(this.minY, minMax[1]);\n    this.maxX = Math.max(this.maxX, minMax[2]);\n    this.maxY = Math.max(this.maxY, minMax[3]);\n  }\n  updateCurvePathMinMax(transform, x0, y0, x1, y1, x2, y2, x3, y3, minMax) {\n    const box = Util.bezierBoundingBox(x0, y0, x1, y1, x2, y2, x3, y3, minMax);\n    if (minMax) {\n      return;\n    }\n    this.updateRectMinMax(transform, box);\n  }\n  getPathBoundingBox() {\n    let pathType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : PathType.FILL;\n    let transform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const box = [this.minX, this.minY, this.maxX, this.maxY];\n    if (pathType === PathType.STROKE) {\n      if (!transform) {\n        unreachable(\"Stroke bounding box must include transform.\");\n      }\n      const scale = Util.singularValueDecompose2dScale(transform);\n      const xStrokePad = scale[0] * this.lineWidth / 2;\n      const yStrokePad = scale[1] * this.lineWidth / 2;\n      box[0] -= xStrokePad;\n      box[1] -= yStrokePad;\n      box[2] += xStrokePad;\n      box[3] += yStrokePad;\n    }\n    return box;\n  }\n  updateClipFromPath() {\n    const intersect = Util.intersect(this.clipBox, this.getPathBoundingBox());\n    this.startNewPathAndClipBox(intersect || [0, 0, 0, 0]);\n  }\n  isEmptyClip() {\n    return this.minX === Infinity;\n  }\n  startNewPathAndClipBox(box) {\n    this.clipBox = box;\n    this.minX = Infinity;\n    this.minY = Infinity;\n    this.maxX = 0;\n    this.maxY = 0;\n  }\n  getClippedPathBoundingBox() {\n    let pathType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : PathType.FILL;\n    let transform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return Util.intersect(this.clipBox, this.getPathBoundingBox(pathType, transform));\n  }\n}\nfunction putBinaryImageData(ctx, imgData) {\n  if (typeof ImageData !== \"undefined\" && imgData instanceof ImageData) {\n    ctx.putImageData(imgData, 0, 0);\n    return;\n  }\n  const height = imgData.height,\n    width = imgData.width;\n  const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n  const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n  const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n  const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n  let srcPos = 0,\n    destPos;\n  const src = imgData.data;\n  const dest = chunkImgData.data;\n  let i, j, thisChunkHeight, elemsInThisChunk;\n  if (imgData.kind === util_ImageKind.GRAYSCALE_1BPP) {\n    const srcLength = src.byteLength;\n    const dest32 = new Uint32Array(dest.buffer, 0, dest.byteLength >> 2);\n    const dest32DataLength = dest32.length;\n    const fullSrcDiff = width + 7 >> 3;\n    const white = 0xffffffff;\n    const black = util_FeatureTest.isLittleEndian ? 0xff000000 : 0x000000ff;\n    for (i = 0; i < totalChunks; i++) {\n      thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n      destPos = 0;\n      for (j = 0; j < thisChunkHeight; j++) {\n        const srcDiff = srcLength - srcPos;\n        let k = 0;\n        const kEnd = srcDiff > fullSrcDiff ? width : srcDiff * 8 - 7;\n        const kEndUnrolled = kEnd & ~7;\n        let mask = 0;\n        let srcByte = 0;\n        for (; k < kEndUnrolled; k += 8) {\n          srcByte = src[srcPos++];\n          dest32[destPos++] = srcByte & 128 ? white : black;\n          dest32[destPos++] = srcByte & 64 ? white : black;\n          dest32[destPos++] = srcByte & 32 ? white : black;\n          dest32[destPos++] = srcByte & 16 ? white : black;\n          dest32[destPos++] = srcByte & 8 ? white : black;\n          dest32[destPos++] = srcByte & 4 ? white : black;\n          dest32[destPos++] = srcByte & 2 ? white : black;\n          dest32[destPos++] = srcByte & 1 ? white : black;\n        }\n        for (; k < kEnd; k++) {\n          if (mask === 0) {\n            srcByte = src[srcPos++];\n            mask = 128;\n          }\n          dest32[destPos++] = srcByte & mask ? white : black;\n          mask >>= 1;\n        }\n      }\n      while (destPos < dest32DataLength) {\n        dest32[destPos++] = 0;\n      }\n      ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n    }\n  } else if (imgData.kind === util_ImageKind.RGBA_32BPP) {\n    j = 0;\n    elemsInThisChunk = width * FULL_CHUNK_HEIGHT * 4;\n    for (i = 0; i < fullChunks; i++) {\n      dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n      srcPos += elemsInThisChunk;\n      ctx.putImageData(chunkImgData, 0, j);\n      j += FULL_CHUNK_HEIGHT;\n    }\n    if (i < totalChunks) {\n      elemsInThisChunk = width * partialChunkHeight * 4;\n      dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n      ctx.putImageData(chunkImgData, 0, j);\n    }\n  } else if (imgData.kind === util_ImageKind.RGB_24BPP) {\n    thisChunkHeight = FULL_CHUNK_HEIGHT;\n    elemsInThisChunk = width * thisChunkHeight;\n    for (i = 0; i < totalChunks; i++) {\n      if (i >= fullChunks) {\n        thisChunkHeight = partialChunkHeight;\n        elemsInThisChunk = width * thisChunkHeight;\n      }\n      destPos = 0;\n      for (j = elemsInThisChunk; j--;) {\n        dest[destPos++] = src[srcPos++];\n        dest[destPos++] = src[srcPos++];\n        dest[destPos++] = src[srcPos++];\n        dest[destPos++] = 255;\n      }\n      ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n    }\n  } else {\n    throw new Error(`bad image kind: ${imgData.kind}`);\n  }\n}\nfunction putBinaryImageMask(ctx, imgData) {\n  if (imgData.bitmap) {\n    ctx.drawImage(imgData.bitmap, 0, 0);\n    return;\n  }\n  const height = imgData.height,\n    width = imgData.width;\n  const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n  const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n  const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n  const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n  let srcPos = 0;\n  const src = imgData.data;\n  const dest = chunkImgData.data;\n  for (let i = 0; i < totalChunks; i++) {\n    const thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n    var _convertBlackAndWhite = convertBlackAndWhiteToRGBA({\n      src,\n      srcPos,\n      dest,\n      width,\n      height: thisChunkHeight,\n      nonBlackColor: 0\n    });\n    srcPos = _convertBlackAndWhite.srcPos;\n    ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n  }\n}\nfunction copyCtxState(sourceCtx, destCtx) {\n  const properties = [\"strokeStyle\", \"fillStyle\", \"fillRule\", \"globalAlpha\", \"lineWidth\", \"lineCap\", \"lineJoin\", \"miterLimit\", \"globalCompositeOperation\", \"font\", \"filter\"];\n  for (const property of properties) {\n    if (sourceCtx[property] !== undefined) {\n      destCtx[property] = sourceCtx[property];\n    }\n  }\n  if (sourceCtx.setLineDash !== undefined) {\n    destCtx.setLineDash(sourceCtx.getLineDash());\n    destCtx.lineDashOffset = sourceCtx.lineDashOffset;\n  }\n}\nfunction resetCtxToDefault(ctx) {\n  ctx.strokeStyle = ctx.fillStyle = \"#000000\";\n  ctx.fillRule = \"nonzero\";\n  ctx.globalAlpha = 1;\n  ctx.lineWidth = 1;\n  ctx.lineCap = \"butt\";\n  ctx.lineJoin = \"miter\";\n  ctx.miterLimit = 10;\n  ctx.globalCompositeOperation = \"source-over\";\n  ctx.font = \"10px sans-serif\";\n  if (ctx.setLineDash !== undefined) {\n    ctx.setLineDash([]);\n    ctx.lineDashOffset = 0;\n  }\n  if (!isNodeJS) {\n    const filter = ctx.filter;\n    if (filter !== \"none\" && filter !== \"\") {\n      ctx.filter = \"none\";\n    }\n  }\n}\nfunction getImageSmoothingEnabled(transform, interpolate) {\n  if (interpolate) {\n    return true;\n  }\n  const scale = Util.singularValueDecompose2dScale(transform);\n  scale[0] = Math.fround(scale[0]);\n  scale[1] = Math.fround(scale[1]);\n  const actualScale = Math.fround((globalThis.devicePixelRatio || 1) * PixelsPerInch.PDF_TO_CSS_UNITS);\n  return scale[0] <= actualScale && scale[1] <= actualScale;\n}\nconst LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\nconst LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\nconst NORMAL_CLIP = {};\nconst EO_CLIP = {};\nvar _restoreInitialState = /*#__PURE__*/_classPrivateFieldLooseKey(\"restoreInitialState\");\nvar _drawFilter = /*#__PURE__*/_classPrivateFieldLooseKey(\"drawFilter\");\nclass CanvasGraphics {\n  constructor(canvasCtx, commonObjs, objs, canvasFactory, filterFactory, _ref56, annotationCanvasMap, pageColors) {\n    let optionalContentConfig = _ref56.optionalContentConfig,\n      _ref56$markedContentS = _ref56.markedContentStack,\n      markedContentStack = _ref56$markedContentS === void 0 ? null : _ref56$markedContentS;\n    Object.defineProperty(this, _drawFilter, {\n      value: _drawFilter2\n    });\n    Object.defineProperty(this, _restoreInitialState, {\n      value: _restoreInitialState2\n    });\n    this.ctx = canvasCtx;\n    this.current = new CanvasExtraState(this.ctx.canvas.width, this.ctx.canvas.height);\n    this.stateStack = [];\n    this.pendingClip = null;\n    this.pendingEOFill = false;\n    this.res = null;\n    this.xobjs = null;\n    this.commonObjs = commonObjs;\n    this.objs = objs;\n    this.canvasFactory = canvasFactory;\n    this.filterFactory = filterFactory;\n    this.groupStack = [];\n    this.processingType3 = null;\n    this.baseTransform = null;\n    this.baseTransformStack = [];\n    this.groupLevel = 0;\n    this.smaskStack = [];\n    this.smaskCounter = 0;\n    this.tempSMask = null;\n    this.suspendedCtx = null;\n    this.contentVisible = true;\n    this.markedContentStack = markedContentStack || [];\n    this.optionalContentConfig = optionalContentConfig;\n    this.cachedCanvases = new CachedCanvases(this.canvasFactory);\n    this.cachedPatterns = new Map();\n    this.annotationCanvasMap = annotationCanvasMap;\n    this.viewportScale = 1;\n    this.outputScaleX = 1;\n    this.outputScaleY = 1;\n    this.pageColors = pageColors;\n    this._cachedScaleForStroking = [-1, 0];\n    this._cachedGetSinglePixelWidth = null;\n    this._cachedBitmapsMap = new Map();\n  }\n  getObject(data) {\n    let fallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    if (typeof data === \"string\") {\n      return data.startsWith(\"g_\") ? this.commonObjs.get(data) : this.objs.get(data);\n    }\n    return fallback;\n  }\n  beginDrawing(_ref57) {\n    let transform = _ref57.transform,\n      viewport = _ref57.viewport,\n      _ref57$transparency = _ref57.transparency,\n      transparency = _ref57$transparency === void 0 ? false : _ref57$transparency,\n      _ref57$background = _ref57.background,\n      background = _ref57$background === void 0 ? null : _ref57$background;\n    const width = this.ctx.canvas.width;\n    const height = this.ctx.canvas.height;\n    const savedFillStyle = this.ctx.fillStyle;\n    this.ctx.fillStyle = background || \"#ffffff\";\n    this.ctx.fillRect(0, 0, width, height);\n    this.ctx.fillStyle = savedFillStyle;\n    if (transparency) {\n      const transparentCanvas = this.cachedCanvases.getCanvas(\"transparent\", width, height);\n      this.compositeCtx = this.ctx;\n      this.transparentCanvas = transparentCanvas.canvas;\n      this.ctx = transparentCanvas.context;\n      this.ctx.save();\n      this.ctx.transform(...getCurrentTransform(this.compositeCtx));\n    }\n    this.ctx.save();\n    resetCtxToDefault(this.ctx);\n    if (transform) {\n      this.ctx.transform(...transform);\n      this.outputScaleX = transform[0];\n      this.outputScaleY = transform[0];\n    }\n    this.ctx.transform(...viewport.transform);\n    this.viewportScale = viewport.scale;\n    this.baseTransform = getCurrentTransform(this.ctx);\n  }\n  executeOperatorList(operatorList, executionStartIdx, continueCallback, stepper) {\n    const argsArray = operatorList.argsArray;\n    const fnArray = operatorList.fnArray;\n    let i = executionStartIdx || 0;\n    const argsArrayLen = argsArray.length;\n    if (argsArrayLen === i) {\n      return i;\n    }\n    const chunkOperations = argsArrayLen - i > EXECUTION_STEPS && typeof continueCallback === \"function\";\n    const endTime = chunkOperations ? Date.now() + EXECUTION_TIME : 0;\n    let steps = 0;\n    const commonObjs = this.commonObjs;\n    const objs = this.objs;\n    let fnId;\n    while (true) {\n      if (stepper !== undefined && i === stepper.nextBreakPoint) {\n        stepper.breakIt(i, continueCallback);\n        return i;\n      }\n      fnId = fnArray[i];\n      if (fnId !== OPS.dependency) {\n        this[fnId].apply(this, argsArray[i]);\n      } else {\n        for (const depObjId of argsArray[i]) {\n          const objsPool = depObjId.startsWith(\"g_\") ? commonObjs : objs;\n          if (!objsPool.has(depObjId)) {\n            objsPool.get(depObjId, continueCallback);\n            return i;\n          }\n        }\n      }\n      i++;\n      if (i === argsArrayLen) {\n        return i;\n      }\n      if (chunkOperations && ++steps > EXECUTION_STEPS) {\n        if (Date.now() > endTime) {\n          continueCallback();\n          return i;\n        }\n        steps = 0;\n      }\n    }\n  }\n  endDrawing() {\n    _classPrivateFieldLooseBase(this, _restoreInitialState)[_restoreInitialState]();\n    this.cachedCanvases.clear();\n    this.cachedPatterns.clear();\n    for (const cache of this._cachedBitmapsMap.values()) {\n      for (const canvas of cache.values()) {\n        if (typeof HTMLCanvasElement !== \"undefined\" && canvas instanceof HTMLCanvasElement) {\n          canvas.width = canvas.height = 0;\n        }\n      }\n      cache.clear();\n    }\n    this._cachedBitmapsMap.clear();\n    _classPrivateFieldLooseBase(this, _drawFilter)[_drawFilter]();\n  }\n  _scaleImage(img, inverseTransform) {\n    var _img$width, _img$height;\n    const width = (_img$width = img.width) !== null && _img$width !== void 0 ? _img$width : img.displayWidth;\n    const height = (_img$height = img.height) !== null && _img$height !== void 0 ? _img$height : img.displayHeight;\n    let widthScale = Math.max(Math.hypot(inverseTransform[0], inverseTransform[1]), 1);\n    let heightScale = Math.max(Math.hypot(inverseTransform[2], inverseTransform[3]), 1);\n    let paintWidth = width,\n      paintHeight = height;\n    let tmpCanvasId = \"prescale1\";\n    let tmpCanvas, tmpCtx;\n    while (widthScale > 2 && paintWidth > 1 || heightScale > 2 && paintHeight > 1) {\n      let newWidth = paintWidth,\n        newHeight = paintHeight;\n      if (widthScale > 2 && paintWidth > 1) {\n        newWidth = paintWidth >= 16384 ? Math.floor(paintWidth / 2) - 1 || 1 : Math.ceil(paintWidth / 2);\n        widthScale /= paintWidth / newWidth;\n      }\n      if (heightScale > 2 && paintHeight > 1) {\n        newHeight = paintHeight >= 16384 ? Math.floor(paintHeight / 2) - 1 || 1 : Math.ceil(paintHeight) / 2;\n        heightScale /= paintHeight / newHeight;\n      }\n      tmpCanvas = this.cachedCanvases.getCanvas(tmpCanvasId, newWidth, newHeight);\n      tmpCtx = tmpCanvas.context;\n      tmpCtx.clearRect(0, 0, newWidth, newHeight);\n      tmpCtx.drawImage(img, 0, 0, paintWidth, paintHeight, 0, 0, newWidth, newHeight);\n      img = tmpCanvas.canvas;\n      paintWidth = newWidth;\n      paintHeight = newHeight;\n      tmpCanvasId = tmpCanvasId === \"prescale1\" ? \"prescale2\" : \"prescale1\";\n    }\n    return {\n      img,\n      paintWidth,\n      paintHeight\n    };\n  }\n  _createMaskCanvas(img) {\n    const ctx = this.ctx;\n    const width = img.width,\n      height = img.height;\n    const fillColor = this.current.fillColor;\n    const isPatternFill = this.current.patternFill;\n    const currentTransform = getCurrentTransform(ctx);\n    let cache, cacheKey, scaled, maskCanvas;\n    if ((img.bitmap || img.data) && img.count > 1) {\n      const mainKey = img.bitmap || img.data.buffer;\n      cacheKey = JSON.stringify(isPatternFill ? currentTransform : [currentTransform.slice(0, 4), fillColor]);\n      cache = this._cachedBitmapsMap.get(mainKey);\n      if (!cache) {\n        cache = new Map();\n        this._cachedBitmapsMap.set(mainKey, cache);\n      }\n      const cachedImage = cache.get(cacheKey);\n      if (cachedImage && !isPatternFill) {\n        const offsetX = Math.round(Math.min(currentTransform[0], currentTransform[2]) + currentTransform[4]);\n        const offsetY = Math.round(Math.min(currentTransform[1], currentTransform[3]) + currentTransform[5]);\n        return {\n          canvas: cachedImage,\n          offsetX,\n          offsetY\n        };\n      }\n      scaled = cachedImage;\n    }\n    if (!scaled) {\n      maskCanvas = this.cachedCanvases.getCanvas(\"maskCanvas\", width, height);\n      putBinaryImageMask(maskCanvas.context, img);\n    }\n    let maskToCanvas = Util.transform(currentTransform, [1 / width, 0, 0, -1 / height, 0, 0]);\n    maskToCanvas = Util.transform(maskToCanvas, [1, 0, 0, 1, 0, -height]);\n    const _Util$getAxialAligned = Util.getAxialAlignedBoundingBox([0, 0, width, height], maskToCanvas),\n      _Util$getAxialAligned2 = _slicedToArray(_Util$getAxialAligned, 4),\n      minX = _Util$getAxialAligned2[0],\n      minY = _Util$getAxialAligned2[1],\n      maxX = _Util$getAxialAligned2[2],\n      maxY = _Util$getAxialAligned2[3];\n    const drawnWidth = Math.round(maxX - minX) || 1;\n    const drawnHeight = Math.round(maxY - minY) || 1;\n    const fillCanvas = this.cachedCanvases.getCanvas(\"fillCanvas\", drawnWidth, drawnHeight);\n    const fillCtx = fillCanvas.context;\n    const offsetX = minX;\n    const offsetY = minY;\n    fillCtx.translate(-offsetX, -offsetY);\n    fillCtx.transform(...maskToCanvas);\n    if (!scaled) {\n      scaled = this._scaleImage(maskCanvas.canvas, getCurrentTransformInverse(fillCtx));\n      scaled = scaled.img;\n      if (cache && isPatternFill) {\n        cache.set(cacheKey, scaled);\n      }\n    }\n    fillCtx.imageSmoothingEnabled = getImageSmoothingEnabled(getCurrentTransform(fillCtx), img.interpolate);\n    drawImageAtIntegerCoords(fillCtx, scaled, 0, 0, scaled.width, scaled.height, 0, 0, width, height);\n    fillCtx.globalCompositeOperation = \"source-in\";\n    const inverse = Util.transform(getCurrentTransformInverse(fillCtx), [1, 0, 0, 1, -offsetX, -offsetY]);\n    fillCtx.fillStyle = isPatternFill ? fillColor.getPattern(ctx, this, inverse, PathType.FILL) : fillColor;\n    fillCtx.fillRect(0, 0, width, height);\n    if (cache && !isPatternFill) {\n      this.cachedCanvases.delete(\"fillCanvas\");\n      cache.set(cacheKey, fillCanvas.canvas);\n    }\n    return {\n      canvas: fillCanvas.canvas,\n      offsetX: Math.round(offsetX),\n      offsetY: Math.round(offsetY)\n    };\n  }\n  setLineWidth(width) {\n    if (width !== this.current.lineWidth) {\n      this._cachedScaleForStroking[0] = -1;\n    }\n    this.current.lineWidth = width;\n    this.ctx.lineWidth = width;\n  }\n  setLineCap(style) {\n    this.ctx.lineCap = LINE_CAP_STYLES[style];\n  }\n  setLineJoin(style) {\n    this.ctx.lineJoin = LINE_JOIN_STYLES[style];\n  }\n  setMiterLimit(limit) {\n    this.ctx.miterLimit = limit;\n  }\n  setDash(dashArray, dashPhase) {\n    const ctx = this.ctx;\n    if (ctx.setLineDash !== undefined) {\n      ctx.setLineDash(dashArray);\n      ctx.lineDashOffset = dashPhase;\n    }\n  }\n  setRenderingIntent(intent) {}\n  setFlatness(flatness) {}\n  setGState(states) {\n    for (const _ref58 of states) {\n      var _ref59 = _slicedToArray(_ref58, 2);\n      const key = _ref59[0];\n      const value = _ref59[1];\n      switch (key) {\n        case \"LW\":\n          this.setLineWidth(value);\n          break;\n        case \"LC\":\n          this.setLineCap(value);\n          break;\n        case \"LJ\":\n          this.setLineJoin(value);\n          break;\n        case \"ML\":\n          this.setMiterLimit(value);\n          break;\n        case \"D\":\n          this.setDash(value[0], value[1]);\n          break;\n        case \"RI\":\n          this.setRenderingIntent(value);\n          break;\n        case \"FL\":\n          this.setFlatness(value);\n          break;\n        case \"Font\":\n          this.setFont(value[0], value[1]);\n          break;\n        case \"CA\":\n          this.current.strokeAlpha = value;\n          break;\n        case \"ca\":\n          this.current.fillAlpha = value;\n          this.ctx.globalAlpha = value;\n          break;\n        case \"BM\":\n          this.ctx.globalCompositeOperation = value;\n          break;\n        case \"SMask\":\n          this.current.activeSMask = value ? this.tempSMask : null;\n          this.tempSMask = null;\n          this.checkSMaskState();\n          break;\n        case \"TR\":\n          this.ctx.filter = this.current.transferMaps = this.filterFactory.addFilter(value);\n          break;\n      }\n    }\n  }\n  get inSMaskMode() {\n    return !!this.suspendedCtx;\n  }\n  checkSMaskState() {\n    const inSMaskMode = this.inSMaskMode;\n    if (this.current.activeSMask && !inSMaskMode) {\n      this.beginSMaskMode();\n    } else if (!this.current.activeSMask && inSMaskMode) {\n      this.endSMaskMode();\n    }\n  }\n  beginSMaskMode() {\n    if (this.inSMaskMode) {\n      throw new Error(\"beginSMaskMode called while already in smask mode\");\n    }\n    const drawnWidth = this.ctx.canvas.width;\n    const drawnHeight = this.ctx.canvas.height;\n    const cacheId = \"smaskGroupAt\" + this.groupLevel;\n    const scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight);\n    this.suspendedCtx = this.ctx;\n    this.ctx = scratchCanvas.context;\n    const ctx = this.ctx;\n    ctx.setTransform(...getCurrentTransform(this.suspendedCtx));\n    copyCtxState(this.suspendedCtx, ctx);\n    mirrorContextOperations(ctx, this.suspendedCtx);\n    this.setGState([[\"BM\", \"source-over\"], [\"ca\", 1], [\"CA\", 1]]);\n  }\n  endSMaskMode() {\n    if (!this.inSMaskMode) {\n      throw new Error(\"endSMaskMode called while not in smask mode\");\n    }\n    this.ctx._removeMirroring();\n    copyCtxState(this.ctx, this.suspendedCtx);\n    this.ctx = this.suspendedCtx;\n    this.suspendedCtx = null;\n  }\n  compose(dirtyBox) {\n    if (!this.current.activeSMask) {\n      return;\n    }\n    if (!dirtyBox) {\n      dirtyBox = [0, 0, this.ctx.canvas.width, this.ctx.canvas.height];\n    } else {\n      dirtyBox[0] = Math.floor(dirtyBox[0]);\n      dirtyBox[1] = Math.floor(dirtyBox[1]);\n      dirtyBox[2] = Math.ceil(dirtyBox[2]);\n      dirtyBox[3] = Math.ceil(dirtyBox[3]);\n    }\n    const smask = this.current.activeSMask;\n    const suspendedCtx = this.suspendedCtx;\n    this.composeSMask(suspendedCtx, smask, this.ctx, dirtyBox);\n    this.ctx.save();\n    this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    this.ctx.restore();\n  }\n  composeSMask(ctx, smask, layerCtx, layerBox) {\n    const layerOffsetX = layerBox[0];\n    const layerOffsetY = layerBox[1];\n    const layerWidth = layerBox[2] - layerOffsetX;\n    const layerHeight = layerBox[3] - layerOffsetY;\n    if (layerWidth === 0 || layerHeight === 0) {\n      return;\n    }\n    this.genericComposeSMask(smask.context, layerCtx, layerWidth, layerHeight, smask.subtype, smask.backdrop, smask.transferMap, layerOffsetX, layerOffsetY, smask.offsetX, smask.offsetY);\n    ctx.save();\n    ctx.globalAlpha = 1;\n    ctx.globalCompositeOperation = \"source-over\";\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    ctx.drawImage(layerCtx.canvas, 0, 0);\n    ctx.restore();\n  }\n  genericComposeSMask(maskCtx, layerCtx, width, height, subtype, backdrop, transferMap, layerOffsetX, layerOffsetY, maskOffsetX, maskOffsetY) {\n    let maskCanvas = maskCtx.canvas;\n    let maskX = layerOffsetX - maskOffsetX;\n    let maskY = layerOffsetY - maskOffsetY;\n    if (backdrop) {\n      const backdropRGB = Util.makeHexColor(...backdrop);\n      if (maskX < 0 || maskY < 0 || maskX + width > maskCanvas.width || maskY + height > maskCanvas.height) {\n        const canvas = this.cachedCanvases.getCanvas(\"maskExtension\", width, height);\n        const ctx = canvas.context;\n        ctx.drawImage(maskCanvas, -maskX, -maskY);\n        ctx.globalCompositeOperation = \"destination-atop\";\n        ctx.fillStyle = backdropRGB;\n        ctx.fillRect(0, 0, width, height);\n        ctx.globalCompositeOperation = \"source-over\";\n        maskCanvas = canvas.canvas;\n        maskX = maskY = 0;\n      } else {\n        maskCtx.save();\n        maskCtx.globalAlpha = 1;\n        maskCtx.setTransform(1, 0, 0, 1, 0, 0);\n        const clip = new Path2D();\n        clip.rect(maskX, maskY, width, height);\n        maskCtx.clip(clip);\n        maskCtx.globalCompositeOperation = \"destination-atop\";\n        maskCtx.fillStyle = backdropRGB;\n        maskCtx.fillRect(maskX, maskY, width, height);\n        maskCtx.restore();\n      }\n    }\n    layerCtx.save();\n    layerCtx.globalAlpha = 1;\n    layerCtx.setTransform(1, 0, 0, 1, 0, 0);\n    if (subtype === \"Alpha\" && transferMap) {\n      layerCtx.filter = this.filterFactory.addAlphaFilter(transferMap);\n    } else if (subtype === \"Luminosity\") {\n      layerCtx.filter = this.filterFactory.addLuminosityFilter(transferMap);\n    }\n    const clip = new Path2D();\n    clip.rect(layerOffsetX, layerOffsetY, width, height);\n    layerCtx.clip(clip);\n    layerCtx.globalCompositeOperation = \"destination-in\";\n    layerCtx.drawImage(maskCanvas, maskX, maskY, width, height, layerOffsetX, layerOffsetY, width, height);\n    layerCtx.restore();\n  }\n  save() {\n    if (this.inSMaskMode) {\n      copyCtxState(this.ctx, this.suspendedCtx);\n      this.suspendedCtx.save();\n    } else {\n      this.ctx.save();\n    }\n    const old = this.current;\n    this.stateStack.push(old);\n    this.current = old.clone();\n  }\n  restore() {\n    if (this.stateStack.length === 0 && this.inSMaskMode) {\n      this.endSMaskMode();\n    }\n    if (this.stateStack.length !== 0) {\n      this.current = this.stateStack.pop();\n      if (this.inSMaskMode) {\n        this.suspendedCtx.restore();\n        copyCtxState(this.suspendedCtx, this.ctx);\n      } else {\n        this.ctx.restore();\n      }\n      this.checkSMaskState();\n      this.pendingClip = null;\n      this._cachedScaleForStroking[0] = -1;\n      this._cachedGetSinglePixelWidth = null;\n    }\n  }\n  transform(a, b, c, d, e, f) {\n    this.ctx.transform(a, b, c, d, e, f);\n    this._cachedScaleForStroking[0] = -1;\n    this._cachedGetSinglePixelWidth = null;\n  }\n  constructPath(ops, args, minMax) {\n    const ctx = this.ctx;\n    const current = this.current;\n    let x = current.x,\n      y = current.y;\n    let startX, startY;\n    const currentTransform = getCurrentTransform(ctx);\n    const isScalingMatrix = currentTransform[0] === 0 && currentTransform[3] === 0 || currentTransform[1] === 0 && currentTransform[2] === 0;\n    const minMaxForBezier = isScalingMatrix ? minMax.slice(0) : null;\n    for (let i = 0, j = 0, ii = ops.length; i < ii; i++) {\n      switch (ops[i] | 0) {\n        case OPS.rectangle:\n          x = args[j++];\n          y = args[j++];\n          const width = args[j++];\n          const height = args[j++];\n          const xw = x + width;\n          const yh = y + height;\n          ctx.moveTo(x, y);\n          if (width === 0 || height === 0) {\n            ctx.lineTo(xw, yh);\n          } else {\n            ctx.lineTo(xw, y);\n            ctx.lineTo(xw, yh);\n            ctx.lineTo(x, yh);\n          }\n          if (!isScalingMatrix) {\n            current.updateRectMinMax(currentTransform, [x, y, xw, yh]);\n          }\n          ctx.closePath();\n          break;\n        case OPS.moveTo:\n          x = args[j++];\n          y = args[j++];\n          ctx.moveTo(x, y);\n          if (!isScalingMatrix) {\n            current.updatePathMinMax(currentTransform, x, y);\n          }\n          break;\n        case OPS.lineTo:\n          x = args[j++];\n          y = args[j++];\n          ctx.lineTo(x, y);\n          if (!isScalingMatrix) {\n            current.updatePathMinMax(currentTransform, x, y);\n          }\n          break;\n        case OPS.curveTo:\n          startX = x;\n          startY = y;\n          x = args[j + 4];\n          y = args[j + 5];\n          ctx.bezierCurveTo(args[j], args[j + 1], args[j + 2], args[j + 3], x, y);\n          current.updateCurvePathMinMax(currentTransform, startX, startY, args[j], args[j + 1], args[j + 2], args[j + 3], x, y, minMaxForBezier);\n          j += 6;\n          break;\n        case OPS.curveTo2:\n          startX = x;\n          startY = y;\n          ctx.bezierCurveTo(x, y, args[j], args[j + 1], args[j + 2], args[j + 3]);\n          current.updateCurvePathMinMax(currentTransform, startX, startY, x, y, args[j], args[j + 1], args[j + 2], args[j + 3], minMaxForBezier);\n          x = args[j + 2];\n          y = args[j + 3];\n          j += 4;\n          break;\n        case OPS.curveTo3:\n          startX = x;\n          startY = y;\n          x = args[j + 2];\n          y = args[j + 3];\n          ctx.bezierCurveTo(args[j], args[j + 1], x, y, x, y);\n          current.updateCurvePathMinMax(currentTransform, startX, startY, args[j], args[j + 1], x, y, x, y, minMaxForBezier);\n          j += 4;\n          break;\n        case OPS.closePath:\n          ctx.closePath();\n          break;\n      }\n    }\n    if (isScalingMatrix) {\n      current.updateScalingPathMinMax(currentTransform, minMaxForBezier);\n    }\n    current.setCurrentPoint(x, y);\n  }\n  closePath() {\n    this.ctx.closePath();\n  }\n  stroke() {\n    let consumePath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    const ctx = this.ctx;\n    const strokeColor = this.current.strokeColor;\n    ctx.globalAlpha = this.current.strokeAlpha;\n    if (this.contentVisible) {\n      if (typeof strokeColor === \"object\" && strokeColor !== null && strokeColor !== void 0 && strokeColor.getPattern) {\n        ctx.save();\n        ctx.strokeStyle = strokeColor.getPattern(ctx, this, getCurrentTransformInverse(ctx), PathType.STROKE);\n        this.rescaleAndStroke(false);\n        ctx.restore();\n      } else {\n        this.rescaleAndStroke(true);\n      }\n    }\n    if (consumePath) {\n      this.consumePath(this.current.getClippedPathBoundingBox());\n    }\n    ctx.globalAlpha = this.current.fillAlpha;\n  }\n  closeStroke() {\n    this.closePath();\n    this.stroke();\n  }\n  fill() {\n    let consumePath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    const ctx = this.ctx;\n    const fillColor = this.current.fillColor;\n    const isPatternFill = this.current.patternFill;\n    let needRestore = false;\n    if (isPatternFill) {\n      ctx.save();\n      ctx.fillStyle = fillColor.getPattern(ctx, this, getCurrentTransformInverse(ctx), PathType.FILL);\n      needRestore = true;\n    }\n    const intersect = this.current.getClippedPathBoundingBox();\n    if (this.contentVisible && intersect !== null) {\n      if (this.pendingEOFill) {\n        ctx.fill(\"evenodd\");\n        this.pendingEOFill = false;\n      } else {\n        ctx.fill();\n      }\n    }\n    if (needRestore) {\n      ctx.restore();\n    }\n    if (consumePath) {\n      this.consumePath(intersect);\n    }\n  }\n  eoFill() {\n    this.pendingEOFill = true;\n    this.fill();\n  }\n  fillStroke() {\n    this.fill(false);\n    this.stroke(false);\n    this.consumePath();\n  }\n  eoFillStroke() {\n    this.pendingEOFill = true;\n    this.fillStroke();\n  }\n  closeFillStroke() {\n    this.closePath();\n    this.fillStroke();\n  }\n  closeEOFillStroke() {\n    this.pendingEOFill = true;\n    this.closePath();\n    this.fillStroke();\n  }\n  endPath() {\n    this.consumePath();\n  }\n  clip() {\n    this.pendingClip = NORMAL_CLIP;\n  }\n  eoClip() {\n    this.pendingClip = EO_CLIP;\n  }\n  beginText() {\n    this.current.textMatrix = IDENTITY_MATRIX;\n    this.current.textMatrixScale = 1;\n    this.current.x = this.current.lineX = 0;\n    this.current.y = this.current.lineY = 0;\n  }\n  endText() {\n    const paths = this.pendingTextPaths;\n    const ctx = this.ctx;\n    if (paths === undefined) {\n      ctx.beginPath();\n      return;\n    }\n    ctx.save();\n    ctx.beginPath();\n    for (const path of paths) {\n      ctx.setTransform(...path.transform);\n      ctx.translate(path.x, path.y);\n      path.addToPath(ctx, path.fontSize);\n    }\n    ctx.restore();\n    ctx.clip();\n    ctx.beginPath();\n    delete this.pendingTextPaths;\n  }\n  setCharSpacing(spacing) {\n    this.current.charSpacing = spacing;\n  }\n  setWordSpacing(spacing) {\n    this.current.wordSpacing = spacing;\n  }\n  setHScale(scale) {\n    this.current.textHScale = scale / 100;\n  }\n  setLeading(leading) {\n    this.current.leading = -leading;\n  }\n  setFont(fontRefName, size) {\n    var _fontObj$systemFontIn;\n    const fontObj = this.commonObjs.get(fontRefName);\n    const current = this.current;\n    if (!fontObj) {\n      throw new Error(`Can't find font for ${fontRefName}`);\n    }\n    current.fontMatrix = fontObj.fontMatrix || FONT_IDENTITY_MATRIX;\n    if (current.fontMatrix[0] === 0 || current.fontMatrix[3] === 0) {\n      warn(\"Invalid font matrix for font \" + fontRefName);\n    }\n    if (size < 0) {\n      size = -size;\n      current.fontDirection = -1;\n    } else {\n      current.fontDirection = 1;\n    }\n    this.current.font = fontObj;\n    this.current.fontSize = size;\n    if (fontObj.isType3Font) {\n      return;\n    }\n    const name = fontObj.loadedName || \"sans-serif\";\n    const typeface = ((_fontObj$systemFontIn = fontObj.systemFontInfo) === null || _fontObj$systemFontIn === void 0 ? void 0 : _fontObj$systemFontIn.css) || `\"${name}\", ${fontObj.fallbackName}`;\n    let bold = \"normal\";\n    if (fontObj.black) {\n      bold = \"900\";\n    } else if (fontObj.bold) {\n      bold = \"bold\";\n    }\n    const italic = fontObj.italic ? \"italic\" : \"normal\";\n    let browserFontSize = size;\n    if (size < MIN_FONT_SIZE) {\n      browserFontSize = MIN_FONT_SIZE;\n    } else if (size > MAX_FONT_SIZE) {\n      browserFontSize = MAX_FONT_SIZE;\n    }\n    this.current.fontSizeScale = size / browserFontSize;\n    this.ctx.font = `${italic} ${bold} ${browserFontSize}px ${typeface}`;\n  }\n  setTextRenderingMode(mode) {\n    this.current.textRenderingMode = mode;\n  }\n  setTextRise(rise) {\n    this.current.textRise = rise;\n  }\n  moveText(x, y) {\n    this.current.x = this.current.lineX += x;\n    this.current.y = this.current.lineY += y;\n  }\n  setLeadingMoveText(x, y) {\n    this.setLeading(-y);\n    this.moveText(x, y);\n  }\n  setTextMatrix(a, b, c, d, e, f) {\n    this.current.textMatrix = [a, b, c, d, e, f];\n    this.current.textMatrixScale = Math.hypot(a, b);\n    this.current.x = this.current.lineX = 0;\n    this.current.y = this.current.lineY = 0;\n  }\n  nextLine() {\n    this.moveText(0, this.current.leading);\n  }\n  paintChar(character, x, y, patternTransform) {\n    const ctx = this.ctx;\n    const current = this.current;\n    const font = current.font;\n    const textRenderingMode = current.textRenderingMode;\n    const fontSize = current.fontSize / current.fontSizeScale;\n    const fillStrokeMode = textRenderingMode & TextRenderingMode.FILL_STROKE_MASK;\n    const isAddToPathSet = !!(textRenderingMode & TextRenderingMode.ADD_TO_PATH_FLAG);\n    const patternFill = current.patternFill && !font.missingFile;\n    let addToPath;\n    if (font.disableFontFace || isAddToPathSet || patternFill) {\n      addToPath = font.getPathGenerator(this.commonObjs, character);\n    }\n    if (font.disableFontFace || patternFill) {\n      ctx.save();\n      ctx.translate(x, y);\n      ctx.beginPath();\n      addToPath(ctx, fontSize);\n      if (patternTransform) {\n        ctx.setTransform(...patternTransform);\n      }\n      if (fillStrokeMode === TextRenderingMode.FILL || fillStrokeMode === TextRenderingMode.FILL_STROKE) {\n        ctx.fill();\n      }\n      if (fillStrokeMode === TextRenderingMode.STROKE || fillStrokeMode === TextRenderingMode.FILL_STROKE) {\n        ctx.stroke();\n      }\n      ctx.restore();\n    } else {\n      if (fillStrokeMode === TextRenderingMode.FILL || fillStrokeMode === TextRenderingMode.FILL_STROKE) {\n        ctx.fillText(character, x, y);\n      }\n      if (fillStrokeMode === TextRenderingMode.STROKE || fillStrokeMode === TextRenderingMode.FILL_STROKE) {\n        ctx.strokeText(character, x, y);\n      }\n    }\n    if (isAddToPathSet) {\n      const paths = this.pendingTextPaths || (this.pendingTextPaths = []);\n      paths.push({\n        transform: getCurrentTransform(ctx),\n        x,\n        y,\n        fontSize,\n        addToPath\n      });\n    }\n  }\n  get isFontSubpixelAAEnabled() {\n    const _this$cachedCanvases$ = this.cachedCanvases.getCanvas(\"isFontSubpixelAAEnabled\", 10, 10),\n      ctx = _this$cachedCanvases$.context;\n    ctx.scale(1.5, 1);\n    ctx.fillText(\"I\", 0, 10);\n    const data = ctx.getImageData(0, 0, 10, 10).data;\n    let enabled = false;\n    for (let i = 3; i < data.length; i += 4) {\n      if (data[i] > 0 && data[i] < 255) {\n        enabled = true;\n        break;\n      }\n    }\n    return shadow(this, \"isFontSubpixelAAEnabled\", enabled);\n  }\n  showText(glyphs) {\n    const current = this.current;\n    const font = current.font;\n    if (font.isType3Font) {\n      return this.showType3Text(glyphs);\n    }\n    const fontSize = current.fontSize;\n    if (fontSize === 0) {\n      return undefined;\n    }\n    const ctx = this.ctx;\n    const fontSizeScale = current.fontSizeScale;\n    const charSpacing = current.charSpacing;\n    const wordSpacing = current.wordSpacing;\n    const fontDirection = current.fontDirection;\n    const textHScale = current.textHScale * fontDirection;\n    const glyphsLength = glyphs.length;\n    const vertical = font.vertical;\n    const spacingDir = vertical ? 1 : -1;\n    const defaultVMetrics = font.defaultVMetrics;\n    const widthAdvanceScale = fontSize * current.fontMatrix[0];\n    const simpleFillText = current.textRenderingMode === TextRenderingMode.FILL && !font.disableFontFace && !current.patternFill;\n    ctx.save();\n    ctx.transform(...current.textMatrix);\n    ctx.translate(current.x, current.y + current.textRise);\n    if (fontDirection > 0) {\n      ctx.scale(textHScale, -1);\n    } else {\n      ctx.scale(textHScale, 1);\n    }\n    let patternTransform;\n    if (current.patternFill) {\n      ctx.save();\n      const pattern = current.fillColor.getPattern(ctx, this, getCurrentTransformInverse(ctx), PathType.FILL);\n      patternTransform = getCurrentTransform(ctx);\n      ctx.restore();\n      ctx.fillStyle = pattern;\n    }\n    let lineWidth = current.lineWidth;\n    const scale = current.textMatrixScale;\n    if (scale === 0 || lineWidth === 0) {\n      const fillStrokeMode = current.textRenderingMode & TextRenderingMode.FILL_STROKE_MASK;\n      if (fillStrokeMode === TextRenderingMode.STROKE || fillStrokeMode === TextRenderingMode.FILL_STROKE) {\n        lineWidth = this.getSinglePixelWidth();\n      }\n    } else {\n      lineWidth /= scale;\n    }\n    if (fontSizeScale !== 1.0) {\n      ctx.scale(fontSizeScale, fontSizeScale);\n      lineWidth /= fontSizeScale;\n    }\n    ctx.lineWidth = lineWidth;\n    if (font.isInvalidPDFjsFont) {\n      const chars = [];\n      let width = 0;\n      for (const glyph of glyphs) {\n        chars.push(glyph.unicode);\n        width += glyph.width;\n      }\n      ctx.fillText(chars.join(\"\"), 0, 0);\n      current.x += width * widthAdvanceScale * textHScale;\n      ctx.restore();\n      this.compose();\n      return undefined;\n    }\n    let x = 0,\n      i;\n    for (i = 0; i < glyphsLength; ++i) {\n      const glyph = glyphs[i];\n      if (typeof glyph === \"number\") {\n        x += spacingDir * glyph * fontSize / 1000;\n        continue;\n      }\n      let restoreNeeded = false;\n      const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n      const character = glyph.fontChar;\n      const accent = glyph.accent;\n      let scaledX, scaledY;\n      let width = glyph.width;\n      if (vertical) {\n        const vmetric = glyph.vmetric || defaultVMetrics;\n        const vx = -(glyph.vmetric ? vmetric[1] : width * 0.5) * widthAdvanceScale;\n        const vy = vmetric[2] * widthAdvanceScale;\n        width = vmetric ? -vmetric[0] : width;\n        scaledX = vx / fontSizeScale;\n        scaledY = (x + vy) / fontSizeScale;\n      } else {\n        scaledX = x / fontSizeScale;\n        scaledY = 0;\n      }\n      if (font.remeasure && width > 0) {\n        const measuredWidth = ctx.measureText(character).width * 1000 / fontSize * fontSizeScale;\n        if (width < measuredWidth && this.isFontSubpixelAAEnabled) {\n          const characterScaleX = width / measuredWidth;\n          restoreNeeded = true;\n          ctx.save();\n          ctx.scale(characterScaleX, 1);\n          scaledX /= characterScaleX;\n        } else if (width !== measuredWidth) {\n          scaledX += (width - measuredWidth) / 2000 * fontSize / fontSizeScale;\n        }\n      }\n      if (this.contentVisible && (glyph.isInFont || font.missingFile)) {\n        if (simpleFillText && !accent) {\n          ctx.fillText(character, scaledX, scaledY);\n        } else {\n          this.paintChar(character, scaledX, scaledY, patternTransform);\n          if (accent) {\n            const scaledAccentX = scaledX + fontSize * accent.offset.x / fontSizeScale;\n            const scaledAccentY = scaledY - fontSize * accent.offset.y / fontSizeScale;\n            this.paintChar(accent.fontChar, scaledAccentX, scaledAccentY, patternTransform);\n          }\n        }\n      }\n      const charWidth = vertical ? width * widthAdvanceScale - spacing * fontDirection : width * widthAdvanceScale + spacing * fontDirection;\n      x += charWidth;\n      if (restoreNeeded) {\n        ctx.restore();\n      }\n    }\n    if (vertical) {\n      current.y -= x;\n    } else {\n      current.x += x * textHScale;\n    }\n    ctx.restore();\n    this.compose();\n    return undefined;\n  }\n  showType3Text(glyphs) {\n    const ctx = this.ctx;\n    const current = this.current;\n    const font = current.font;\n    const fontSize = current.fontSize;\n    const fontDirection = current.fontDirection;\n    const spacingDir = font.vertical ? 1 : -1;\n    const charSpacing = current.charSpacing;\n    const wordSpacing = current.wordSpacing;\n    const textHScale = current.textHScale * fontDirection;\n    const fontMatrix = current.fontMatrix || FONT_IDENTITY_MATRIX;\n    const glyphsLength = glyphs.length;\n    const isTextInvisible = current.textRenderingMode === TextRenderingMode.INVISIBLE;\n    let i, glyph, width, spacingLength;\n    if (isTextInvisible || fontSize === 0) {\n      return;\n    }\n    this._cachedScaleForStroking[0] = -1;\n    this._cachedGetSinglePixelWidth = null;\n    ctx.save();\n    ctx.transform(...current.textMatrix);\n    ctx.translate(current.x, current.y);\n    ctx.scale(textHScale, fontDirection);\n    for (i = 0; i < glyphsLength; ++i) {\n      glyph = glyphs[i];\n      if (typeof glyph === \"number\") {\n        spacingLength = spacingDir * glyph * fontSize / 1000;\n        this.ctx.translate(spacingLength, 0);\n        current.x += spacingLength * textHScale;\n        continue;\n      }\n      const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n      const operatorList = font.charProcOperatorList[glyph.operatorListId];\n      if (!operatorList) {\n        warn(`Type3 character \"${glyph.operatorListId}\" is not available.`);\n        continue;\n      }\n      if (this.contentVisible) {\n        this.processingType3 = glyph;\n        this.save();\n        ctx.scale(fontSize, fontSize);\n        ctx.transform(...fontMatrix);\n        this.executeOperatorList(operatorList);\n        this.restore();\n      }\n      const transformed = Util.applyTransform([glyph.width, 0], fontMatrix);\n      width = transformed[0] * fontSize + spacing;\n      ctx.translate(width, 0);\n      current.x += width * textHScale;\n    }\n    ctx.restore();\n    this.processingType3 = null;\n  }\n  setCharWidth(xWidth, yWidth) {}\n  setCharWidthAndBounds(xWidth, yWidth, llx, lly, urx, ury) {\n    this.ctx.rect(llx, lly, urx - llx, ury - lly);\n    this.ctx.clip();\n    this.endPath();\n  }\n  getColorN_Pattern(IR) {\n    let pattern;\n    if (IR[0] === \"TilingPattern\") {\n      const color = IR[1];\n      const baseTransform = this.baseTransform || getCurrentTransform(this.ctx);\n      const canvasGraphicsFactory = {\n        createCanvasGraphics: ctx => new CanvasGraphics(ctx, this.commonObjs, this.objs, this.canvasFactory, this.filterFactory, {\n          optionalContentConfig: this.optionalContentConfig,\n          markedContentStack: this.markedContentStack\n        })\n      };\n      pattern = new TilingPattern(IR, color, this.ctx, canvasGraphicsFactory, baseTransform);\n    } else {\n      pattern = this._getPattern(IR[1], IR[2]);\n    }\n    return pattern;\n  }\n  setStrokeColorN() {\n    this.current.strokeColor = this.getColorN_Pattern(arguments);\n  }\n  setFillColorN() {\n    this.current.fillColor = this.getColorN_Pattern(arguments);\n    this.current.patternFill = true;\n  }\n  setStrokeRGBColor(r, g, b) {\n    this.ctx.strokeStyle = this.current.strokeColor = Util.makeHexColor(r, g, b);\n  }\n  setStrokeTransparent() {\n    this.ctx.strokeStyle = this.current.strokeColor = \"transparent\";\n  }\n  setFillRGBColor(r, g, b) {\n    this.ctx.fillStyle = this.current.fillColor = Util.makeHexColor(r, g, b);\n    this.current.patternFill = false;\n  }\n  setFillTransparent() {\n    this.ctx.fillStyle = this.current.fillColor = \"transparent\";\n    this.current.patternFill = false;\n  }\n  _getPattern(objId) {\n    let matrix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let pattern;\n    if (this.cachedPatterns.has(objId)) {\n      pattern = this.cachedPatterns.get(objId);\n    } else {\n      pattern = getShadingPattern(this.getObject(objId));\n      this.cachedPatterns.set(objId, pattern);\n    }\n    if (matrix) {\n      pattern.matrix = matrix;\n    }\n    return pattern;\n  }\n  shadingFill(objId) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const ctx = this.ctx;\n    this.save();\n    const pattern = this._getPattern(objId);\n    ctx.fillStyle = pattern.getPattern(ctx, this, getCurrentTransformInverse(ctx), PathType.SHADING);\n    const inv = getCurrentTransformInverse(ctx);\n    if (inv) {\n      const _ctx$canvas = ctx.canvas,\n        width = _ctx$canvas.width,\n        height = _ctx$canvas.height;\n      const _Util$getAxialAligned3 = Util.getAxialAlignedBoundingBox([0, 0, width, height], inv),\n        _Util$getAxialAligned4 = _slicedToArray(_Util$getAxialAligned3, 4),\n        x0 = _Util$getAxialAligned4[0],\n        y0 = _Util$getAxialAligned4[1],\n        x1 = _Util$getAxialAligned4[2],\n        y1 = _Util$getAxialAligned4[3];\n      this.ctx.fillRect(x0, y0, x1 - x0, y1 - y0);\n    } else {\n      this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);\n    }\n    this.compose(this.current.getClippedPathBoundingBox());\n    this.restore();\n  }\n  beginInlineImage() {\n    unreachable(\"Should not call beginInlineImage\");\n  }\n  beginImageData() {\n    unreachable(\"Should not call beginImageData\");\n  }\n  paintFormXObjectBegin(matrix, bbox) {\n    if (!this.contentVisible) {\n      return;\n    }\n    this.save();\n    this.baseTransformStack.push(this.baseTransform);\n    if (matrix) {\n      this.transform(...matrix);\n    }\n    this.baseTransform = getCurrentTransform(this.ctx);\n    if (bbox) {\n      const width = bbox[2] - bbox[0];\n      const height = bbox[3] - bbox[1];\n      this.ctx.rect(bbox[0], bbox[1], width, height);\n      this.current.updateRectMinMax(getCurrentTransform(this.ctx), bbox);\n      this.clip();\n      this.endPath();\n    }\n  }\n  paintFormXObjectEnd() {\n    if (!this.contentVisible) {\n      return;\n    }\n    this.restore();\n    this.baseTransform = this.baseTransformStack.pop();\n  }\n  beginGroup(group) {\n    if (!this.contentVisible) {\n      return;\n    }\n    this.save();\n    if (this.inSMaskMode) {\n      this.endSMaskMode();\n      this.current.activeSMask = null;\n    }\n    const currentCtx = this.ctx;\n    if (!group.isolated) {\n      info(\"TODO: Support non-isolated groups.\");\n    }\n    if (group.knockout) {\n      warn(\"Knockout groups not supported.\");\n    }\n    const currentTransform = getCurrentTransform(currentCtx);\n    if (group.matrix) {\n      currentCtx.transform(...group.matrix);\n    }\n    if (!group.bbox) {\n      throw new Error(\"Bounding box is required.\");\n    }\n    let bounds = Util.getAxialAlignedBoundingBox(group.bbox, getCurrentTransform(currentCtx));\n    const canvasBounds = [0, 0, currentCtx.canvas.width, currentCtx.canvas.height];\n    bounds = Util.intersect(bounds, canvasBounds) || [0, 0, 0, 0];\n    const offsetX = Math.floor(bounds[0]);\n    const offsetY = Math.floor(bounds[1]);\n    const drawnWidth = Math.max(Math.ceil(bounds[2]) - offsetX, 1);\n    const drawnHeight = Math.max(Math.ceil(bounds[3]) - offsetY, 1);\n    this.current.startNewPathAndClipBox([0, 0, drawnWidth, drawnHeight]);\n    let cacheId = \"groupAt\" + this.groupLevel;\n    if (group.smask) {\n      cacheId += \"_smask_\" + this.smaskCounter++ % 2;\n    }\n    const scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight);\n    const groupCtx = scratchCanvas.context;\n    groupCtx.translate(-offsetX, -offsetY);\n    groupCtx.transform(...currentTransform);\n    if (group.smask) {\n      this.smaskStack.push({\n        canvas: scratchCanvas.canvas,\n        context: groupCtx,\n        offsetX,\n        offsetY,\n        subtype: group.smask.subtype,\n        backdrop: group.smask.backdrop,\n        transferMap: group.smask.transferMap || null,\n        startTransformInverse: null\n      });\n    } else {\n      currentCtx.setTransform(1, 0, 0, 1, 0, 0);\n      currentCtx.translate(offsetX, offsetY);\n      currentCtx.save();\n    }\n    copyCtxState(currentCtx, groupCtx);\n    this.ctx = groupCtx;\n    this.setGState([[\"BM\", \"source-over\"], [\"ca\", 1], [\"CA\", 1]]);\n    this.groupStack.push(currentCtx);\n    this.groupLevel++;\n  }\n  endGroup(group) {\n    if (!this.contentVisible) {\n      return;\n    }\n    this.groupLevel--;\n    const groupCtx = this.ctx;\n    const ctx = this.groupStack.pop();\n    this.ctx = ctx;\n    this.ctx.imageSmoothingEnabled = false;\n    if (group.smask) {\n      this.tempSMask = this.smaskStack.pop();\n      this.restore();\n    } else {\n      this.ctx.restore();\n      const currentMtx = getCurrentTransform(this.ctx);\n      this.restore();\n      this.ctx.save();\n      this.ctx.setTransform(...currentMtx);\n      const dirtyBox = Util.getAxialAlignedBoundingBox([0, 0, groupCtx.canvas.width, groupCtx.canvas.height], currentMtx);\n      this.ctx.drawImage(groupCtx.canvas, 0, 0);\n      this.ctx.restore();\n      this.compose(dirtyBox);\n    }\n  }\n  beginAnnotation(id, rect, transform, matrix, hasOwnCanvas) {\n    _classPrivateFieldLooseBase(this, _restoreInitialState)[_restoreInitialState]();\n    resetCtxToDefault(this.ctx);\n    this.ctx.save();\n    this.save();\n    if (this.baseTransform) {\n      this.ctx.setTransform(...this.baseTransform);\n    }\n    if (rect) {\n      const width = rect[2] - rect[0];\n      const height = rect[3] - rect[1];\n      if (hasOwnCanvas && this.annotationCanvasMap) {\n        transform = transform.slice();\n        transform[4] -= rect[0];\n        transform[5] -= rect[1];\n        rect = rect.slice();\n        rect[0] = rect[1] = 0;\n        rect[2] = width;\n        rect[3] = height;\n        const _Util$singularValueDe = Util.singularValueDecompose2dScale(getCurrentTransform(this.ctx)),\n          _Util$singularValueDe2 = _slicedToArray(_Util$singularValueDe, 2),\n          scaleX = _Util$singularValueDe2[0],\n          scaleY = _Util$singularValueDe2[1];\n        const viewportScale = this.viewportScale;\n        const canvasWidth = Math.ceil(width * this.outputScaleX * viewportScale);\n        const canvasHeight = Math.ceil(height * this.outputScaleY * viewportScale);\n        this.annotationCanvas = this.canvasFactory.create(canvasWidth, canvasHeight);\n        const _this$annotationCanva = this.annotationCanvas,\n          canvas = _this$annotationCanva.canvas,\n          context = _this$annotationCanva.context;\n        this.annotationCanvasMap.set(id, canvas);\n        this.annotationCanvas.savedCtx = this.ctx;\n        this.ctx = context;\n        this.ctx.save();\n        this.ctx.setTransform(scaleX, 0, 0, -scaleY, 0, height * scaleY);\n        resetCtxToDefault(this.ctx);\n      } else {\n        resetCtxToDefault(this.ctx);\n        this.endPath();\n        this.ctx.rect(rect[0], rect[1], width, height);\n        this.ctx.clip();\n        this.ctx.beginPath();\n      }\n    }\n    this.current = new CanvasExtraState(this.ctx.canvas.width, this.ctx.canvas.height);\n    this.transform(...transform);\n    this.transform(...matrix);\n  }\n  endAnnotation() {\n    if (this.annotationCanvas) {\n      this.ctx.restore();\n      _classPrivateFieldLooseBase(this, _drawFilter)[_drawFilter]();\n      this.ctx = this.annotationCanvas.savedCtx;\n      delete this.annotationCanvas.savedCtx;\n      delete this.annotationCanvas;\n    }\n  }\n  paintImageMaskXObject(img) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const count = img.count;\n    img = this.getObject(img.data, img);\n    img.count = count;\n    const ctx = this.ctx;\n    const glyph = this.processingType3;\n    if (glyph) {\n      if (glyph.compiled === undefined) {\n        glyph.compiled = compileType3Glyph(img);\n      }\n      if (glyph.compiled) {\n        glyph.compiled(ctx);\n        return;\n      }\n    }\n    const mask = this._createMaskCanvas(img);\n    const maskCanvas = mask.canvas;\n    ctx.save();\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    ctx.drawImage(maskCanvas, mask.offsetX, mask.offsetY);\n    ctx.restore();\n    this.compose();\n  }\n  paintImageMaskXObjectRepeat(img, scaleX) {\n    let skewX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let skewY = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    let scaleY = arguments.length > 4 ? arguments[4] : undefined;\n    let positions = arguments.length > 5 ? arguments[5] : undefined;\n    if (!this.contentVisible) {\n      return;\n    }\n    img = this.getObject(img.data, img);\n    const ctx = this.ctx;\n    ctx.save();\n    const currentTransform = getCurrentTransform(ctx);\n    ctx.transform(scaleX, skewX, skewY, scaleY, 0, 0);\n    const mask = this._createMaskCanvas(img);\n    ctx.setTransform(1, 0, 0, 1, mask.offsetX - currentTransform[4], mask.offsetY - currentTransform[5]);\n    for (let i = 0, ii = positions.length; i < ii; i += 2) {\n      const trans = Util.transform(currentTransform, [scaleX, skewX, skewY, scaleY, positions[i], positions[i + 1]]);\n      const _Util$applyTransform3 = Util.applyTransform([0, 0], trans),\n        _Util$applyTransform4 = _slicedToArray(_Util$applyTransform3, 2),\n        x = _Util$applyTransform4[0],\n        y = _Util$applyTransform4[1];\n      ctx.drawImage(mask.canvas, x, y);\n    }\n    ctx.restore();\n    this.compose();\n  }\n  paintImageMaskXObjectGroup(images) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const ctx = this.ctx;\n    const fillColor = this.current.fillColor;\n    const isPatternFill = this.current.patternFill;\n    for (const image of images) {\n      const data = image.data,\n        width = image.width,\n        height = image.height,\n        transform = image.transform;\n      const maskCanvas = this.cachedCanvases.getCanvas(\"maskCanvas\", width, height);\n      const maskCtx = maskCanvas.context;\n      maskCtx.save();\n      const img = this.getObject(data, image);\n      putBinaryImageMask(maskCtx, img);\n      maskCtx.globalCompositeOperation = \"source-in\";\n      maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this, getCurrentTransformInverse(ctx), PathType.FILL) : fillColor;\n      maskCtx.fillRect(0, 0, width, height);\n      maskCtx.restore();\n      ctx.save();\n      ctx.transform(...transform);\n      ctx.scale(1, -1);\n      drawImageAtIntegerCoords(ctx, maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);\n      ctx.restore();\n    }\n    this.compose();\n  }\n  paintImageXObject(objId) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const imgData = this.getObject(objId);\n    if (!imgData) {\n      warn(\"Dependent image isn't ready yet\");\n      return;\n    }\n    this.paintInlineImageXObject(imgData);\n  }\n  paintImageXObjectRepeat(objId, scaleX, scaleY, positions) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const imgData = this.getObject(objId);\n    if (!imgData) {\n      warn(\"Dependent image isn't ready yet\");\n      return;\n    }\n    const width = imgData.width;\n    const height = imgData.height;\n    const map = [];\n    for (let i = 0, ii = positions.length; i < ii; i += 2) {\n      map.push({\n        transform: [scaleX, 0, 0, scaleY, positions[i], positions[i + 1]],\n        x: 0,\n        y: 0,\n        w: width,\n        h: height\n      });\n    }\n    this.paintInlineImageXObjectGroup(imgData, map);\n  }\n  applyTransferMapsToCanvas(ctx) {\n    if (this.current.transferMaps !== \"none\") {\n      ctx.filter = this.current.transferMaps;\n      ctx.drawImage(ctx.canvas, 0, 0);\n      ctx.filter = \"none\";\n    }\n    return ctx.canvas;\n  }\n  applyTransferMapsToBitmap(imgData) {\n    if (this.current.transferMaps === \"none\") {\n      return imgData.bitmap;\n    }\n    const bitmap = imgData.bitmap,\n      width = imgData.width,\n      height = imgData.height;\n    const tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", width, height);\n    const tmpCtx = tmpCanvas.context;\n    tmpCtx.filter = this.current.transferMaps;\n    tmpCtx.drawImage(bitmap, 0, 0);\n    tmpCtx.filter = \"none\";\n    return tmpCanvas.canvas;\n  }\n  paintInlineImageXObject(imgData) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const width = imgData.width;\n    const height = imgData.height;\n    const ctx = this.ctx;\n    this.save();\n    if (!isNodeJS) {\n      const filter = ctx.filter;\n      if (filter !== \"none\" && filter !== \"\") {\n        ctx.filter = \"none\";\n      }\n    }\n    ctx.scale(1 / width, -1 / height);\n    let imgToPaint;\n    if (imgData.bitmap) {\n      imgToPaint = this.applyTransferMapsToBitmap(imgData);\n    } else if (typeof HTMLElement === \"function\" && imgData instanceof HTMLElement || !imgData.data) {\n      imgToPaint = imgData;\n    } else {\n      const tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", width, height);\n      const tmpCtx = tmpCanvas.context;\n      putBinaryImageData(tmpCtx, imgData);\n      imgToPaint = this.applyTransferMapsToCanvas(tmpCtx);\n    }\n    const scaled = this._scaleImage(imgToPaint, getCurrentTransformInverse(ctx));\n    ctx.imageSmoothingEnabled = getImageSmoothingEnabled(getCurrentTransform(ctx), imgData.interpolate);\n    drawImageAtIntegerCoords(ctx, scaled.img, 0, 0, scaled.paintWidth, scaled.paintHeight, 0, -height, width, height);\n    this.compose();\n    this.restore();\n  }\n  paintInlineImageXObjectGroup(imgData, map) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const ctx = this.ctx;\n    let imgToPaint;\n    if (imgData.bitmap) {\n      imgToPaint = imgData.bitmap;\n    } else {\n      const w = imgData.width;\n      const h = imgData.height;\n      const tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", w, h);\n      const tmpCtx = tmpCanvas.context;\n      putBinaryImageData(tmpCtx, imgData);\n      imgToPaint = this.applyTransferMapsToCanvas(tmpCtx);\n    }\n    for (const entry of map) {\n      ctx.save();\n      ctx.transform(...entry.transform);\n      ctx.scale(1, -1);\n      drawImageAtIntegerCoords(ctx, imgToPaint, entry.x, entry.y, entry.w, entry.h, 0, -1, 1, 1);\n      ctx.restore();\n    }\n    this.compose();\n  }\n  paintSolidColorImageMask() {\n    if (!this.contentVisible) {\n      return;\n    }\n    this.ctx.fillRect(0, 0, 1, 1);\n    this.compose();\n  }\n  markPoint(tag) {}\n  markPointProps(tag, properties) {}\n  beginMarkedContent(tag) {\n    this.markedContentStack.push({\n      visible: true\n    });\n  }\n  beginMarkedContentProps(tag, properties) {\n    if (tag === \"OC\") {\n      this.markedContentStack.push({\n        visible: this.optionalContentConfig.isVisible(properties)\n      });\n    } else {\n      this.markedContentStack.push({\n        visible: true\n      });\n    }\n    this.contentVisible = this.isContentVisible();\n  }\n  endMarkedContent() {\n    this.markedContentStack.pop();\n    this.contentVisible = this.isContentVisible();\n  }\n  beginCompat() {}\n  endCompat() {}\n  consumePath(clipBox) {\n    const isEmpty = this.current.isEmptyClip();\n    if (this.pendingClip) {\n      this.current.updateClipFromPath();\n    }\n    if (!this.pendingClip) {\n      this.compose(clipBox);\n    }\n    const ctx = this.ctx;\n    if (this.pendingClip) {\n      if (!isEmpty) {\n        if (this.pendingClip === EO_CLIP) {\n          ctx.clip(\"evenodd\");\n        } else {\n          ctx.clip();\n        }\n      }\n      this.pendingClip = null;\n    }\n    this.current.startNewPathAndClipBox(this.current.clipBox);\n    ctx.beginPath();\n  }\n  getSinglePixelWidth() {\n    if (!this._cachedGetSinglePixelWidth) {\n      const m = getCurrentTransform(this.ctx);\n      if (m[1] === 0 && m[2] === 0) {\n        this._cachedGetSinglePixelWidth = 1 / Math.min(Math.abs(m[0]), Math.abs(m[3]));\n      } else {\n        const absDet = Math.abs(m[0] * m[3] - m[2] * m[1]);\n        const normX = Math.hypot(m[0], m[2]);\n        const normY = Math.hypot(m[1], m[3]);\n        this._cachedGetSinglePixelWidth = Math.max(normX, normY) / absDet;\n      }\n    }\n    return this._cachedGetSinglePixelWidth;\n  }\n  getScaleForStroking() {\n    if (this._cachedScaleForStroking[0] === -1) {\n      const lineWidth = this.current.lineWidth;\n      const _this$ctx$getTransfor = this.ctx.getTransform(),\n        a = _this$ctx$getTransfor.a,\n        b = _this$ctx$getTransfor.b,\n        c = _this$ctx$getTransfor.c,\n        d = _this$ctx$getTransfor.d;\n      let scaleX, scaleY;\n      if (b === 0 && c === 0) {\n        const normX = Math.abs(a);\n        const normY = Math.abs(d);\n        if (normX === normY) {\n          if (lineWidth === 0) {\n            scaleX = scaleY = 1 / normX;\n          } else {\n            const scaledLineWidth = normX * lineWidth;\n            scaleX = scaleY = scaledLineWidth < 1 ? 1 / scaledLineWidth : 1;\n          }\n        } else if (lineWidth === 0) {\n          scaleX = 1 / normX;\n          scaleY = 1 / normY;\n        } else {\n          const scaledXLineWidth = normX * lineWidth;\n          const scaledYLineWidth = normY * lineWidth;\n          scaleX = scaledXLineWidth < 1 ? 1 / scaledXLineWidth : 1;\n          scaleY = scaledYLineWidth < 1 ? 1 / scaledYLineWidth : 1;\n        }\n      } else {\n        const absDet = Math.abs(a * d - b * c);\n        const normX = Math.hypot(a, b);\n        const normY = Math.hypot(c, d);\n        if (lineWidth === 0) {\n          scaleX = normY / absDet;\n          scaleY = normX / absDet;\n        } else {\n          const baseArea = lineWidth * absDet;\n          scaleX = normY > baseArea ? normY / baseArea : 1;\n          scaleY = normX > baseArea ? normX / baseArea : 1;\n        }\n      }\n      this._cachedScaleForStroking[0] = scaleX;\n      this._cachedScaleForStroking[1] = scaleY;\n    }\n    return this._cachedScaleForStroking;\n  }\n  rescaleAndStroke(saveRestore) {\n    const ctx = this.ctx;\n    const lineWidth = this.current.lineWidth;\n    const _this$getScaleForStro = this.getScaleForStroking(),\n      _this$getScaleForStro2 = _slicedToArray(_this$getScaleForStro, 2),\n      scaleX = _this$getScaleForStro2[0],\n      scaleY = _this$getScaleForStro2[1];\n    ctx.lineWidth = lineWidth || 1;\n    if (scaleX === 1 && scaleY === 1) {\n      ctx.stroke();\n      return;\n    }\n    const dashes = ctx.getLineDash();\n    if (saveRestore) {\n      ctx.save();\n    }\n    ctx.scale(scaleX, scaleY);\n    if (dashes.length > 0) {\n      const scale = Math.max(scaleX, scaleY);\n      ctx.setLineDash(dashes.map(x => x / scale));\n      ctx.lineDashOffset /= scale;\n    }\n    ctx.stroke();\n    if (saveRestore) {\n      ctx.restore();\n    }\n  }\n  isContentVisible() {\n    for (let i = this.markedContentStack.length - 1; i >= 0; i--) {\n      if (!this.markedContentStack[i].visible) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\nfunction _restoreInitialState2() {\n  while (this.stateStack.length || this.inSMaskMode) {\n    this.restore();\n  }\n  this.current.activeSMask = null;\n  this.ctx.restore();\n  if (this.transparentCanvas) {\n    this.ctx = this.compositeCtx;\n    this.ctx.save();\n    this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n    this.ctx.drawImage(this.transparentCanvas, 0, 0);\n    this.ctx.restore();\n    this.transparentCanvas = null;\n  }\n}\nfunction _drawFilter2() {\n  if (this.pageColors) {\n    const hcmFilterId = this.filterFactory.addHCMFilter(this.pageColors.foreground, this.pageColors.background);\n    if (hcmFilterId !== \"none\") {\n      const savedFilter = this.ctx.filter;\n      this.ctx.filter = hcmFilterId;\n      this.ctx.drawImage(this.ctx.canvas, 0, 0);\n      this.ctx.filter = savedFilter;\n    }\n  }\n}\nfor (const op in OPS) {\n  if (CanvasGraphics.prototype[op] !== undefined) {\n    CanvasGraphics.prototype[OPS[op]] = CanvasGraphics.prototype[op];\n  }\n}\n; // ./src/display/worker_options.js\nvar _port = /*#__PURE__*/_classPrivateFieldLooseKey(\"port\");\nvar _src = /*#__PURE__*/_classPrivateFieldLooseKey(\"src\");\nclass GlobalWorkerOptions {\n  static get workerPort() {\n    return _classPrivateFieldLooseBase(this, _port)[_port];\n  }\n  static set workerPort(val) {\n    if (!(typeof Worker !== \"undefined\" && val instanceof Worker) && val !== null) {\n      throw new Error(\"Invalid `workerPort` type.\");\n    }\n    _classPrivateFieldLooseBase(this, _port)[_port] = val;\n  }\n  static get workerSrc() {\n    return _classPrivateFieldLooseBase(this, _src)[_src];\n  }\n  static set workerSrc(val) {\n    if (typeof val !== \"string\") {\n      throw new Error(\"Invalid `workerSrc` type.\");\n    }\n    _classPrivateFieldLooseBase(this, _src)[_src] = val;\n  }\n}\nObject.defineProperty(GlobalWorkerOptions, _port, {\n  writable: true,\n  value: null\n});\nObject.defineProperty(GlobalWorkerOptions, _src, {\n  writable: true,\n  value: \"\"\n});\n; // ./src/shared/message_handler.js\n\nconst CallbackKind = {\n  UNKNOWN: 0,\n  DATA: 1,\n  ERROR: 2\n};\nconst StreamKind = {\n  UNKNOWN: 0,\n  CANCEL: 1,\n  CANCEL_COMPLETE: 2,\n  CLOSE: 3,\n  ENQUEUE: 4,\n  ERROR: 5,\n  PULL: 6,\n  PULL_COMPLETE: 7,\n  START_COMPLETE: 8\n};\nfunction wrapReason(reason) {\n  if (!(reason instanceof Error || typeof reason === \"object\" && reason !== null)) {\n    unreachable('wrapReason: Expected \"reason\" to be a (possibly cloned) Error.');\n  }\n  switch (reason.name) {\n    case \"AbortException\":\n      return new AbortException(reason.message);\n    case \"MissingPDFException\":\n      return new MissingPDFException(reason.message);\n    case \"PasswordException\":\n      return new PasswordException(reason.message, reason.code);\n    case \"UnexpectedResponseException\":\n      return new UnexpectedResponseException(reason.message, reason.status);\n    case \"UnknownErrorException\":\n      return new UnknownErrorException(reason.message, reason.details);\n    default:\n      return new UnknownErrorException(reason.message, reason.toString());\n  }\n}\nvar _messageAC = /*#__PURE__*/_classPrivateFieldLooseKey(\"messageAC\");\nvar _onMessage = /*#__PURE__*/_classPrivateFieldLooseKey(\"onMessage\");\nvar _createStreamSink = /*#__PURE__*/_classPrivateFieldLooseKey(\"createStreamSink\");\nvar _processStreamMessage = /*#__PURE__*/_classPrivateFieldLooseKey(\"processStreamMessage\");\nvar _deleteStreamController = /*#__PURE__*/_classPrivateFieldLooseKey(\"deleteStreamController\");\nclass MessageHandler {\n  constructor(_sourceName, _targetName, _comObj) {\n    Object.defineProperty(this, _deleteStreamController, {\n      value: _deleteStreamController2\n    });\n    Object.defineProperty(this, _processStreamMessage, {\n      value: _processStreamMessage2\n    });\n    Object.defineProperty(this, _createStreamSink, {\n      value: _createStreamSink2\n    });\n    Object.defineProperty(this, _onMessage, {\n      value: _onMessage2\n    });\n    Object.defineProperty(this, _messageAC, {\n      writable: true,\n      value: new AbortController()\n    });\n    this.sourceName = _sourceName;\n    this.targetName = _targetName;\n    this.comObj = _comObj;\n    this.callbackId = 1;\n    this.streamId = 1;\n    this.streamSinks = Object.create(null);\n    this.streamControllers = Object.create(null);\n    this.callbackCapabilities = Object.create(null);\n    this.actionHandler = Object.create(null);\n    _comObj.addEventListener(\"message\", _classPrivateFieldLooseBase(this, _onMessage)[_onMessage].bind(this), {\n      signal: _classPrivateFieldLooseBase(this, _messageAC)[_messageAC].signal\n    });\n  }\n  on(actionName, handler) {\n    const ah = this.actionHandler;\n    if (ah[actionName]) {\n      throw new Error(`There is already an actionName called \"${actionName}\"`);\n    }\n    ah[actionName] = handler;\n  }\n  send(actionName, data, transfers) {\n    this.comObj.postMessage({\n      sourceName: this.sourceName,\n      targetName: this.targetName,\n      action: actionName,\n      data\n    }, transfers);\n  }\n  sendWithPromise(actionName, data, transfers) {\n    const callbackId = this.callbackId++;\n    const capability = Promise.withResolvers();\n    this.callbackCapabilities[callbackId] = capability;\n    try {\n      this.comObj.postMessage({\n        sourceName: this.sourceName,\n        targetName: this.targetName,\n        action: actionName,\n        callbackId,\n        data\n      }, transfers);\n    } catch (ex) {\n      capability.reject(ex);\n    }\n    return capability.promise;\n  }\n  sendWithStream(actionName, data, queueingStrategy, transfers) {\n    const streamId = this.streamId++,\n      sourceName = this.sourceName,\n      targetName = this.targetName,\n      comObj = this.comObj;\n    return new ReadableStream({\n      start: controller => {\n        const startCapability = Promise.withResolvers();\n        this.streamControllers[streamId] = {\n          controller,\n          startCall: startCapability,\n          pullCall: null,\n          cancelCall: null,\n          isClosed: false\n        };\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          action: actionName,\n          streamId,\n          data,\n          desiredSize: controller.desiredSize\n        }, transfers);\n        return startCapability.promise;\n      },\n      pull: controller => {\n        const pullCapability = Promise.withResolvers();\n        this.streamControllers[streamId].pullCall = pullCapability;\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.PULL,\n          streamId,\n          desiredSize: controller.desiredSize\n        });\n        return pullCapability.promise;\n      },\n      cancel: reason => {\n        assert(reason instanceof Error, \"cancel must have a valid reason\");\n        const cancelCapability = Promise.withResolvers();\n        this.streamControllers[streamId].cancelCall = cancelCapability;\n        this.streamControllers[streamId].isClosed = true;\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.CANCEL,\n          streamId,\n          reason: wrapReason(reason)\n        });\n        return cancelCapability.promise;\n      }\n    }, queueingStrategy);\n  }\n  destroy() {\n    var _classPrivateFieldLoo55;\n    (_classPrivateFieldLoo55 = _classPrivateFieldLooseBase(this, _messageAC)[_messageAC]) === null || _classPrivateFieldLoo55 === void 0 ? void 0 : _classPrivateFieldLoo55.abort();\n    _classPrivateFieldLooseBase(this, _messageAC)[_messageAC] = null;\n  }\n}\nfunction _onMessage2(_ref163) {\n  let data = _ref163.data;\n  if (data.targetName !== this.sourceName) {\n    return;\n  }\n  if (data.stream) {\n    _classPrivateFieldLooseBase(this, _processStreamMessage)[_processStreamMessage](data);\n    return;\n  }\n  if (data.callback) {\n    const callbackId = data.callbackId;\n    const capability = this.callbackCapabilities[callbackId];\n    if (!capability) {\n      throw new Error(`Cannot resolve callback ${callbackId}`);\n    }\n    delete this.callbackCapabilities[callbackId];\n    if (data.callback === CallbackKind.DATA) {\n      capability.resolve(data.data);\n    } else if (data.callback === CallbackKind.ERROR) {\n      capability.reject(wrapReason(data.reason));\n    } else {\n      throw new Error(\"Unexpected callback case\");\n    }\n    return;\n  }\n  const action = this.actionHandler[data.action];\n  if (!action) {\n    throw new Error(`Unknown action from worker: ${data.action}`);\n  }\n  if (data.callbackId) {\n    const sourceName = this.sourceName,\n      targetName = data.sourceName,\n      comObj = this.comObj;\n    new Promise(function (resolve) {\n      resolve(action(data.data));\n    }).then(function (result) {\n      comObj.postMessage({\n        sourceName,\n        targetName,\n        callback: CallbackKind.DATA,\n        callbackId: data.callbackId,\n        data: result\n      });\n    }, function (reason) {\n      comObj.postMessage({\n        sourceName,\n        targetName,\n        callback: CallbackKind.ERROR,\n        callbackId: data.callbackId,\n        reason: wrapReason(reason)\n      });\n    });\n    return;\n  }\n  if (data.streamId) {\n    _classPrivateFieldLooseBase(this, _createStreamSink)[_createStreamSink](data);\n    return;\n  }\n  action(data.data);\n}\nfunction _createStreamSink2(data) {\n  const streamId = data.streamId,\n    sourceName = this.sourceName,\n    targetName = data.sourceName,\n    comObj = this.comObj;\n  const self = this,\n    action = this.actionHandler[data.action];\n  const streamSink = {\n    enqueue(chunk) {\n      let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      let transfers = arguments.length > 2 ? arguments[2] : undefined;\n      if (this.isCancelled) {\n        return;\n      }\n      const lastDesiredSize = this.desiredSize;\n      this.desiredSize -= size;\n      if (lastDesiredSize > 0 && this.desiredSize <= 0) {\n        this.sinkCapability = Promise.withResolvers();\n        this.ready = this.sinkCapability.promise;\n      }\n      comObj.postMessage({\n        sourceName,\n        targetName,\n        stream: StreamKind.ENQUEUE,\n        streamId,\n        chunk\n      }, transfers);\n    },\n    close() {\n      if (this.isCancelled) {\n        return;\n      }\n      this.isCancelled = true;\n      comObj.postMessage({\n        sourceName,\n        targetName,\n        stream: StreamKind.CLOSE,\n        streamId\n      });\n      delete self.streamSinks[streamId];\n    },\n    error(reason) {\n      assert(reason instanceof Error, \"error must have a valid reason\");\n      if (this.isCancelled) {\n        return;\n      }\n      this.isCancelled = true;\n      comObj.postMessage({\n        sourceName,\n        targetName,\n        stream: StreamKind.ERROR,\n        streamId,\n        reason: wrapReason(reason)\n      });\n    },\n    sinkCapability: Promise.withResolvers(),\n    onPull: null,\n    onCancel: null,\n    isCancelled: false,\n    desiredSize: data.desiredSize,\n    ready: null\n  };\n  streamSink.sinkCapability.resolve();\n  streamSink.ready = streamSink.sinkCapability.promise;\n  this.streamSinks[streamId] = streamSink;\n  new Promise(function (resolve) {\n    resolve(action(data.data, streamSink));\n  }).then(function () {\n    comObj.postMessage({\n      sourceName,\n      targetName,\n      stream: StreamKind.START_COMPLETE,\n      streamId,\n      success: true\n    });\n  }, function (reason) {\n    comObj.postMessage({\n      sourceName,\n      targetName,\n      stream: StreamKind.START_COMPLETE,\n      streamId,\n      reason: wrapReason(reason)\n    });\n  });\n}\nfunction _processStreamMessage2(data) {\n  const streamId = data.streamId,\n    sourceName = this.sourceName,\n    targetName = data.sourceName,\n    comObj = this.comObj;\n  const streamController = this.streamControllers[streamId],\n    streamSink = this.streamSinks[streamId];\n  switch (data.stream) {\n    case StreamKind.START_COMPLETE:\n      if (data.success) {\n        streamController.startCall.resolve();\n      } else {\n        streamController.startCall.reject(wrapReason(data.reason));\n      }\n      break;\n    case StreamKind.PULL_COMPLETE:\n      if (data.success) {\n        streamController.pullCall.resolve();\n      } else {\n        streamController.pullCall.reject(wrapReason(data.reason));\n      }\n      break;\n    case StreamKind.PULL:\n      if (!streamSink) {\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.PULL_COMPLETE,\n          streamId,\n          success: true\n        });\n        break;\n      }\n      if (streamSink.desiredSize <= 0 && data.desiredSize > 0) {\n        streamSink.sinkCapability.resolve();\n      }\n      streamSink.desiredSize = data.desiredSize;\n      new Promise(function (resolve) {\n        var _streamSink$onPull;\n        resolve((_streamSink$onPull = streamSink.onPull) === null || _streamSink$onPull === void 0 ? void 0 : _streamSink$onPull.call(streamSink));\n      }).then(function () {\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.PULL_COMPLETE,\n          streamId,\n          success: true\n        });\n      }, function (reason) {\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.PULL_COMPLETE,\n          streamId,\n          reason: wrapReason(reason)\n        });\n      });\n      break;\n    case StreamKind.ENQUEUE:\n      assert(streamController, \"enqueue should have stream controller\");\n      if (streamController.isClosed) {\n        break;\n      }\n      streamController.controller.enqueue(data.chunk);\n      break;\n    case StreamKind.CLOSE:\n      assert(streamController, \"close should have stream controller\");\n      if (streamController.isClosed) {\n        break;\n      }\n      streamController.isClosed = true;\n      streamController.controller.close();\n      _classPrivateFieldLooseBase(this, _deleteStreamController)[_deleteStreamController](streamController, streamId);\n      break;\n    case StreamKind.ERROR:\n      assert(streamController, \"error should have stream controller\");\n      streamController.controller.error(wrapReason(data.reason));\n      _classPrivateFieldLooseBase(this, _deleteStreamController)[_deleteStreamController](streamController, streamId);\n      break;\n    case StreamKind.CANCEL_COMPLETE:\n      if (data.success) {\n        streamController.cancelCall.resolve();\n      } else {\n        streamController.cancelCall.reject(wrapReason(data.reason));\n      }\n      _classPrivateFieldLooseBase(this, _deleteStreamController)[_deleteStreamController](streamController, streamId);\n      break;\n    case StreamKind.CANCEL:\n      if (!streamSink) {\n        break;\n      }\n      new Promise(function (resolve) {\n        var _streamSink$onCancel;\n        resolve((_streamSink$onCancel = streamSink.onCancel) === null || _streamSink$onCancel === void 0 ? void 0 : _streamSink$onCancel.call(streamSink, wrapReason(data.reason)));\n      }).then(function () {\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.CANCEL_COMPLETE,\n          streamId,\n          success: true\n        });\n      }, function (reason) {\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.CANCEL_COMPLETE,\n          streamId,\n          reason: wrapReason(reason)\n        });\n      });\n      streamSink.sinkCapability.reject(wrapReason(data.reason));\n      streamSink.isCancelled = true;\n      delete this.streamSinks[streamId];\n      break;\n    default:\n      throw new Error(\"Unexpected stream case\");\n  }\n}\nasync function _deleteStreamController2(streamController, streamId) {\n  var _streamController$sta, _streamController$pul, _streamController$can;\n  await Promise.allSettled([(_streamController$sta = streamController.startCall) === null || _streamController$sta === void 0 ? void 0 : _streamController$sta.promise, (_streamController$pul = streamController.pullCall) === null || _streamController$pul === void 0 ? void 0 : _streamController$pul.promise, (_streamController$can = streamController.cancelCall) === null || _streamController$can === void 0 ? void 0 : _streamController$can.promise]);\n  delete this.streamControllers[streamId];\n}\n; // ./src/display/metadata.js\nvar _metadataMap = /*#__PURE__*/_classPrivateFieldLooseKey(\"metadataMap\");\nvar _data2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"data\");\nclass Metadata {\n  constructor(_ref60) {\n    let parsedData = _ref60.parsedData,\n      rawData = _ref60.rawData;\n    Object.defineProperty(this, _metadataMap, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _data2, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldLooseBase(this, _metadataMap)[_metadataMap] = parsedData;\n    _classPrivateFieldLooseBase(this, _data2)[_data2] = rawData;\n  }\n  getRaw() {\n    return _classPrivateFieldLooseBase(this, _data2)[_data2];\n  }\n  get(name) {\n    var _classPrivateFieldLoo56;\n    return (_classPrivateFieldLoo56 = _classPrivateFieldLooseBase(this, _metadataMap)[_metadataMap].get(name)) !== null && _classPrivateFieldLoo56 !== void 0 ? _classPrivateFieldLoo56 : null;\n  }\n  getAll() {\n    return objectFromMap(_classPrivateFieldLooseBase(this, _metadataMap)[_metadataMap]);\n  }\n  has(name) {\n    return _classPrivateFieldLooseBase(this, _metadataMap)[_metadataMap].has(name);\n  }\n}\n; // ./src/display/optional_content_config.js\n\nconst INTERNAL = Symbol(\"INTERNAL\");\nvar _isDisplay = /*#__PURE__*/_classPrivateFieldLooseKey(\"isDisplay\");\nvar _isPrint = /*#__PURE__*/_classPrivateFieldLooseKey(\"isPrint\");\nvar _userSet = /*#__PURE__*/_classPrivateFieldLooseKey(\"userSet\");\nvar _visible = /*#__PURE__*/_classPrivateFieldLooseKey(\"visible\");\nclass OptionalContentGroup {\n  constructor(renderingIntent, _ref61) {\n    let name = _ref61.name,\n      intent = _ref61.intent,\n      usage = _ref61.usage,\n      rbGroups = _ref61.rbGroups;\n    Object.defineProperty(this, _isDisplay, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _isPrint, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _userSet, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _visible, {\n      writable: true,\n      value: true\n    });\n    _classPrivateFieldLooseBase(this, _isDisplay)[_isDisplay] = !!(renderingIntent & RenderingIntentFlag.DISPLAY);\n    _classPrivateFieldLooseBase(this, _isPrint)[_isPrint] = !!(renderingIntent & RenderingIntentFlag.PRINT);\n    this.name = name;\n    this.intent = intent;\n    this.usage = usage;\n    this.rbGroups = rbGroups;\n  }\n  get visible() {\n    if (_classPrivateFieldLooseBase(this, _userSet)[_userSet]) {\n      return _classPrivateFieldLooseBase(this, _visible)[_visible];\n    }\n    if (!_classPrivateFieldLooseBase(this, _visible)[_visible]) {\n      return false;\n    }\n    const _this$usage = this.usage,\n      print = _this$usage.print,\n      view = _this$usage.view;\n    if (_classPrivateFieldLooseBase(this, _isDisplay)[_isDisplay]) {\n      return (view === null || view === void 0 ? void 0 : view.viewState) !== \"OFF\";\n    } else if (_classPrivateFieldLooseBase(this, _isPrint)[_isPrint]) {\n      return (print === null || print === void 0 ? void 0 : print.printState) !== \"OFF\";\n    }\n    return true;\n  }\n  _setVisible(internal, visible) {\n    let userSet = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (internal !== INTERNAL) {\n      unreachable(\"Internal method `_setVisible` called.\");\n    }\n    _classPrivateFieldLooseBase(this, _userSet)[_userSet] = userSet;\n    _classPrivateFieldLooseBase(this, _visible)[_visible] = visible;\n  }\n}\nvar _cachedGetHash = /*#__PURE__*/_classPrivateFieldLooseKey(\"cachedGetHash\");\nvar _groups = /*#__PURE__*/_classPrivateFieldLooseKey(\"groups\");\nvar _initialHash = /*#__PURE__*/_classPrivateFieldLooseKey(\"initialHash\");\nvar _order = /*#__PURE__*/_classPrivateFieldLooseKey(\"order\");\nvar _evaluateVisibilityExpression = /*#__PURE__*/_classPrivateFieldLooseKey(\"evaluateVisibilityExpression\");\nclass OptionalContentConfig {\n  constructor(data) {\n    let renderingIntent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : RenderingIntentFlag.DISPLAY;\n    Object.defineProperty(this, _evaluateVisibilityExpression, {\n      value: _evaluateVisibilityExpression2\n    });\n    Object.defineProperty(this, _cachedGetHash, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _groups, {\n      writable: true,\n      value: new Map()\n    });\n    Object.defineProperty(this, _initialHash, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _order, {\n      writable: true,\n      value: null\n    });\n    this.renderingIntent = renderingIntent;\n    this.name = null;\n    this.creator = null;\n    if (data === null) {\n      return;\n    }\n    this.name = data.name;\n    this.creator = data.creator;\n    _classPrivateFieldLooseBase(this, _order)[_order] = data.order;\n    for (const group of data.groups) {\n      _classPrivateFieldLooseBase(this, _groups)[_groups].set(group.id, new OptionalContentGroup(renderingIntent, group));\n    }\n    if (data.baseState === \"OFF\") {\n      for (const group of _classPrivateFieldLooseBase(this, _groups)[_groups].values()) {\n        group._setVisible(INTERNAL, false);\n      }\n    }\n    for (const on of data.on) {\n      _classPrivateFieldLooseBase(this, _groups)[_groups].get(on)._setVisible(INTERNAL, true);\n    }\n    for (const off of data.off) {\n      _classPrivateFieldLooseBase(this, _groups)[_groups].get(off)._setVisible(INTERNAL, false);\n    }\n    _classPrivateFieldLooseBase(this, _initialHash)[_initialHash] = this.getHash();\n  }\n  isVisible(group) {\n    if (_classPrivateFieldLooseBase(this, _groups)[_groups].size === 0) {\n      return true;\n    }\n    if (!group) {\n      info(\"Optional content group not defined.\");\n      return true;\n    }\n    if (group.type === \"OCG\") {\n      if (!_classPrivateFieldLooseBase(this, _groups)[_groups].has(group.id)) {\n        warn(`Optional content group not found: ${group.id}`);\n        return true;\n      }\n      return _classPrivateFieldLooseBase(this, _groups)[_groups].get(group.id).visible;\n    } else if (group.type === \"OCMD\") {\n      if (group.expression) {\n        return _classPrivateFieldLooseBase(this, _evaluateVisibilityExpression)[_evaluateVisibilityExpression](group.expression);\n      }\n      if (!group.policy || group.policy === \"AnyOn\") {\n        for (const id of group.ids) {\n          if (!_classPrivateFieldLooseBase(this, _groups)[_groups].has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (_classPrivateFieldLooseBase(this, _groups)[_groups].get(id).visible) {\n            return true;\n          }\n        }\n        return false;\n      } else if (group.policy === \"AllOn\") {\n        for (const id of group.ids) {\n          if (!_classPrivateFieldLooseBase(this, _groups)[_groups].has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (!_classPrivateFieldLooseBase(this, _groups)[_groups].get(id).visible) {\n            return false;\n          }\n        }\n        return true;\n      } else if (group.policy === \"AnyOff\") {\n        for (const id of group.ids) {\n          if (!_classPrivateFieldLooseBase(this, _groups)[_groups].has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (!_classPrivateFieldLooseBase(this, _groups)[_groups].get(id).visible) {\n            return true;\n          }\n        }\n        return false;\n      } else if (group.policy === \"AllOff\") {\n        for (const id of group.ids) {\n          if (!_classPrivateFieldLooseBase(this, _groups)[_groups].has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (_classPrivateFieldLooseBase(this, _groups)[_groups].get(id).visible) {\n            return false;\n          }\n        }\n        return true;\n      }\n      warn(`Unknown optional content policy ${group.policy}.`);\n      return true;\n    }\n    warn(`Unknown group type ${group.type}.`);\n    return true;\n  }\n  setVisibility(id) {\n    let visible = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let preserveRB = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const group = _classPrivateFieldLooseBase(this, _groups)[_groups].get(id);\n    if (!group) {\n      warn(`Optional content group not found: ${id}`);\n      return;\n    }\n    if (preserveRB && visible && group.rbGroups.length) {\n      for (const rbGroup of group.rbGroups) {\n        for (const otherId of rbGroup) {\n          if (otherId !== id) {\n            var _classPrivateFieldLoo57;\n            (_classPrivateFieldLoo57 = _classPrivateFieldLooseBase(this, _groups)[_groups].get(otherId)) === null || _classPrivateFieldLoo57 === void 0 ? void 0 : _classPrivateFieldLoo57._setVisible(INTERNAL, false, true);\n          }\n        }\n      }\n    }\n    group._setVisible(INTERNAL, !!visible, true);\n    _classPrivateFieldLooseBase(this, _cachedGetHash)[_cachedGetHash] = null;\n  }\n  setOCGState(_ref62) {\n    let state = _ref62.state,\n      preserveRB = _ref62.preserveRB;\n    let operator;\n    for (const elem of state) {\n      switch (elem) {\n        case \"ON\":\n        case \"OFF\":\n        case \"Toggle\":\n          operator = elem;\n          continue;\n      }\n      const group = _classPrivateFieldLooseBase(this, _groups)[_groups].get(elem);\n      if (!group) {\n        continue;\n      }\n      switch (operator) {\n        case \"ON\":\n          this.setVisibility(elem, true, preserveRB);\n          break;\n        case \"OFF\":\n          this.setVisibility(elem, false, preserveRB);\n          break;\n        case \"Toggle\":\n          this.setVisibility(elem, !group.visible, preserveRB);\n          break;\n      }\n    }\n    _classPrivateFieldLooseBase(this, _cachedGetHash)[_cachedGetHash] = null;\n  }\n  get hasInitialVisibility() {\n    return _classPrivateFieldLooseBase(this, _initialHash)[_initialHash] === null || this.getHash() === _classPrivateFieldLooseBase(this, _initialHash)[_initialHash];\n  }\n  getOrder() {\n    if (!_classPrivateFieldLooseBase(this, _groups)[_groups].size) {\n      return null;\n    }\n    if (_classPrivateFieldLooseBase(this, _order)[_order]) {\n      return _classPrivateFieldLooseBase(this, _order)[_order].slice();\n    }\n    return [..._classPrivateFieldLooseBase(this, _groups)[_groups].keys()];\n  }\n  getGroups() {\n    return _classPrivateFieldLooseBase(this, _groups)[_groups].size > 0 ? objectFromMap(_classPrivateFieldLooseBase(this, _groups)[_groups]) : null;\n  }\n  getGroup(id) {\n    return _classPrivateFieldLooseBase(this, _groups)[_groups].get(id) || null;\n  }\n  getHash() {\n    if (_classPrivateFieldLooseBase(this, _cachedGetHash)[_cachedGetHash] !== null) {\n      return _classPrivateFieldLooseBase(this, _cachedGetHash)[_cachedGetHash];\n    }\n    const hash = new MurmurHash3_64();\n    for (const _ref63 of _classPrivateFieldLooseBase(this, _groups)[_groups]) {\n      var _ref64 = _slicedToArray(_ref63, 2);\n      const id = _ref64[0];\n      const group = _ref64[1];\n      hash.update(`${id}:${group.visible}`);\n    }\n    return _classPrivateFieldLooseBase(this, _cachedGetHash)[_cachedGetHash] = hash.hexdigest();\n  }\n}\nfunction _evaluateVisibilityExpression2(array) {\n  const length = array.length;\n  if (length < 2) {\n    return true;\n  }\n  const operator = array[0];\n  for (let i = 1; i < length; i++) {\n    const element = array[i];\n    let state;\n    if (Array.isArray(element)) {\n      state = _classPrivateFieldLooseBase(this, _evaluateVisibilityExpression)[_evaluateVisibilityExpression](element);\n    } else if (_classPrivateFieldLooseBase(this, _groups)[_groups].has(element)) {\n      state = _classPrivateFieldLooseBase(this, _groups)[_groups].get(element).visible;\n    } else {\n      warn(`Optional content group not found: ${element}`);\n      return true;\n    }\n    switch (operator) {\n      case \"And\":\n        if (!state) {\n          return false;\n        }\n        break;\n      case \"Or\":\n        if (state) {\n          return true;\n        }\n        break;\n      case \"Not\":\n        return !state;\n      default:\n        return true;\n    }\n  }\n  return operator === \"And\";\n}\n; // ./src/display/transport_stream.js\n\nclass PDFDataTransportStream {\n  constructor(pdfDataRangeTransport, _ref65) {\n    let _ref65$disableRange = _ref65.disableRange,\n      disableRange = _ref65$disableRange === void 0 ? false : _ref65$disableRange,\n      _ref65$disableStream = _ref65.disableStream,\n      disableStream = _ref65$disableStream === void 0 ? false : _ref65$disableStream;\n    assert(pdfDataRangeTransport, 'PDFDataTransportStream - missing required \"pdfDataRangeTransport\" argument.');\n    const length = pdfDataRangeTransport.length,\n      initialData = pdfDataRangeTransport.initialData,\n      progressiveDone = pdfDataRangeTransport.progressiveDone,\n      contentDispositionFilename = pdfDataRangeTransport.contentDispositionFilename;\n    this._queuedChunks = [];\n    this._progressiveDone = progressiveDone;\n    this._contentDispositionFilename = contentDispositionFilename;\n    if ((initialData === null || initialData === void 0 ? void 0 : initialData.length) > 0) {\n      const buffer = initialData instanceof Uint8Array && initialData.byteLength === initialData.buffer.byteLength ? initialData.buffer : new Uint8Array(initialData).buffer;\n      this._queuedChunks.push(buffer);\n    }\n    this._pdfDataRangeTransport = pdfDataRangeTransport;\n    this._isStreamingSupported = !disableStream;\n    this._isRangeSupported = !disableRange;\n    this._contentLength = length;\n    this._fullRequestReader = null;\n    this._rangeReaders = [];\n    pdfDataRangeTransport.addRangeListener((begin, chunk) => {\n      this._onReceiveData({\n        begin,\n        chunk\n      });\n    });\n    pdfDataRangeTransport.addProgressListener((loaded, total) => {\n      this._onProgress({\n        loaded,\n        total\n      });\n    });\n    pdfDataRangeTransport.addProgressiveReadListener(chunk => {\n      this._onReceiveData({\n        chunk\n      });\n    });\n    pdfDataRangeTransport.addProgressiveDoneListener(() => {\n      this._onProgressiveDone();\n    });\n    pdfDataRangeTransport.transportReady();\n  }\n  _onReceiveData(_ref66) {\n    let begin = _ref66.begin,\n      chunk = _ref66.chunk;\n    const buffer = chunk instanceof Uint8Array && chunk.byteLength === chunk.buffer.byteLength ? chunk.buffer : new Uint8Array(chunk).buffer;\n    if (begin === undefined) {\n      if (this._fullRequestReader) {\n        this._fullRequestReader._enqueue(buffer);\n      } else {\n        this._queuedChunks.push(buffer);\n      }\n    } else {\n      const found = this._rangeReaders.some(function (rangeReader) {\n        if (rangeReader._begin !== begin) {\n          return false;\n        }\n        rangeReader._enqueue(buffer);\n        return true;\n      });\n      assert(found, \"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.\");\n    }\n  }\n  get _progressiveDataLength() {\n    var _this$_fullRequestRea, _this$_fullRequestRea2;\n    return (_this$_fullRequestRea = (_this$_fullRequestRea2 = this._fullRequestReader) === null || _this$_fullRequestRea2 === void 0 ? void 0 : _this$_fullRequestRea2._loaded) !== null && _this$_fullRequestRea !== void 0 ? _this$_fullRequestRea : 0;\n  }\n  _onProgress(evt) {\n    if (evt.total === undefined) {\n      var _this$_rangeReaders$, _this$_rangeReaders$$;\n      (_this$_rangeReaders$ = this._rangeReaders[0]) === null || _this$_rangeReaders$ === void 0 ? void 0 : (_this$_rangeReaders$$ = _this$_rangeReaders$.onProgress) === null || _this$_rangeReaders$$ === void 0 ? void 0 : _this$_rangeReaders$$.call(_this$_rangeReaders$, {\n        loaded: evt.loaded\n      });\n    } else {\n      var _this$_fullRequestRea3, _this$_fullRequestRea4;\n      (_this$_fullRequestRea3 = this._fullRequestReader) === null || _this$_fullRequestRea3 === void 0 ? void 0 : (_this$_fullRequestRea4 = _this$_fullRequestRea3.onProgress) === null || _this$_fullRequestRea4 === void 0 ? void 0 : _this$_fullRequestRea4.call(_this$_fullRequestRea3, {\n        loaded: evt.loaded,\n        total: evt.total\n      });\n    }\n  }\n  _onProgressiveDone() {\n    var _this$_fullRequestRea5;\n    (_this$_fullRequestRea5 = this._fullRequestReader) === null || _this$_fullRequestRea5 === void 0 ? void 0 : _this$_fullRequestRea5.progressiveDone();\n    this._progressiveDone = true;\n  }\n  _removeRangeReader(reader) {\n    const i = this._rangeReaders.indexOf(reader);\n    if (i >= 0) {\n      this._rangeReaders.splice(i, 1);\n    }\n  }\n  getFullReader() {\n    assert(!this._fullRequestReader, \"PDFDataTransportStream.getFullReader can only be called once.\");\n    const queuedChunks = this._queuedChunks;\n    this._queuedChunks = null;\n    return new PDFDataTransportStreamReader(this, queuedChunks, this._progressiveDone, this._contentDispositionFilename);\n  }\n  getRangeReader(begin, end) {\n    if (end <= this._progressiveDataLength) {\n      return null;\n    }\n    const reader = new PDFDataTransportStreamRangeReader(this, begin, end);\n    this._pdfDataRangeTransport.requestDataRange(begin, end);\n    this._rangeReaders.push(reader);\n    return reader;\n  }\n  cancelAllRequests(reason) {\n    var _this$_fullRequestRea6;\n    (_this$_fullRequestRea6 = this._fullRequestReader) === null || _this$_fullRequestRea6 === void 0 ? void 0 : _this$_fullRequestRea6.cancel(reason);\n    for (const reader of this._rangeReaders.slice(0)) {\n      reader.cancel(reason);\n    }\n    this._pdfDataRangeTransport.abort();\n  }\n}\nclass PDFDataTransportStreamReader {\n  constructor(stream, queuedChunks) {\n    let progressiveDone = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let contentDispositionFilename = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    this._stream = stream;\n    this._done = progressiveDone || false;\n    this._filename = isPdfFile(contentDispositionFilename) ? contentDispositionFilename : null;\n    this._queuedChunks = queuedChunks || [];\n    this._loaded = 0;\n    for (const chunk of this._queuedChunks) {\n      this._loaded += chunk.byteLength;\n    }\n    this._requests = [];\n    this._headersReady = Promise.resolve();\n    stream._fullRequestReader = this;\n    this.onProgress = null;\n  }\n  _enqueue(chunk) {\n    if (this._done) {\n      return;\n    }\n    if (this._requests.length > 0) {\n      const requestCapability = this._requests.shift();\n      requestCapability.resolve({\n        value: chunk,\n        done: false\n      });\n    } else {\n      this._queuedChunks.push(chunk);\n    }\n    this._loaded += chunk.byteLength;\n  }\n  get headersReady() {\n    return this._headersReady;\n  }\n  get filename() {\n    return this._filename;\n  }\n  get isRangeSupported() {\n    return this._stream._isRangeSupported;\n  }\n  get isStreamingSupported() {\n    return this._stream._isStreamingSupported;\n  }\n  get contentLength() {\n    return this._stream._contentLength;\n  }\n  async read() {\n    if (this._queuedChunks.length > 0) {\n      const chunk = this._queuedChunks.shift();\n      return {\n        value: chunk,\n        done: false\n      };\n    }\n    if (this._done) {\n      return {\n        value: undefined,\n        done: true\n      };\n    }\n    const requestCapability = Promise.withResolvers();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n  cancel(reason) {\n    this._done = true;\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({\n        value: undefined,\n        done: true\n      });\n    }\n    this._requests.length = 0;\n  }\n  progressiveDone() {\n    if (this._done) {\n      return;\n    }\n    this._done = true;\n  }\n}\nclass PDFDataTransportStreamRangeReader {\n  constructor(stream, begin, end) {\n    this._stream = stream;\n    this._begin = begin;\n    this._end = end;\n    this._queuedChunk = null;\n    this._requests = [];\n    this._done = false;\n    this.onProgress = null;\n  }\n  _enqueue(chunk) {\n    if (this._done) {\n      return;\n    }\n    if (this._requests.length === 0) {\n      this._queuedChunk = chunk;\n    } else {\n      const requestsCapability = this._requests.shift();\n      requestsCapability.resolve({\n        value: chunk,\n        done: false\n      });\n      for (const requestCapability of this._requests) {\n        requestCapability.resolve({\n          value: undefined,\n          done: true\n        });\n      }\n      this._requests.length = 0;\n    }\n    this._done = true;\n    this._stream._removeRangeReader(this);\n  }\n  get isStreamingSupported() {\n    return false;\n  }\n  async read() {\n    if (this._queuedChunk) {\n      const chunk = this._queuedChunk;\n      this._queuedChunk = null;\n      return {\n        value: chunk,\n        done: false\n      };\n    }\n    if (this._done) {\n      return {\n        value: undefined,\n        done: true\n      };\n    }\n    const requestCapability = Promise.withResolvers();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n  cancel(reason) {\n    this._done = true;\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({\n        value: undefined,\n        done: true\n      });\n    }\n    this._requests.length = 0;\n    this._stream._removeRangeReader(this);\n  }\n}\n; // ./src/display/content_disposition.js\n\nfunction getFilenameFromContentDispositionHeader(contentDisposition) {\n  let needsEncodingFixup = true;\n  let tmp = toParamRegExp(\"filename\\\\*\", \"i\").exec(contentDisposition);\n  if (tmp) {\n    tmp = tmp[1];\n    let filename = rfc2616unquote(tmp);\n    filename = unescape(filename);\n    filename = rfc5987decode(filename);\n    filename = rfc2047decode(filename);\n    return fixupEncoding(filename);\n  }\n  tmp = rfc2231getparam(contentDisposition);\n  if (tmp) {\n    const filename = rfc2047decode(tmp);\n    return fixupEncoding(filename);\n  }\n  tmp = toParamRegExp(\"filename\", \"i\").exec(contentDisposition);\n  if (tmp) {\n    tmp = tmp[1];\n    let filename = rfc2616unquote(tmp);\n    filename = rfc2047decode(filename);\n    return fixupEncoding(filename);\n  }\n  function toParamRegExp(attributePattern, flags) {\n    return new RegExp(\"(?:^|;)\\\\s*\" + attributePattern + \"\\\\s*=\\\\s*\" + \"(\" + '[^\";\\\\s][^;\\\\s]*' + \"|\" + '\"(?:[^\"\\\\\\\\]|\\\\\\\\\"?)+\"?' + \")\", flags);\n  }\n  function textdecode(encoding, value) {\n    if (encoding) {\n      if (!/^[\\x00-\\xFF]+$/.test(value)) {\n        return value;\n      }\n      try {\n        const decoder = new TextDecoder(encoding, {\n          fatal: true\n        });\n        const buffer = stringToBytes(value);\n        value = decoder.decode(buffer);\n        needsEncodingFixup = false;\n      } catch {}\n    }\n    return value;\n  }\n  function fixupEncoding(value) {\n    if (needsEncodingFixup && /[\\x80-\\xff]/.test(value)) {\n      value = textdecode(\"utf-8\", value);\n      if (needsEncodingFixup) {\n        value = textdecode(\"iso-8859-1\", value);\n      }\n    }\n    return value;\n  }\n  function rfc2231getparam(contentDispositionStr) {\n    const matches = [];\n    let match;\n    const iter = toParamRegExp(\"filename\\\\*((?!0\\\\d)\\\\d+)(\\\\*?)\", \"ig\");\n    while ((match = iter.exec(contentDispositionStr)) !== null) {\n      let _match = match,\n        _match2 = _slicedToArray(_match, 4),\n        n = _match2[1],\n        quot = _match2[2],\n        part = _match2[3];\n      n = parseInt(n, 10);\n      if (n in matches) {\n        if (n === 0) {\n          break;\n        }\n        continue;\n      }\n      matches[n] = [quot, part];\n    }\n    const parts = [];\n    for (let n = 0; n < matches.length; ++n) {\n      if (!(n in matches)) {\n        break;\n      }\n      let _matches$n = _slicedToArray(matches[n], 2),\n        quot = _matches$n[0],\n        part = _matches$n[1];\n      part = rfc2616unquote(part);\n      if (quot) {\n        part = unescape(part);\n        if (n === 0) {\n          part = rfc5987decode(part);\n        }\n      }\n      parts.push(part);\n    }\n    return parts.join(\"\");\n  }\n  function rfc2616unquote(value) {\n    if (value.startsWith('\"')) {\n      const parts = value.slice(1).split('\\\\\"');\n      for (let i = 0; i < parts.length; ++i) {\n        const quotindex = parts[i].indexOf('\"');\n        if (quotindex !== -1) {\n          parts[i] = parts[i].slice(0, quotindex);\n          parts.length = i + 1;\n        }\n        parts[i] = parts[i].replaceAll(/\\\\(.)/g, \"$1\");\n      }\n      value = parts.join('\"');\n    }\n    return value;\n  }\n  function rfc5987decode(extvalue) {\n    const encodingend = extvalue.indexOf(\"'\");\n    if (encodingend === -1) {\n      return extvalue;\n    }\n    const encoding = extvalue.slice(0, encodingend);\n    const langvalue = extvalue.slice(encodingend + 1);\n    const value = langvalue.replace(/^[^']*'/, \"\");\n    return textdecode(encoding, value);\n  }\n  function rfc2047decode(value) {\n    if (!value.startsWith(\"=?\") || /[\\x00-\\x19\\x80-\\xff]/.test(value)) {\n      return value;\n    }\n    return value.replaceAll(/=\\?([\\w-]*)\\?([QqBb])\\?((?:[^?]|\\?(?!=))*)\\?=/g, function (matches, charset, encoding, text) {\n      if (encoding === \"q\" || encoding === \"Q\") {\n        text = text.replaceAll(\"_\", \" \");\n        text = text.replaceAll(/=([0-9a-fA-F]{2})/g, function (match, hex) {\n          return String.fromCharCode(parseInt(hex, 16));\n        });\n        return textdecode(charset, text);\n      }\n      try {\n        text = atob(text);\n      } catch {}\n      return textdecode(charset, text);\n    });\n  }\n  return \"\";\n}\n; // ./src/display/network_utils.js\n\nfunction createHeaders(isHttp, httpHeaders) {\n  const headers = new Headers();\n  if (!isHttp || !httpHeaders || typeof httpHeaders !== \"object\") {\n    return headers;\n  }\n  for (const key in httpHeaders) {\n    const val = httpHeaders[key];\n    if (val !== undefined) {\n      headers.append(key, val);\n    }\n  }\n  return headers;\n}\nfunction validateRangeRequestCapabilities(_ref67) {\n  let responseHeaders = _ref67.responseHeaders,\n    isHttp = _ref67.isHttp,\n    rangeChunkSize = _ref67.rangeChunkSize,\n    disableRange = _ref67.disableRange;\n  const returnValues = {\n    allowRangeRequests: false,\n    suggestedLength: undefined\n  };\n  const length = parseInt(responseHeaders.get(\"Content-Length\"), 10);\n  if (!Number.isInteger(length)) {\n    return returnValues;\n  }\n  returnValues.suggestedLength = length;\n  if (length <= 2 * rangeChunkSize) {\n    return returnValues;\n  }\n  if (disableRange || !isHttp) {\n    return returnValues;\n  }\n  if (responseHeaders.get(\"Accept-Ranges\") !== \"bytes\") {\n    return returnValues;\n  }\n  const contentEncoding = responseHeaders.get(\"Content-Encoding\") || \"identity\";\n  if (contentEncoding !== \"identity\") {\n    return returnValues;\n  }\n  returnValues.allowRangeRequests = true;\n  return returnValues;\n}\nfunction extractFilenameFromHeader(responseHeaders) {\n  const contentDisposition = responseHeaders.get(\"Content-Disposition\");\n  if (contentDisposition) {\n    let filename = getFilenameFromContentDispositionHeader(contentDisposition);\n    if (filename.includes(\"%\")) {\n      try {\n        filename = decodeURIComponent(filename);\n      } catch {}\n    }\n    if (isPdfFile(filename)) {\n      return filename;\n    }\n  }\n  return null;\n}\nfunction createResponseStatusError(status, url) {\n  if (status === 404 || status === 0 && url.startsWith(\"file:\")) {\n    return new MissingPDFException('Missing PDF \"' + url + '\".');\n  }\n  return new UnexpectedResponseException(`Unexpected server response (${status}) while retrieving PDF \"${url}\".`, status);\n}\nfunction validateResponseStatus(status) {\n  return status === 200 || status === 206;\n}\n; // ./src/display/fetch_stream.js\n\nfunction createFetchOptions(headers, withCredentials, abortController) {\n  return {\n    method: \"GET\",\n    headers,\n    signal: abortController.signal,\n    mode: \"cors\",\n    credentials: withCredentials ? \"include\" : \"same-origin\",\n    redirect: \"follow\"\n  };\n}\nfunction getArrayBuffer(val) {\n  if (val instanceof Uint8Array) {\n    return val.buffer;\n  }\n  if (val instanceof ArrayBuffer) {\n    return val;\n  }\n  warn(`getArrayBuffer - unexpected data format: ${val}`);\n  return new Uint8Array(val).buffer;\n}\nclass PDFFetchStream {\n  constructor(source) {\n    this.source = source;\n    this.isHttp = /^https?:/i.test(source.url);\n    this.headers = createHeaders(this.isHttp, source.httpHeaders);\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n  get _progressiveDataLength() {\n    var _this$_fullRequestRea7, _this$_fullRequestRea8;\n    return (_this$_fullRequestRea7 = (_this$_fullRequestRea8 = this._fullRequestReader) === null || _this$_fullRequestRea8 === void 0 ? void 0 : _this$_fullRequestRea8._loaded) !== null && _this$_fullRequestRea7 !== void 0 ? _this$_fullRequestRea7 : 0;\n  }\n  getFullReader() {\n    assert(!this._fullRequestReader, \"PDFFetchStream.getFullReader can only be called once.\");\n    this._fullRequestReader = new PDFFetchStreamReader(this);\n    return this._fullRequestReader;\n  }\n  getRangeReader(begin, end) {\n    if (end <= this._progressiveDataLength) {\n      return null;\n    }\n    const reader = new PDFFetchStreamRangeReader(this, begin, end);\n    this._rangeRequestReaders.push(reader);\n    return reader;\n  }\n  cancelAllRequests(reason) {\n    var _this$_fullRequestRea9;\n    (_this$_fullRequestRea9 = this._fullRequestReader) === null || _this$_fullRequestRea9 === void 0 ? void 0 : _this$_fullRequestRea9.cancel(reason);\n    for (const reader of this._rangeRequestReaders.slice(0)) {\n      reader.cancel(reason);\n    }\n  }\n}\nclass PDFFetchStreamReader {\n  constructor(stream) {\n    this._stream = stream;\n    this._reader = null;\n    this._loaded = 0;\n    this._filename = null;\n    const source = stream.source;\n    this._withCredentials = source.withCredentials || false;\n    this._contentLength = source.length;\n    this._headersCapability = Promise.withResolvers();\n    this._disableRange = source.disableRange || false;\n    this._rangeChunkSize = source.rangeChunkSize;\n    if (!this._rangeChunkSize && !this._disableRange) {\n      this._disableRange = true;\n    }\n    this._abortController = new AbortController();\n    this._isStreamingSupported = !source.disableStream;\n    this._isRangeSupported = !source.disableRange;\n    const headers = new Headers(stream.headers);\n    const url = source.url;\n    fetch(url, createFetchOptions(headers, this._withCredentials, this._abortController)).then(response => {\n      if (!validateResponseStatus(response.status)) {\n        throw createResponseStatusError(response.status, url);\n      }\n      this._reader = response.body.getReader();\n      this._headersCapability.resolve();\n      const responseHeaders = response.headers;\n      const _validateRangeRequest = validateRangeRequestCapabilities({\n          responseHeaders,\n          isHttp: stream.isHttp,\n          rangeChunkSize: this._rangeChunkSize,\n          disableRange: this._disableRange\n        }),\n        allowRangeRequests = _validateRangeRequest.allowRangeRequests,\n        suggestedLength = _validateRangeRequest.suggestedLength;\n      this._isRangeSupported = allowRangeRequests;\n      this._contentLength = suggestedLength || this._contentLength;\n      this._filename = extractFilenameFromHeader(responseHeaders);\n      if (!this._isStreamingSupported && this._isRangeSupported) {\n        this.cancel(new AbortException(\"Streaming is disabled.\"));\n      }\n    }).catch(this._headersCapability.reject);\n    this.onProgress = null;\n  }\n  get headersReady() {\n    return this._headersCapability.promise;\n  }\n  get filename() {\n    return this._filename;\n  }\n  get contentLength() {\n    return this._contentLength;\n  }\n  get isRangeSupported() {\n    return this._isRangeSupported;\n  }\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n  async read() {\n    var _this$onProgress;\n    await this._headersCapability.promise;\n    const _await$this$_reader$r = await this._reader.read(),\n      value = _await$this$_reader$r.value,\n      done = _await$this$_reader$r.done;\n    if (done) {\n      return {\n        value,\n        done\n      };\n    }\n    this._loaded += value.byteLength;\n    (_this$onProgress = this.onProgress) === null || _this$onProgress === void 0 ? void 0 : _this$onProgress.call(this, {\n      loaded: this._loaded,\n      total: this._contentLength\n    });\n    return {\n      value: getArrayBuffer(value),\n      done: false\n    };\n  }\n  cancel(reason) {\n    var _this$_reader;\n    (_this$_reader = this._reader) === null || _this$_reader === void 0 ? void 0 : _this$_reader.cancel(reason);\n    this._abortController.abort();\n  }\n}\nclass PDFFetchStreamRangeReader {\n  constructor(stream, begin, end) {\n    this._stream = stream;\n    this._reader = null;\n    this._loaded = 0;\n    const source = stream.source;\n    this._withCredentials = source.withCredentials || false;\n    this._readCapability = Promise.withResolvers();\n    this._isStreamingSupported = !source.disableStream;\n    this._abortController = new AbortController();\n    const headers = new Headers(stream.headers);\n    headers.append(\"Range\", `bytes=${begin}-${end - 1}`);\n    const url = source.url;\n    fetch(url, createFetchOptions(headers, this._withCredentials, this._abortController)).then(response => {\n      if (!validateResponseStatus(response.status)) {\n        throw createResponseStatusError(response.status, url);\n      }\n      this._readCapability.resolve();\n      this._reader = response.body.getReader();\n    }).catch(this._readCapability.reject);\n    this.onProgress = null;\n  }\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n  async read() {\n    var _this$onProgress2;\n    await this._readCapability.promise;\n    const _await$this$_reader$r2 = await this._reader.read(),\n      value = _await$this$_reader$r2.value,\n      done = _await$this$_reader$r2.done;\n    if (done) {\n      return {\n        value,\n        done\n      };\n    }\n    this._loaded += value.byteLength;\n    (_this$onProgress2 = this.onProgress) === null || _this$onProgress2 === void 0 ? void 0 : _this$onProgress2.call(this, {\n      loaded: this._loaded\n    });\n    return {\n      value: getArrayBuffer(value),\n      done: false\n    };\n  }\n  cancel(reason) {\n    var _this$_reader2;\n    (_this$_reader2 = this._reader) === null || _this$_reader2 === void 0 ? void 0 : _this$_reader2.cancel(reason);\n    this._abortController.abort();\n  }\n}\n; // ./src/display/network.js\n\nconst OK_RESPONSE = 200;\nconst PARTIAL_CONTENT_RESPONSE = 206;\nfunction network_getArrayBuffer(xhr) {\n  const data = xhr.response;\n  if (typeof data !== \"string\") {\n    return data;\n  }\n  return stringToBytes(data).buffer;\n}\nclass NetworkManager {\n  constructor(_ref68) {\n    let url = _ref68.url,\n      httpHeaders = _ref68.httpHeaders,\n      withCredentials = _ref68.withCredentials;\n    this.url = url;\n    this.isHttp = /^https?:/i.test(url);\n    this.headers = createHeaders(this.isHttp, httpHeaders);\n    this.withCredentials = withCredentials || false;\n    this.currXhrId = 0;\n    this.pendingRequests = Object.create(null);\n  }\n  requestRange(begin, end, listeners) {\n    const args = {\n      begin,\n      end\n    };\n    for (const prop in listeners) {\n      args[prop] = listeners[prop];\n    }\n    return this.request(args);\n  }\n  requestFull(listeners) {\n    return this.request(listeners);\n  }\n  request(args) {\n    const xhr = new XMLHttpRequest();\n    const xhrId = this.currXhrId++;\n    const pendingRequest = this.pendingRequests[xhrId] = {\n      xhr\n    };\n    xhr.open(\"GET\", this.url);\n    xhr.withCredentials = this.withCredentials;\n    for (const _ref69 of this.headers) {\n      var _ref70 = _slicedToArray(_ref69, 2);\n      const key = _ref70[0];\n      const val = _ref70[1];\n      xhr.setRequestHeader(key, val);\n    }\n    if (this.isHttp && \"begin\" in args && \"end\" in args) {\n      xhr.setRequestHeader(\"Range\", `bytes=${args.begin}-${args.end - 1}`);\n      pendingRequest.expectedStatus = PARTIAL_CONTENT_RESPONSE;\n    } else {\n      pendingRequest.expectedStatus = OK_RESPONSE;\n    }\n    xhr.responseType = \"arraybuffer\";\n    if (args.onError) {\n      xhr.onerror = function (evt) {\n        args.onError(xhr.status);\n      };\n    }\n    xhr.onreadystatechange = this.onStateChange.bind(this, xhrId);\n    xhr.onprogress = this.onProgress.bind(this, xhrId);\n    pendingRequest.onHeadersReceived = args.onHeadersReceived;\n    pendingRequest.onDone = args.onDone;\n    pendingRequest.onError = args.onError;\n    pendingRequest.onProgress = args.onProgress;\n    xhr.send(null);\n    return xhrId;\n  }\n  onProgress(xhrId, evt) {\n    var _pendingRequest$onPro;\n    const pendingRequest = this.pendingRequests[xhrId];\n    if (!pendingRequest) {\n      return;\n    }\n    (_pendingRequest$onPro = pendingRequest.onProgress) === null || _pendingRequest$onPro === void 0 ? void 0 : _pendingRequest$onPro.call(pendingRequest, evt);\n  }\n  onStateChange(xhrId, evt) {\n    const pendingRequest = this.pendingRequests[xhrId];\n    if (!pendingRequest) {\n      return;\n    }\n    const xhr = pendingRequest.xhr;\n    if (xhr.readyState >= 2 && pendingRequest.onHeadersReceived) {\n      pendingRequest.onHeadersReceived();\n      delete pendingRequest.onHeadersReceived;\n    }\n    if (xhr.readyState !== 4) {\n      return;\n    }\n    if (!(xhrId in this.pendingRequests)) {\n      return;\n    }\n    delete this.pendingRequests[xhrId];\n    if (xhr.status === 0 && this.isHttp) {\n      var _pendingRequest$onErr;\n      (_pendingRequest$onErr = pendingRequest.onError) === null || _pendingRequest$onErr === void 0 ? void 0 : _pendingRequest$onErr.call(pendingRequest, xhr.status);\n      return;\n    }\n    const xhrStatus = xhr.status || OK_RESPONSE;\n    const ok_response_on_range_request = xhrStatus === OK_RESPONSE && pendingRequest.expectedStatus === PARTIAL_CONTENT_RESPONSE;\n    if (!ok_response_on_range_request && xhrStatus !== pendingRequest.expectedStatus) {\n      var _pendingRequest$onErr2;\n      (_pendingRequest$onErr2 = pendingRequest.onError) === null || _pendingRequest$onErr2 === void 0 ? void 0 : _pendingRequest$onErr2.call(pendingRequest, xhr.status);\n      return;\n    }\n    const chunk = network_getArrayBuffer(xhr);\n    if (xhrStatus === PARTIAL_CONTENT_RESPONSE) {\n      const rangeHeader = xhr.getResponseHeader(\"Content-Range\");\n      const matches = /bytes (\\d+)-(\\d+)\\/(\\d+)/.exec(rangeHeader);\n      pendingRequest.onDone({\n        begin: parseInt(matches[1], 10),\n        chunk\n      });\n    } else if (chunk) {\n      pendingRequest.onDone({\n        begin: 0,\n        chunk\n      });\n    } else {\n      var _pendingRequest$onErr3;\n      (_pendingRequest$onErr3 = pendingRequest.onError) === null || _pendingRequest$onErr3 === void 0 ? void 0 : _pendingRequest$onErr3.call(pendingRequest, xhr.status);\n    }\n  }\n  getRequestXhr(xhrId) {\n    return this.pendingRequests[xhrId].xhr;\n  }\n  isPendingRequest(xhrId) {\n    return xhrId in this.pendingRequests;\n  }\n  abortRequest(xhrId) {\n    const xhr = this.pendingRequests[xhrId].xhr;\n    delete this.pendingRequests[xhrId];\n    xhr.abort();\n  }\n}\nclass PDFNetworkStream {\n  constructor(source) {\n    this._source = source;\n    this._manager = new NetworkManager(source);\n    this._rangeChunkSize = source.rangeChunkSize;\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n  _onRangeRequestReaderClosed(reader) {\n    const i = this._rangeRequestReaders.indexOf(reader);\n    if (i >= 0) {\n      this._rangeRequestReaders.splice(i, 1);\n    }\n  }\n  getFullReader() {\n    assert(!this._fullRequestReader, \"PDFNetworkStream.getFullReader can only be called once.\");\n    this._fullRequestReader = new PDFNetworkStreamFullRequestReader(this._manager, this._source);\n    return this._fullRequestReader;\n  }\n  getRangeReader(begin, end) {\n    const reader = new PDFNetworkStreamRangeRequestReader(this._manager, begin, end);\n    reader.onClosed = this._onRangeRequestReaderClosed.bind(this);\n    this._rangeRequestReaders.push(reader);\n    return reader;\n  }\n  cancelAllRequests(reason) {\n    var _this$_fullRequestRea0;\n    (_this$_fullRequestRea0 = this._fullRequestReader) === null || _this$_fullRequestRea0 === void 0 ? void 0 : _this$_fullRequestRea0.cancel(reason);\n    for (const reader of this._rangeRequestReaders.slice(0)) {\n      reader.cancel(reason);\n    }\n  }\n}\nclass PDFNetworkStreamFullRequestReader {\n  constructor(manager, source) {\n    this._manager = manager;\n    const args = {\n      onHeadersReceived: this._onHeadersReceived.bind(this),\n      onDone: this._onDone.bind(this),\n      onError: this._onError.bind(this),\n      onProgress: this._onProgress.bind(this)\n    };\n    this._url = source.url;\n    this._fullRequestId = manager.requestFull(args);\n    this._headersCapability = Promise.withResolvers();\n    this._disableRange = source.disableRange || false;\n    this._contentLength = source.length;\n    this._rangeChunkSize = source.rangeChunkSize;\n    if (!this._rangeChunkSize && !this._disableRange) {\n      this._disableRange = true;\n    }\n    this._isStreamingSupported = false;\n    this._isRangeSupported = false;\n    this._cachedChunks = [];\n    this._requests = [];\n    this._done = false;\n    this._storedError = undefined;\n    this._filename = null;\n    this.onProgress = null;\n  }\n  _onHeadersReceived() {\n    const fullRequestXhrId = this._fullRequestId;\n    const fullRequestXhr = this._manager.getRequestXhr(fullRequestXhrId);\n    const responseHeaders = new Headers(fullRequestXhr.getAllResponseHeaders().trim().split(/[\\r\\n]+/).map(x => {\n      const _x$split = x.split(\": \"),\n        _x$split2 = _toArray(_x$split),\n        key = _x$split2[0],\n        val = _x$split2.slice(1);\n      return [key, val.join(\": \")];\n    }));\n    const _validateRangeRequest2 = validateRangeRequestCapabilities({\n        responseHeaders,\n        isHttp: this._manager.isHttp,\n        rangeChunkSize: this._rangeChunkSize,\n        disableRange: this._disableRange\n      }),\n      allowRangeRequests = _validateRangeRequest2.allowRangeRequests,\n      suggestedLength = _validateRangeRequest2.suggestedLength;\n    if (allowRangeRequests) {\n      this._isRangeSupported = true;\n    }\n    this._contentLength = suggestedLength || this._contentLength;\n    this._filename = extractFilenameFromHeader(responseHeaders);\n    if (this._isRangeSupported) {\n      this._manager.abortRequest(fullRequestXhrId);\n    }\n    this._headersCapability.resolve();\n  }\n  _onDone(data) {\n    if (data) {\n      if (this._requests.length > 0) {\n        const requestCapability = this._requests.shift();\n        requestCapability.resolve({\n          value: data.chunk,\n          done: false\n        });\n      } else {\n        this._cachedChunks.push(data.chunk);\n      }\n    }\n    this._done = true;\n    if (this._cachedChunks.length > 0) {\n      return;\n    }\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({\n        value: undefined,\n        done: true\n      });\n    }\n    this._requests.length = 0;\n  }\n  _onError(status) {\n    this._storedError = createResponseStatusError(status, this._url);\n    this._headersCapability.reject(this._storedError);\n    for (const requestCapability of this._requests) {\n      requestCapability.reject(this._storedError);\n    }\n    this._requests.length = 0;\n    this._cachedChunks.length = 0;\n  }\n  _onProgress(evt) {\n    var _this$onProgress3;\n    (_this$onProgress3 = this.onProgress) === null || _this$onProgress3 === void 0 ? void 0 : _this$onProgress3.call(this, {\n      loaded: evt.loaded,\n      total: evt.lengthComputable ? evt.total : this._contentLength\n    });\n  }\n  get filename() {\n    return this._filename;\n  }\n  get isRangeSupported() {\n    return this._isRangeSupported;\n  }\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n  get contentLength() {\n    return this._contentLength;\n  }\n  get headersReady() {\n    return this._headersCapability.promise;\n  }\n  async read() {\n    if (this._storedError) {\n      throw this._storedError;\n    }\n    if (this._cachedChunks.length > 0) {\n      const chunk = this._cachedChunks.shift();\n      return {\n        value: chunk,\n        done: false\n      };\n    }\n    if (this._done) {\n      return {\n        value: undefined,\n        done: true\n      };\n    }\n    const requestCapability = Promise.withResolvers();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n  cancel(reason) {\n    this._done = true;\n    this._headersCapability.reject(reason);\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({\n        value: undefined,\n        done: true\n      });\n    }\n    this._requests.length = 0;\n    if (this._manager.isPendingRequest(this._fullRequestId)) {\n      this._manager.abortRequest(this._fullRequestId);\n    }\n    this._fullRequestReader = null;\n  }\n}\nclass PDFNetworkStreamRangeRequestReader {\n  constructor(manager, begin, end) {\n    this._manager = manager;\n    const args = {\n      onDone: this._onDone.bind(this),\n      onError: this._onError.bind(this),\n      onProgress: this._onProgress.bind(this)\n    };\n    this._url = manager.url;\n    this._requestId = manager.requestRange(begin, end, args);\n    this._requests = [];\n    this._queuedChunk = null;\n    this._done = false;\n    this._storedError = undefined;\n    this.onProgress = null;\n    this.onClosed = null;\n  }\n  _close() {\n    var _this$onClosed;\n    (_this$onClosed = this.onClosed) === null || _this$onClosed === void 0 ? void 0 : _this$onClosed.call(this, this);\n  }\n  _onDone(data) {\n    const chunk = data.chunk;\n    if (this._requests.length > 0) {\n      const requestCapability = this._requests.shift();\n      requestCapability.resolve({\n        value: chunk,\n        done: false\n      });\n    } else {\n      this._queuedChunk = chunk;\n    }\n    this._done = true;\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({\n        value: undefined,\n        done: true\n      });\n    }\n    this._requests.length = 0;\n    this._close();\n  }\n  _onError(status) {\n    this._storedError = createResponseStatusError(status, this._url);\n    for (const requestCapability of this._requests) {\n      requestCapability.reject(this._storedError);\n    }\n    this._requests.length = 0;\n    this._queuedChunk = null;\n  }\n  _onProgress(evt) {\n    if (!this.isStreamingSupported) {\n      var _this$onProgress4;\n      (_this$onProgress4 = this.onProgress) === null || _this$onProgress4 === void 0 ? void 0 : _this$onProgress4.call(this, {\n        loaded: evt.loaded\n      });\n    }\n  }\n  get isStreamingSupported() {\n    return false;\n  }\n  async read() {\n    if (this._storedError) {\n      throw this._storedError;\n    }\n    if (this._queuedChunk !== null) {\n      const chunk = this._queuedChunk;\n      this._queuedChunk = null;\n      return {\n        value: chunk,\n        done: false\n      };\n    }\n    if (this._done) {\n      return {\n        value: undefined,\n        done: true\n      };\n    }\n    const requestCapability = Promise.withResolvers();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n  cancel(reason) {\n    this._done = true;\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({\n        value: undefined,\n        done: true\n      });\n    }\n    this._requests.length = 0;\n    if (this._manager.isPendingRequest(this._requestId)) {\n      this._manager.abortRequest(this._requestId);\n    }\n    this._close();\n  }\n}\n; // ./src/display/node_stream.js\n\nconst urlRegex = /^[a-z][a-z0-9\\-+.]+:/i;\nfunction parseUrlOrPath(sourceUrl) {\n  if (urlRegex.test(sourceUrl)) {\n    return new URL(sourceUrl);\n  }\n  const url = NodePackages.get(\"url\");\n  return new URL(url.pathToFileURL(sourceUrl));\n}\nfunction createRequest(url, headers, callback) {\n  if (url.protocol === \"http:\") {\n    const http = NodePackages.get(\"http\");\n    return http.request(url, {\n      headers\n    }, callback);\n  }\n  const https = NodePackages.get(\"https\");\n  return https.request(url, {\n    headers\n  }, callback);\n}\nclass PDFNodeStream {\n  constructor(source) {\n    this.source = source;\n    this.url = parseUrlOrPath(source.url);\n    this.isHttp = this.url.protocol === \"http:\" || this.url.protocol === \"https:\";\n    this.isFsUrl = this.url.protocol === \"file:\";\n    this.headers = createHeaders(this.isHttp, source.httpHeaders);\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n  get _progressiveDataLength() {\n    var _this$_fullRequestRea1, _this$_fullRequestRea10;\n    return (_this$_fullRequestRea1 = (_this$_fullRequestRea10 = this._fullRequestReader) === null || _this$_fullRequestRea10 === void 0 ? void 0 : _this$_fullRequestRea10._loaded) !== null && _this$_fullRequestRea1 !== void 0 ? _this$_fullRequestRea1 : 0;\n  }\n  getFullReader() {\n    assert(!this._fullRequestReader, \"PDFNodeStream.getFullReader can only be called once.\");\n    this._fullRequestReader = this.isFsUrl ? new PDFNodeStreamFsFullReader(this) : new PDFNodeStreamFullReader(this);\n    return this._fullRequestReader;\n  }\n  getRangeReader(start, end) {\n    if (end <= this._progressiveDataLength) {\n      return null;\n    }\n    const rangeReader = this.isFsUrl ? new PDFNodeStreamFsRangeReader(this, start, end) : new PDFNodeStreamRangeReader(this, start, end);\n    this._rangeRequestReaders.push(rangeReader);\n    return rangeReader;\n  }\n  cancelAllRequests(reason) {\n    var _this$_fullRequestRea11;\n    (_this$_fullRequestRea11 = this._fullRequestReader) === null || _this$_fullRequestRea11 === void 0 ? void 0 : _this$_fullRequestRea11.cancel(reason);\n    for (const reader of this._rangeRequestReaders.slice(0)) {\n      reader.cancel(reason);\n    }\n  }\n}\nclass BaseFullReader {\n  constructor(stream) {\n    this._url = stream.url;\n    this._done = false;\n    this._storedError = null;\n    this.onProgress = null;\n    const source = stream.source;\n    this._contentLength = source.length;\n    this._loaded = 0;\n    this._filename = null;\n    this._disableRange = source.disableRange || false;\n    this._rangeChunkSize = source.rangeChunkSize;\n    if (!this._rangeChunkSize && !this._disableRange) {\n      this._disableRange = true;\n    }\n    this._isStreamingSupported = !source.disableStream;\n    this._isRangeSupported = !source.disableRange;\n    this._readableStream = null;\n    this._readCapability = Promise.withResolvers();\n    this._headersCapability = Promise.withResolvers();\n  }\n  get headersReady() {\n    return this._headersCapability.promise;\n  }\n  get filename() {\n    return this._filename;\n  }\n  get contentLength() {\n    return this._contentLength;\n  }\n  get isRangeSupported() {\n    return this._isRangeSupported;\n  }\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n  async read() {\n    var _this$onProgress5;\n    await this._readCapability.promise;\n    if (this._done) {\n      return {\n        value: undefined,\n        done: true\n      };\n    }\n    if (this._storedError) {\n      throw this._storedError;\n    }\n    const chunk = this._readableStream.read();\n    if (chunk === null) {\n      this._readCapability = Promise.withResolvers();\n      return this.read();\n    }\n    this._loaded += chunk.length;\n    (_this$onProgress5 = this.onProgress) === null || _this$onProgress5 === void 0 ? void 0 : _this$onProgress5.call(this, {\n      loaded: this._loaded,\n      total: this._contentLength\n    });\n    const buffer = new Uint8Array(chunk).buffer;\n    return {\n      value: buffer,\n      done: false\n    };\n  }\n  cancel(reason) {\n    if (!this._readableStream) {\n      this._error(reason);\n      return;\n    }\n    this._readableStream.destroy(reason);\n  }\n  _error(reason) {\n    this._storedError = reason;\n    this._readCapability.resolve();\n  }\n  _setReadableStream(readableStream) {\n    this._readableStream = readableStream;\n    readableStream.on(\"readable\", () => {\n      this._readCapability.resolve();\n    });\n    readableStream.on(\"end\", () => {\n      readableStream.destroy();\n      this._done = true;\n      this._readCapability.resolve();\n    });\n    readableStream.on(\"error\", reason => {\n      this._error(reason);\n    });\n    if (!this._isStreamingSupported && this._isRangeSupported) {\n      this._error(new AbortException(\"streaming is disabled\"));\n    }\n    if (this._storedError) {\n      this._readableStream.destroy(this._storedError);\n    }\n  }\n}\nclass BaseRangeReader {\n  constructor(stream) {\n    this._url = stream.url;\n    this._done = false;\n    this._storedError = null;\n    this.onProgress = null;\n    this._loaded = 0;\n    this._readableStream = null;\n    this._readCapability = Promise.withResolvers();\n    const source = stream.source;\n    this._isStreamingSupported = !source.disableStream;\n  }\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n  async read() {\n    var _this$onProgress6;\n    await this._readCapability.promise;\n    if (this._done) {\n      return {\n        value: undefined,\n        done: true\n      };\n    }\n    if (this._storedError) {\n      throw this._storedError;\n    }\n    const chunk = this._readableStream.read();\n    if (chunk === null) {\n      this._readCapability = Promise.withResolvers();\n      return this.read();\n    }\n    this._loaded += chunk.length;\n    (_this$onProgress6 = this.onProgress) === null || _this$onProgress6 === void 0 ? void 0 : _this$onProgress6.call(this, {\n      loaded: this._loaded\n    });\n    const buffer = new Uint8Array(chunk).buffer;\n    return {\n      value: buffer,\n      done: false\n    };\n  }\n  cancel(reason) {\n    if (!this._readableStream) {\n      this._error(reason);\n      return;\n    }\n    this._readableStream.destroy(reason);\n  }\n  _error(reason) {\n    this._storedError = reason;\n    this._readCapability.resolve();\n  }\n  _setReadableStream(readableStream) {\n    this._readableStream = readableStream;\n    readableStream.on(\"readable\", () => {\n      this._readCapability.resolve();\n    });\n    readableStream.on(\"end\", () => {\n      readableStream.destroy();\n      this._done = true;\n      this._readCapability.resolve();\n    });\n    readableStream.on(\"error\", reason => {\n      this._error(reason);\n    });\n    if (this._storedError) {\n      this._readableStream.destroy(this._storedError);\n    }\n  }\n}\nclass PDFNodeStreamFullReader extends BaseFullReader {\n  constructor(stream) {\n    super(stream);\n    const headers = Object.fromEntries(stream.headers);\n    const handleResponse = response => {\n      if (response.statusCode === 404) {\n        const error = new MissingPDFException(`Missing PDF \"${this._url}\".`);\n        this._storedError = error;\n        this._headersCapability.reject(error);\n        return;\n      }\n      this._headersCapability.resolve();\n      this._setReadableStream(response);\n      const responseHeaders = new Headers(this._readableStream.headers);\n      const _validateRangeRequest3 = validateRangeRequestCapabilities({\n          responseHeaders,\n          isHttp: stream.isHttp,\n          rangeChunkSize: this._rangeChunkSize,\n          disableRange: this._disableRange\n        }),\n        allowRangeRequests = _validateRangeRequest3.allowRangeRequests,\n        suggestedLength = _validateRangeRequest3.suggestedLength;\n      this._isRangeSupported = allowRangeRequests;\n      this._contentLength = suggestedLength || this._contentLength;\n      this._filename = extractFilenameFromHeader(responseHeaders);\n    };\n    this._request = createRequest(this._url, headers, handleResponse);\n    this._request.on(\"error\", reason => {\n      this._storedError = reason;\n      this._headersCapability.reject(reason);\n    });\n    this._request.end();\n  }\n}\nclass PDFNodeStreamRangeReader extends BaseRangeReader {\n  constructor(stream, start, end) {\n    super(stream);\n    const headers = Object.fromEntries(stream.headers);\n    headers.Range = `bytes=${start}-${end - 1}`;\n    const handleResponse = response => {\n      if (response.statusCode === 404) {\n        const error = new MissingPDFException(`Missing PDF \"${this._url}\".`);\n        this._storedError = error;\n        return;\n      }\n      this._setReadableStream(response);\n    };\n    this._request = createRequest(this._url, headers, handleResponse);\n    this._request.on(\"error\", reason => {\n      this._storedError = reason;\n    });\n    this._request.end();\n  }\n}\nclass PDFNodeStreamFsFullReader extends BaseFullReader {\n  constructor(stream) {\n    super(stream);\n    const fs = NodePackages.get(\"fs\");\n    fs.promises.lstat(this._url).then(stat => {\n      this._contentLength = stat.size;\n      this._setReadableStream(fs.createReadStream(this._url));\n      this._headersCapability.resolve();\n    }, error => {\n      if (error.code === \"ENOENT\") {\n        error = new MissingPDFException(`Missing PDF \"${this._url}\".`);\n      }\n      this._storedError = error;\n      this._headersCapability.reject(error);\n    });\n  }\n}\nclass PDFNodeStreamFsRangeReader extends BaseRangeReader {\n  constructor(stream, start, end) {\n    super(stream);\n    const fs = NodePackages.get(\"fs\");\n    this._setReadableStream(fs.createReadStream(this._url, {\n      start,\n      end: end - 1\n    }));\n  }\n}\n; // ./src/display/text_layer.js\n\nconst MAX_TEXT_DIVS_TO_RENDER = 100000;\nconst DEFAULT_FONT_SIZE = 30;\nconst DEFAULT_FONT_ASCENT = 0.8;\nvar _capability = /*#__PURE__*/_classPrivateFieldLooseKey(\"capability\");\nvar _container2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"container\");\nvar _disableProcessItems = /*#__PURE__*/_classPrivateFieldLooseKey(\"disableProcessItems\");\nvar _fontInspectorEnabled = /*#__PURE__*/_classPrivateFieldLooseKey(\"fontInspectorEnabled\");\nvar _lang = /*#__PURE__*/_classPrivateFieldLooseKey(\"lang\");\nvar _layoutTextParams = /*#__PURE__*/_classPrivateFieldLooseKey(\"layoutTextParams\");\nvar _pageHeight2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"pageHeight\");\nvar _pageWidth2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"pageWidth\");\nvar _reader = /*#__PURE__*/_classPrivateFieldLooseKey(\"reader\");\nvar _rootContainer = /*#__PURE__*/_classPrivateFieldLooseKey(\"rootContainer\");\nvar _rotation3 = /*#__PURE__*/_classPrivateFieldLooseKey(\"rotation\");\nvar _scale = /*#__PURE__*/_classPrivateFieldLooseKey(\"scale\");\nvar _styleCache = /*#__PURE__*/_classPrivateFieldLooseKey(\"styleCache\");\nvar _textContentItemsStr = /*#__PURE__*/_classPrivateFieldLooseKey(\"textContentItemsStr\");\nvar _textContentSource = /*#__PURE__*/_classPrivateFieldLooseKey(\"textContentSource\");\nvar _textDivs = /*#__PURE__*/_classPrivateFieldLooseKey(\"textDivs\");\nvar _textDivProperties = /*#__PURE__*/_classPrivateFieldLooseKey(\"textDivProperties\");\nvar _transform = /*#__PURE__*/_classPrivateFieldLooseKey(\"transform\");\nvar _ascentCache = /*#__PURE__*/_classPrivateFieldLooseKey(\"ascentCache\");\nvar _canvasContexts = /*#__PURE__*/_classPrivateFieldLooseKey(\"canvasContexts\");\nvar _canvasCtxFonts = /*#__PURE__*/_classPrivateFieldLooseKey(\"canvasCtxFonts\");\nvar _minFontSize = /*#__PURE__*/_classPrivateFieldLooseKey(\"minFontSize\");\nvar _pendingTextLayers = /*#__PURE__*/_classPrivateFieldLooseKey(\"pendingTextLayers\");\nvar _processItems = /*#__PURE__*/_classPrivateFieldLooseKey(\"processItems\");\nvar _appendText = /*#__PURE__*/_classPrivateFieldLooseKey(\"appendText\");\nvar _layout = /*#__PURE__*/_classPrivateFieldLooseKey(\"layout\");\nvar _getCtx = /*#__PURE__*/_classPrivateFieldLooseKey(\"getCtx\");\nvar _ensureCtxFont = /*#__PURE__*/_classPrivateFieldLooseKey(\"ensureCtxFont\");\nvar _ensureMinFontSizeComputed = /*#__PURE__*/_classPrivateFieldLooseKey(\"ensureMinFontSizeComputed\");\nvar _getAscent = /*#__PURE__*/_classPrivateFieldLooseKey(\"getAscent\");\nclass TextLayer {\n  constructor(_ref71) {\n    var _globalThis$FontInspe;\n    let textContentSource = _ref71.textContentSource,\n      container = _ref71.container,\n      viewport = _ref71.viewport;\n    Object.defineProperty(this, _layout, {\n      value: _layout2\n    });\n    Object.defineProperty(this, _appendText, {\n      value: _appendText2\n    });\n    Object.defineProperty(this, _processItems, {\n      value: _processItems2\n    });\n    Object.defineProperty(this, _capability, {\n      writable: true,\n      value: Promise.withResolvers()\n    });\n    Object.defineProperty(this, _container2, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _disableProcessItems, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _fontInspectorEnabled, {\n      writable: true,\n      value: !!((_globalThis$FontInspe = globalThis.FontInspector) !== null && _globalThis$FontInspe !== void 0 && _globalThis$FontInspe.enabled)\n    });\n    Object.defineProperty(this, _lang, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _layoutTextParams, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _pageHeight2, {\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, _pageWidth2, {\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, _reader, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _rootContainer, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _rotation3, {\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, _scale, {\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, _styleCache, {\n      writable: true,\n      value: Object.create(null)\n    });\n    Object.defineProperty(this, _textContentItemsStr, {\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(this, _textContentSource, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _textDivs, {\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(this, _textDivProperties, {\n      writable: true,\n      value: new WeakMap()\n    });\n    Object.defineProperty(this, _transform, {\n      writable: true,\n      value: null\n    });\n    if (textContentSource instanceof ReadableStream) {\n      _classPrivateFieldLooseBase(this, _textContentSource)[_textContentSource] = textContentSource;\n    } else if (typeof textContentSource === \"object\") {\n      _classPrivateFieldLooseBase(this, _textContentSource)[_textContentSource] = new ReadableStream({\n        start(controller) {\n          controller.enqueue(textContentSource);\n          controller.close();\n        }\n      });\n    } else {\n      throw new Error('No \"textContentSource\" parameter specified.');\n    }\n    _classPrivateFieldLooseBase(this, _container2)[_container2] = _classPrivateFieldLooseBase(this, _rootContainer)[_rootContainer] = container;\n    _classPrivateFieldLooseBase(this, _scale)[_scale] = viewport.scale * (globalThis.devicePixelRatio || 1);\n    _classPrivateFieldLooseBase(this, _rotation3)[_rotation3] = viewport.rotation;\n    _classPrivateFieldLooseBase(this, _layoutTextParams)[_layoutTextParams] = {\n      div: null,\n      properties: null,\n      ctx: null\n    };\n    const _viewport$rawDims2 = viewport.rawDims,\n      pageWidth = _viewport$rawDims2.pageWidth,\n      pageHeight = _viewport$rawDims2.pageHeight,\n      pageX = _viewport$rawDims2.pageX,\n      pageY = _viewport$rawDims2.pageY;\n    _classPrivateFieldLooseBase(this, _transform)[_transform] = [1, 0, 0, -1, -pageX, pageY + pageHeight];\n    _classPrivateFieldLooseBase(this, _pageWidth2)[_pageWidth2] = pageWidth;\n    _classPrivateFieldLooseBase(this, _pageHeight2)[_pageHeight2] = pageHeight;\n    _classPrivateFieldLooseBase(TextLayer, _ensureMinFontSizeComputed)[_ensureMinFontSizeComputed]();\n    setLayerDimensions(container, viewport);\n    _classPrivateFieldLooseBase(this, _capability)[_capability].promise.finally(() => {\n      _classPrivateFieldLooseBase(TextLayer, _pendingTextLayers)[_pendingTextLayers].delete(this);\n      _classPrivateFieldLooseBase(this, _layoutTextParams)[_layoutTextParams] = null;\n      _classPrivateFieldLooseBase(this, _styleCache)[_styleCache] = null;\n    }).catch(() => {});\n  }\n  static get fontFamilyMap() {\n    const _util_FeatureTest$pla = util_FeatureTest.platform,\n      isWindows = _util_FeatureTest$pla.isWindows,\n      isFirefox = _util_FeatureTest$pla.isFirefox;\n    return shadow(this, \"fontFamilyMap\", new Map([[\"sans-serif\", `${isWindows && isFirefox ? \"Calibri, \" : \"\"}sans-serif`], [\"monospace\", `${isWindows && isFirefox ? \"Lucida Console, \" : \"\"}monospace`]]));\n  }\n  render() {\n    const pump = () => {\n      _classPrivateFieldLooseBase(this, _reader)[_reader].read().then(_ref72 => {\n        var _classPrivateFieldLoo58, _classPrivateFieldLoo59;\n        let value = _ref72.value,\n          done = _ref72.done;\n        if (done) {\n          _classPrivateFieldLooseBase(this, _capability)[_capability].resolve();\n          return;\n        }\n        (_classPrivateFieldLoo59 = (_classPrivateFieldLoo58 = _classPrivateFieldLooseBase(this, _lang))[_lang]) !== null && _classPrivateFieldLoo59 !== void 0 ? _classPrivateFieldLoo59 : _classPrivateFieldLoo58[_lang] = value.lang;\n        Object.assign(_classPrivateFieldLooseBase(this, _styleCache)[_styleCache], value.styles);\n        _classPrivateFieldLooseBase(this, _processItems)[_processItems](value.items);\n        pump();\n      }, _classPrivateFieldLooseBase(this, _capability)[_capability].reject);\n    };\n    _classPrivateFieldLooseBase(this, _reader)[_reader] = _classPrivateFieldLooseBase(this, _textContentSource)[_textContentSource].getReader();\n    _classPrivateFieldLooseBase(TextLayer, _pendingTextLayers)[_pendingTextLayers].add(this);\n    pump();\n    return _classPrivateFieldLooseBase(this, _capability)[_capability].promise;\n  }\n  update(_ref73) {\n    let viewport = _ref73.viewport,\n      _ref73$onBefore = _ref73.onBefore,\n      onBefore = _ref73$onBefore === void 0 ? null : _ref73$onBefore;\n    const scale = viewport.scale * (globalThis.devicePixelRatio || 1);\n    const rotation = viewport.rotation;\n    if (rotation !== _classPrivateFieldLooseBase(this, _rotation3)[_rotation3]) {\n      onBefore === null || onBefore === void 0 ? void 0 : onBefore();\n      _classPrivateFieldLooseBase(this, _rotation3)[_rotation3] = rotation;\n      setLayerDimensions(_classPrivateFieldLooseBase(this, _rootContainer)[_rootContainer], {\n        rotation\n      });\n    }\n    if (scale !== _classPrivateFieldLooseBase(this, _scale)[_scale]) {\n      onBefore === null || onBefore === void 0 ? void 0 : onBefore();\n      _classPrivateFieldLooseBase(this, _scale)[_scale] = scale;\n      const params = {\n        div: null,\n        properties: null,\n        ctx: _classPrivateFieldLooseBase(TextLayer, _getCtx)[_getCtx](_classPrivateFieldLooseBase(this, _lang)[_lang])\n      };\n      for (const div of _classPrivateFieldLooseBase(this, _textDivs)[_textDivs]) {\n        params.properties = _classPrivateFieldLooseBase(this, _textDivProperties)[_textDivProperties].get(div);\n        params.div = div;\n        _classPrivateFieldLooseBase(this, _layout)[_layout](params);\n      }\n    }\n  }\n  cancel() {\n    var _classPrivateFieldLoo60;\n    const abortEx = new AbortException(\"TextLayer task cancelled.\");\n    (_classPrivateFieldLoo60 = _classPrivateFieldLooseBase(this, _reader)[_reader]) === null || _classPrivateFieldLoo60 === void 0 ? void 0 : _classPrivateFieldLoo60.cancel(abortEx).catch(() => {});\n    _classPrivateFieldLooseBase(this, _reader)[_reader] = null;\n    _classPrivateFieldLooseBase(this, _capability)[_capability].reject(abortEx);\n  }\n  get textDivs() {\n    return _classPrivateFieldLooseBase(this, _textDivs)[_textDivs];\n  }\n  get textContentItemsStr() {\n    return _classPrivateFieldLooseBase(this, _textContentItemsStr)[_textContentItemsStr];\n  }\n  static cleanup() {\n    if (_classPrivateFieldLooseBase(this, _pendingTextLayers)[_pendingTextLayers].size > 0) {\n      return;\n    }\n    _classPrivateFieldLooseBase(this, _ascentCache)[_ascentCache].clear();\n    for (const _ref74 of _classPrivateFieldLooseBase(this, _canvasContexts)[_canvasContexts].values()) {\n      const canvas = _ref74.canvas;\n      canvas.remove();\n    }\n    _classPrivateFieldLooseBase(this, _canvasContexts)[_canvasContexts].clear();\n  }\n}\n_TextLayer = TextLayer;\nfunction _processItems2(items) {\n  var _classPrivateFieldLoo142, _classPrivateFieldLoo143;\n  if (_classPrivateFieldLooseBase(this, _disableProcessItems)[_disableProcessItems]) {\n    return;\n  }\n  (_classPrivateFieldLoo143 = (_classPrivateFieldLoo142 = _classPrivateFieldLooseBase(this, _layoutTextParams)[_layoutTextParams]).ctx) !== null && _classPrivateFieldLoo143 !== void 0 ? _classPrivateFieldLoo143 : _classPrivateFieldLoo142.ctx = _classPrivateFieldLooseBase(_TextLayer, _getCtx)[_getCtx](_classPrivateFieldLooseBase(this, _lang)[_lang]);\n  const textDivs = _classPrivateFieldLooseBase(this, _textDivs)[_textDivs],\n    textContentItemsStr = _classPrivateFieldLooseBase(this, _textContentItemsStr)[_textContentItemsStr];\n  for (const item of items) {\n    if (textDivs.length > MAX_TEXT_DIVS_TO_RENDER) {\n      warn(\"Ignoring additional textDivs for performance reasons.\");\n      _classPrivateFieldLooseBase(this, _disableProcessItems)[_disableProcessItems] = true;\n      return;\n    }\n    if (item.str === undefined) {\n      if (item.type === \"beginMarkedContentProps\" || item.type === \"beginMarkedContent\") {\n        const parent = _classPrivateFieldLooseBase(this, _container2)[_container2];\n        _classPrivateFieldLooseBase(this, _container2)[_container2] = document.createElement(\"span\");\n        _classPrivateFieldLooseBase(this, _container2)[_container2].classList.add(\"markedContent\");\n        if (item.id !== null) {\n          _classPrivateFieldLooseBase(this, _container2)[_container2].setAttribute(\"id\", `${item.id}`);\n        }\n        parent.append(_classPrivateFieldLooseBase(this, _container2)[_container2]);\n      } else if (item.type === \"endMarkedContent\") {\n        _classPrivateFieldLooseBase(this, _container2)[_container2] = _classPrivateFieldLooseBase(this, _container2)[_container2].parentNode;\n      }\n      continue;\n    }\n    textContentItemsStr.push(item.str);\n    _classPrivateFieldLooseBase(this, _appendText)[_appendText](item);\n  }\n}\nfunction _appendText2(geom) {\n  const textDiv = document.createElement(\"span\");\n  const textDivProperties = {\n    angle: 0,\n    canvasWidth: 0,\n    hasText: geom.str !== \"\",\n    hasEOL: geom.hasEOL,\n    fontSize: 0\n  };\n  _classPrivateFieldLooseBase(this, _textDivs)[_textDivs].push(textDiv);\n  const tx = Util.transform(_classPrivateFieldLooseBase(this, _transform)[_transform], geom.transform);\n  let angle = Math.atan2(tx[1], tx[0]);\n  const style = _classPrivateFieldLooseBase(this, _styleCache)[_styleCache][geom.fontName];\n  if (style.vertical) {\n    angle += Math.PI / 2;\n  }\n  let fontFamily = _classPrivateFieldLooseBase(this, _fontInspectorEnabled)[_fontInspectorEnabled] && style.fontSubstitution || style.fontFamily;\n  fontFamily = _TextLayer.fontFamilyMap.get(fontFamily) || fontFamily;\n  const fontHeight = Math.hypot(tx[2], tx[3]);\n  const fontAscent = fontHeight * _classPrivateFieldLooseBase(_TextLayer, _getAscent)[_getAscent](fontFamily, _classPrivateFieldLooseBase(this, _lang)[_lang]);\n  let left, top;\n  if (angle === 0) {\n    left = tx[4];\n    top = tx[5] - fontAscent;\n  } else {\n    left = tx[4] + fontAscent * Math.sin(angle);\n    top = tx[5] - fontAscent * Math.cos(angle);\n  }\n  const scaleFactorStr = \"calc(var(--scale-factor)*\";\n  const divStyle = textDiv.style;\n  if (_classPrivateFieldLooseBase(this, _container2)[_container2] === _classPrivateFieldLooseBase(this, _rootContainer)[_rootContainer]) {\n    divStyle.left = `${(100 * left / _classPrivateFieldLooseBase(this, _pageWidth2)[_pageWidth2]).toFixed(2)}%`;\n    divStyle.top = `${(100 * top / _classPrivateFieldLooseBase(this, _pageHeight2)[_pageHeight2]).toFixed(2)}%`;\n  } else {\n    divStyle.left = `${scaleFactorStr}${left.toFixed(2)}px)`;\n    divStyle.top = `${scaleFactorStr}${top.toFixed(2)}px)`;\n  }\n  divStyle.fontSize = `${scaleFactorStr}${(_classPrivateFieldLooseBase(_TextLayer, _minFontSize)[_minFontSize] * fontHeight).toFixed(2)}px)`;\n  divStyle.fontFamily = fontFamily;\n  textDivProperties.fontSize = fontHeight;\n  textDiv.setAttribute(\"role\", \"presentation\");\n  textDiv.textContent = geom.str;\n  textDiv.dir = geom.dir;\n  if (_classPrivateFieldLooseBase(this, _fontInspectorEnabled)[_fontInspectorEnabled]) {\n    textDiv.dataset.fontName = style.fontSubstitutionLoadedName || geom.fontName;\n  }\n  if (angle !== 0) {\n    textDivProperties.angle = angle * (180 / Math.PI);\n  }\n  let shouldScaleText = false;\n  if (geom.str.length > 1) {\n    shouldScaleText = true;\n  } else if (geom.str !== \" \" && geom.transform[0] !== geom.transform[3]) {\n    const absScaleX = Math.abs(geom.transform[0]),\n      absScaleY = Math.abs(geom.transform[3]);\n    if (absScaleX !== absScaleY && Math.max(absScaleX, absScaleY) / Math.min(absScaleX, absScaleY) > 1.5) {\n      shouldScaleText = true;\n    }\n  }\n  if (shouldScaleText) {\n    textDivProperties.canvasWidth = style.vertical ? geom.height : geom.width;\n  }\n  _classPrivateFieldLooseBase(this, _textDivProperties)[_textDivProperties].set(textDiv, textDivProperties);\n  _classPrivateFieldLooseBase(this, _layoutTextParams)[_layoutTextParams].div = textDiv;\n  _classPrivateFieldLooseBase(this, _layoutTextParams)[_layoutTextParams].properties = textDivProperties;\n  _classPrivateFieldLooseBase(this, _layout)[_layout](_classPrivateFieldLooseBase(this, _layoutTextParams)[_layoutTextParams]);\n  if (textDivProperties.hasText) {\n    _classPrivateFieldLooseBase(this, _container2)[_container2].append(textDiv);\n  }\n  if (textDivProperties.hasEOL) {\n    const br = document.createElement(\"br\");\n    br.setAttribute(\"role\", \"presentation\");\n    _classPrivateFieldLooseBase(this, _container2)[_container2].append(br);\n  }\n}\nfunction _layout2(params) {\n  const div = params.div,\n    properties = params.properties,\n    ctx = params.ctx;\n  const style = div.style;\n  let transform = \"\";\n  if (_classPrivateFieldLooseBase(_TextLayer, _minFontSize)[_minFontSize] > 1) {\n    transform = `scale(${1 / _classPrivateFieldLooseBase(_TextLayer, _minFontSize)[_minFontSize]})`;\n  }\n  if (properties.canvasWidth !== 0 && properties.hasText) {\n    const fontFamily = style.fontFamily;\n    const canvasWidth = properties.canvasWidth,\n      fontSize = properties.fontSize;\n    _classPrivateFieldLooseBase(_TextLayer, _ensureCtxFont)[_ensureCtxFont](ctx, fontSize * _classPrivateFieldLooseBase(this, _scale)[_scale], fontFamily);\n    const _ctx$measureText = ctx.measureText(div.textContent),\n      width = _ctx$measureText.width;\n    if (width > 0) {\n      transform = `scaleX(${canvasWidth * _classPrivateFieldLooseBase(this, _scale)[_scale] / width}) ${transform}`;\n    }\n  }\n  if (properties.angle !== 0) {\n    transform = `rotate(${properties.angle}deg) ${transform}`;\n  }\n  if (transform.length > 0) {\n    style.transform = transform;\n  }\n}\nfunction _getCtx2() {\n  let lang = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let ctx = _classPrivateFieldLooseBase(this, _canvasContexts)[_canvasContexts].get(lang || (lang = \"\"));\n  if (!ctx) {\n    const canvas = document.createElement(\"canvas\");\n    canvas.className = \"hiddenCanvasElement\";\n    canvas.lang = lang;\n    document.body.append(canvas);\n    ctx = canvas.getContext(\"2d\", {\n      alpha: false,\n      willReadFrequently: true\n    });\n    _classPrivateFieldLooseBase(this, _canvasContexts)[_canvasContexts].set(lang, ctx);\n    _classPrivateFieldLooseBase(this, _canvasCtxFonts)[_canvasCtxFonts].set(ctx, {\n      size: 0,\n      family: \"\"\n    });\n  }\n  return ctx;\n}\nfunction _ensureCtxFont2(ctx, size, family) {\n  const cached = _classPrivateFieldLooseBase(this, _canvasCtxFonts)[_canvasCtxFonts].get(ctx);\n  if (size === cached.size && family === cached.family) {\n    return;\n  }\n  ctx.font = `${size}px ${family}`;\n  cached.size = size;\n  cached.family = family;\n}\nfunction _ensureMinFontSizeComputed2() {\n  if (_classPrivateFieldLooseBase(this, _minFontSize)[_minFontSize] !== null) {\n    return;\n  }\n  const div = document.createElement(\"div\");\n  div.style.opacity = 0;\n  div.style.lineHeight = 1;\n  div.style.fontSize = \"1px\";\n  div.style.position = \"absolute\";\n  div.textContent = \"X\";\n  document.body.append(div);\n  _classPrivateFieldLooseBase(this, _minFontSize)[_minFontSize] = div.getBoundingClientRect().height;\n  div.remove();\n}\nfunction _getAscent2(fontFamily, lang) {\n  const cachedAscent = _classPrivateFieldLooseBase(this, _ascentCache)[_ascentCache].get(fontFamily);\n  if (cachedAscent) {\n    return cachedAscent;\n  }\n  const ctx = _classPrivateFieldLooseBase(this, _getCtx)[_getCtx](lang);\n  ctx.canvas.width = ctx.canvas.height = DEFAULT_FONT_SIZE;\n  _classPrivateFieldLooseBase(this, _ensureCtxFont)[_ensureCtxFont](ctx, DEFAULT_FONT_SIZE, fontFamily);\n  const metrics = ctx.measureText(\"\");\n  let ascent = metrics.fontBoundingBoxAscent;\n  let descent = Math.abs(metrics.fontBoundingBoxDescent);\n  if (ascent) {\n    const ratio = ascent / (ascent + descent);\n    _classPrivateFieldLooseBase(this, _ascentCache)[_ascentCache].set(fontFamily, ratio);\n    ctx.canvas.width = ctx.canvas.height = 0;\n    return ratio;\n  }\n  ctx.strokeStyle = \"red\";\n  ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\n  ctx.strokeText(\"g\", 0, 0);\n  let pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;\n  descent = 0;\n  for (let i = pixels.length - 1 - 3; i >= 0; i -= 4) {\n    if (pixels[i] > 0) {\n      descent = Math.ceil(i / 4 / DEFAULT_FONT_SIZE);\n      break;\n    }\n  }\n  ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\n  ctx.strokeText(\"A\", 0, DEFAULT_FONT_SIZE);\n  pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;\n  ascent = 0;\n  for (let i = 0, ii = pixels.length; i < ii; i += 4) {\n    if (pixels[i] > 0) {\n      ascent = DEFAULT_FONT_SIZE - Math.floor(i / 4 / DEFAULT_FONT_SIZE);\n      break;\n    }\n  }\n  ctx.canvas.width = ctx.canvas.height = 0;\n  const ratio = ascent ? ascent / (ascent + descent) : DEFAULT_FONT_ASCENT;\n  _classPrivateFieldLooseBase(this, _ascentCache)[_ascentCache].set(fontFamily, ratio);\n  return ratio;\n}\nObject.defineProperty(TextLayer, _getAscent, {\n  value: _getAscent2\n});\nObject.defineProperty(TextLayer, _ensureMinFontSizeComputed, {\n  value: _ensureMinFontSizeComputed2\n});\nObject.defineProperty(TextLayer, _ensureCtxFont, {\n  value: _ensureCtxFont2\n});\nObject.defineProperty(TextLayer, _getCtx, {\n  value: _getCtx2\n});\nObject.defineProperty(TextLayer, _ascentCache, {\n  writable: true,\n  value: new Map()\n});\nObject.defineProperty(TextLayer, _canvasContexts, {\n  writable: true,\n  value: new Map()\n});\nObject.defineProperty(TextLayer, _canvasCtxFonts, {\n  writable: true,\n  value: new WeakMap()\n});\nObject.defineProperty(TextLayer, _minFontSize, {\n  writable: true,\n  value: null\n});\nObject.defineProperty(TextLayer, _pendingTextLayers, {\n  writable: true,\n  value: new Set()\n});\n; // ./src/display/xfa_text.js\nclass XfaText {\n  static textContent(xfa) {\n    const items = [];\n    const output = {\n      items,\n      styles: Object.create(null)\n    };\n    function walk(node) {\n      var _node$attributes;\n      if (!node) {\n        return;\n      }\n      let str = null;\n      const name = node.name;\n      if (name === \"#text\") {\n        str = node.value;\n      } else if (!XfaText.shouldBuildText(name)) {\n        return;\n      } else if (node !== null && node !== void 0 && (_node$attributes = node.attributes) !== null && _node$attributes !== void 0 && _node$attributes.textContent) {\n        str = node.attributes.textContent;\n      } else if (node.value) {\n        str = node.value;\n      }\n      if (str !== null) {\n        items.push({\n          str\n        });\n      }\n      if (!node.children) {\n        return;\n      }\n      for (const child of node.children) {\n        walk(child);\n      }\n    }\n    walk(xfa);\n    return output;\n  }\n  static shouldBuildText(name) {\n    return !(name === \"textarea\" || name === \"input\" || name === \"option\" || name === \"select\");\n  }\n}\n; // ./src/display/api.js\n\nconst DEFAULT_RANGE_CHUNK_SIZE = 65536;\nconst RENDERING_CANCELLED_TIMEOUT = 100;\nconst DELAYED_CLEANUP_TIMEOUT = 5000;\nconst DefaultCanvasFactory = isNodeJS ? NodeCanvasFactory : DOMCanvasFactory;\nconst DefaultCMapReaderFactory = isNodeJS ? NodeCMapReaderFactory : DOMCMapReaderFactory;\nconst DefaultFilterFactory = isNodeJS ? NodeFilterFactory : DOMFilterFactory;\nconst DefaultStandardFontDataFactory = isNodeJS ? NodeStandardFontDataFactory : DOMStandardFontDataFactory;\nfunction getDocument() {\n  var _src$password, _window, _src$length;\n  let src = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (typeof src === \"string\" || src instanceof URL) {\n    src = {\n      url: src\n    };\n  } else if (src instanceof ArrayBuffer || ArrayBuffer.isView(src)) {\n    src = {\n      data: src\n    };\n  }\n  const task = new PDFDocumentLoadingTask();\n  const docId = task.docId;\n  const url = src.url ? getUrlProp(src.url) : null;\n  const data = src.data ? getDataProp(src.data) : null;\n  const httpHeaders = src.httpHeaders || null;\n  const withCredentials = src.withCredentials === true;\n  const password = (_src$password = src.password) !== null && _src$password !== void 0 ? _src$password : null;\n  const rangeTransport = src.range instanceof PDFDataRangeTransport ? src.range : null;\n  const rangeChunkSize = Number.isInteger(src.rangeChunkSize) && src.rangeChunkSize > 0 ? src.rangeChunkSize : DEFAULT_RANGE_CHUNK_SIZE;\n  let worker = src.worker instanceof PDFWorker ? src.worker : null;\n  const verbosity = src.verbosity;\n  const docBaseUrl = typeof src.docBaseUrl === \"string\" && !isDataScheme(src.docBaseUrl) ? src.docBaseUrl : null;\n  const cMapUrl = typeof src.cMapUrl === \"string\" ? src.cMapUrl : null;\n  const cMapPacked = src.cMapPacked !== false;\n  const CMapReaderFactory = src.CMapReaderFactory || DefaultCMapReaderFactory;\n  const standardFontDataUrl = typeof src.standardFontDataUrl === \"string\" ? src.standardFontDataUrl : null;\n  const StandardFontDataFactory = src.StandardFontDataFactory || DefaultStandardFontDataFactory;\n  const ignoreErrors = src.stopAtErrors !== true;\n  const maxImageSize = Number.isInteger(src.maxImageSize) && src.maxImageSize > -1 ? src.maxImageSize : -1;\n  const isEvalSupported = src.isEvalSupported !== false;\n  const isOffscreenCanvasSupported = typeof src.isOffscreenCanvasSupported === \"boolean\" ? src.isOffscreenCanvasSupported : !isNodeJS;\n  const isChrome = typeof src.isChrome === \"boolean\" ? src.isChrome : !util_FeatureTest.platform.isFirefox && typeof window !== \"undefined\" && !!((_window = window) !== null && _window !== void 0 && _window.chrome);\n  const canvasMaxAreaInBytes = Number.isInteger(src.canvasMaxAreaInBytes) ? src.canvasMaxAreaInBytes : -1;\n  const disableFontFace = typeof src.disableFontFace === \"boolean\" ? src.disableFontFace : isNodeJS;\n  const fontExtraProperties = src.fontExtraProperties === true;\n  const enableXfa = src.enableXfa === true;\n  const ownerDocument = src.ownerDocument || globalThis.document;\n  const disableRange = src.disableRange === true;\n  const disableStream = src.disableStream === true;\n  const disableAutoFetch = src.disableAutoFetch === true;\n  const pdfBug = src.pdfBug === true;\n  const CanvasFactory = src.CanvasFactory || DefaultCanvasFactory;\n  const FilterFactory = src.FilterFactory || DefaultFilterFactory;\n  const enableHWA = src.enableHWA === true;\n  const length = rangeTransport ? rangeTransport.length : (_src$length = src.length) !== null && _src$length !== void 0 ? _src$length : NaN;\n  const useSystemFonts = typeof src.useSystemFonts === \"boolean\" ? src.useSystemFonts : !isNodeJS && !disableFontFace;\n  const useWorkerFetch = typeof src.useWorkerFetch === \"boolean\" ? src.useWorkerFetch : CMapReaderFactory === DOMCMapReaderFactory && StandardFontDataFactory === DOMStandardFontDataFactory && cMapUrl && standardFontDataUrl && isValidFetchUrl(cMapUrl, document.baseURI) && isValidFetchUrl(standardFontDataUrl, document.baseURI);\n  if (src.canvasFactory) {\n    deprecated(\"`canvasFactory`-instance option, please use `CanvasFactory` instead.\");\n  }\n  if (src.filterFactory) {\n    deprecated(\"`filterFactory`-instance option, please use `FilterFactory` instead.\");\n  }\n  const styleElement = null;\n  setVerbosityLevel(verbosity);\n  const transportFactory = {\n    canvasFactory: new CanvasFactory({\n      ownerDocument,\n      enableHWA\n    }),\n    filterFactory: new FilterFactory({\n      docId,\n      ownerDocument\n    }),\n    cMapReaderFactory: useWorkerFetch ? null : new CMapReaderFactory({\n      baseUrl: cMapUrl,\n      isCompressed: cMapPacked\n    }),\n    standardFontDataFactory: useWorkerFetch ? null : new StandardFontDataFactory({\n      baseUrl: standardFontDataUrl\n    })\n  };\n  if (!worker) {\n    const workerParams = {\n      verbosity,\n      port: GlobalWorkerOptions.workerPort\n    };\n    worker = workerParams.port ? PDFWorker.fromPort(workerParams) : new PDFWorker(workerParams);\n    task._worker = worker;\n  }\n  const docParams = {\n    docId,\n    apiVersion: \"4.8.69\",\n    data,\n    password,\n    disableAutoFetch,\n    rangeChunkSize,\n    length,\n    docBaseUrl,\n    enableXfa,\n    evaluatorOptions: {\n      maxImageSize,\n      disableFontFace,\n      ignoreErrors,\n      isEvalSupported,\n      isOffscreenCanvasSupported,\n      isChrome,\n      canvasMaxAreaInBytes,\n      fontExtraProperties,\n      useSystemFonts,\n      cMapUrl: useWorkerFetch ? cMapUrl : null,\n      standardFontDataUrl: useWorkerFetch ? standardFontDataUrl : null\n    }\n  };\n  const transportParams = {\n    disableFontFace,\n    fontExtraProperties,\n    ownerDocument,\n    pdfBug,\n    styleElement,\n    loadingParams: {\n      disableAutoFetch,\n      enableXfa\n    }\n  };\n  worker.promise.then(function () {\n    if (task.destroyed) {\n      throw new Error(\"Loading aborted\");\n    }\n    if (worker.destroyed) {\n      throw new Error(\"Worker was destroyed\");\n    }\n    const workerIdPromise = worker.messageHandler.sendWithPromise(\"GetDocRequest\", docParams, data ? [data.buffer] : null);\n    let networkStream;\n    if (rangeTransport) {\n      networkStream = new PDFDataTransportStream(rangeTransport, {\n        disableRange,\n        disableStream\n      });\n    } else if (!data) {\n      if (!url) {\n        throw new Error(\"getDocument - no `url` parameter provided.\");\n      }\n      let NetworkStream;\n      if (isNodeJS) {\n        const isFetchSupported = typeof fetch !== \"undefined\" && typeof Response !== \"undefined\" && \"body\" in Response.prototype;\n        NetworkStream = isFetchSupported && isValidFetchUrl(url) ? PDFFetchStream : PDFNodeStream;\n      } else {\n        NetworkStream = isValidFetchUrl(url) ? PDFFetchStream : PDFNetworkStream;\n      }\n      networkStream = new NetworkStream({\n        url,\n        length,\n        httpHeaders,\n        withCredentials,\n        rangeChunkSize,\n        disableRange,\n        disableStream\n      });\n    }\n    return workerIdPromise.then(workerId => {\n      if (task.destroyed) {\n        throw new Error(\"Loading aborted\");\n      }\n      if (worker.destroyed) {\n        throw new Error(\"Worker was destroyed\");\n      }\n      const messageHandler = new MessageHandler(docId, workerId, worker.port);\n      const transport = new WorkerTransport(messageHandler, task, networkStream, transportParams, transportFactory);\n      task._transport = transport;\n      messageHandler.send(\"Ready\", null);\n    });\n  }).catch(task._capability.reject);\n  return task;\n}\nfunction getUrlProp(val) {\n  if (val instanceof URL) {\n    return val.href;\n  }\n  try {\n    return new URL(val, window.location).href;\n  } catch {\n    if (isNodeJS && typeof val === \"string\") {\n      return val;\n    }\n  }\n  throw new Error(\"Invalid PDF url data: \" + \"either string or URL-object is expected in the url property.\");\n}\nfunction getDataProp(val) {\n  if (isNodeJS && typeof Buffer !== \"undefined\" && val instanceof Buffer) {\n    throw new Error(\"Please provide binary data as `Uint8Array`, rather than `Buffer`.\");\n  }\n  if (val instanceof Uint8Array && val.byteLength === val.buffer.byteLength) {\n    return val;\n  }\n  if (typeof val === \"string\") {\n    return stringToBytes(val);\n  }\n  if (val instanceof ArrayBuffer || ArrayBuffer.isView(val) || typeof val === \"object\" && !isNaN(val === null || val === void 0 ? void 0 : val.length)) {\n    return new Uint8Array(val);\n  }\n  throw new Error(\"Invalid PDF binary data: either TypedArray, \" + \"string, or array-like object is expected in the data property.\");\n}\nfunction isRefProxy(ref) {\n  return typeof ref === \"object\" && Number.isInteger(ref === null || ref === void 0 ? void 0 : ref.num) && ref.num >= 0 && Number.isInteger(ref === null || ref === void 0 ? void 0 : ref.gen) && ref.gen >= 0;\n}\nvar _docId2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"docId\");\nclass PDFDocumentLoadingTask {\n  constructor() {\n    this._capability = Promise.withResolvers();\n    this._transport = null;\n    this._worker = null;\n    this.docId = `d${_classPrivateFieldLooseBase(PDFDocumentLoadingTask, _docId2)[_docId2]++}`;\n    this.destroyed = false;\n    this.onPassword = null;\n    this.onProgress = null;\n  }\n  get promise() {\n    return this._capability.promise;\n  }\n  async destroy() {\n    this.destroyed = true;\n    try {\n      var _this$_worker, _this$_transport;\n      if ((_this$_worker = this._worker) !== null && _this$_worker !== void 0 && _this$_worker.port) {\n        this._worker._pendingDestroy = true;\n      }\n      await ((_this$_transport = this._transport) === null || _this$_transport === void 0 ? void 0 : _this$_transport.destroy());\n    } catch (ex) {\n      var _this$_worker2;\n      if ((_this$_worker2 = this._worker) !== null && _this$_worker2 !== void 0 && _this$_worker2.port) {\n        delete this._worker._pendingDestroy;\n      }\n      throw ex;\n    }\n    this._transport = null;\n    if (this._worker) {\n      this._worker.destroy();\n      this._worker = null;\n    }\n  }\n}\nObject.defineProperty(PDFDocumentLoadingTask, _docId2, {\n  writable: true,\n  value: 0\n});\nclass PDFDataRangeTransport {\n  constructor(length, initialData) {\n    let progressiveDone = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let contentDispositionFilename = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    this.length = length;\n    this.initialData = initialData;\n    this.progressiveDone = progressiveDone;\n    this.contentDispositionFilename = contentDispositionFilename;\n    this._rangeListeners = [];\n    this._progressListeners = [];\n    this._progressiveReadListeners = [];\n    this._progressiveDoneListeners = [];\n    this._readyCapability = Promise.withResolvers();\n  }\n  addRangeListener(listener) {\n    this._rangeListeners.push(listener);\n  }\n  addProgressListener(listener) {\n    this._progressListeners.push(listener);\n  }\n  addProgressiveReadListener(listener) {\n    this._progressiveReadListeners.push(listener);\n  }\n  addProgressiveDoneListener(listener) {\n    this._progressiveDoneListeners.push(listener);\n  }\n  onDataRange(begin, chunk) {\n    for (const listener of this._rangeListeners) {\n      listener(begin, chunk);\n    }\n  }\n  onDataProgress(loaded, total) {\n    this._readyCapability.promise.then(() => {\n      for (const listener of this._progressListeners) {\n        listener(loaded, total);\n      }\n    });\n  }\n  onDataProgressiveRead(chunk) {\n    this._readyCapability.promise.then(() => {\n      for (const listener of this._progressiveReadListeners) {\n        listener(chunk);\n      }\n    });\n  }\n  onDataProgressiveDone() {\n    this._readyCapability.promise.then(() => {\n      for (const listener of this._progressiveDoneListeners) {\n        listener();\n      }\n    });\n  }\n  transportReady() {\n    this._readyCapability.resolve();\n  }\n  requestDataRange(begin, end) {\n    unreachable(\"Abstract method PDFDataRangeTransport.requestDataRange\");\n  }\n  abort() {}\n}\nclass PDFDocumentProxy {\n  constructor(pdfInfo, transport) {\n    this._pdfInfo = pdfInfo;\n    this._transport = transport;\n  }\n  get annotationStorage() {\n    return this._transport.annotationStorage;\n  }\n  get canvasFactory() {\n    return this._transport.canvasFactory;\n  }\n  get filterFactory() {\n    return this._transport.filterFactory;\n  }\n  get numPages() {\n    return this._pdfInfo.numPages;\n  }\n  get fingerprints() {\n    return this._pdfInfo.fingerprints;\n  }\n  get isPureXfa() {\n    return shadow(this, \"isPureXfa\", !!this._transport._htmlForXfa);\n  }\n  get allXfaHtml() {\n    return this._transport._htmlForXfa;\n  }\n  getPage(pageNumber) {\n    return this._transport.getPage(pageNumber);\n  }\n  getPageIndex(ref) {\n    return this._transport.getPageIndex(ref);\n  }\n  getDestinations() {\n    return this._transport.getDestinations();\n  }\n  getDestination(id) {\n    return this._transport.getDestination(id);\n  }\n  getPageLabels() {\n    return this._transport.getPageLabels();\n  }\n  getPageLayout() {\n    return this._transport.getPageLayout();\n  }\n  getPageMode() {\n    return this._transport.getPageMode();\n  }\n  getViewerPreferences() {\n    return this._transport.getViewerPreferences();\n  }\n  getOpenAction() {\n    return this._transport.getOpenAction();\n  }\n  getAttachments() {\n    return this._transport.getAttachments();\n  }\n  getJSActions() {\n    return this._transport.getDocJSActions();\n  }\n  getOutline() {\n    return this._transport.getOutline();\n  }\n  getOptionalContentConfig() {\n    let _ref75 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref75$intent = _ref75.intent,\n      intent = _ref75$intent === void 0 ? \"display\" : _ref75$intent;\n    const _this$_transport$getR = this._transport.getRenderingIntent(intent),\n      renderingIntent = _this$_transport$getR.renderingIntent;\n    return this._transport.getOptionalContentConfig(renderingIntent);\n  }\n  getPermissions() {\n    return this._transport.getPermissions();\n  }\n  getMetadata() {\n    return this._transport.getMetadata();\n  }\n  getMarkInfo() {\n    return this._transport.getMarkInfo();\n  }\n  getData() {\n    return this._transport.getData();\n  }\n  saveDocument() {\n    return this._transport.saveDocument();\n  }\n  getDownloadInfo() {\n    return this._transport.downloadInfoCapability.promise;\n  }\n  cleanup() {\n    let keepLoadedFonts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return this._transport.startCleanup(keepLoadedFonts || this.isPureXfa);\n  }\n  destroy() {\n    return this.loadingTask.destroy();\n  }\n  cachedPageNumber(ref) {\n    return this._transport.cachedPageNumber(ref);\n  }\n  get loadingParams() {\n    return this._transport.loadingParams;\n  }\n  get loadingTask() {\n    return this._transport.loadingTask;\n  }\n  getFieldObjects() {\n    return this._transport.getFieldObjects();\n  }\n  hasJSActions() {\n    return this._transport.hasJSActions();\n  }\n  getCalculationOrderIds() {\n    return this._transport.getCalculationOrderIds();\n  }\n}\nvar _delayedCleanupTimeout = /*#__PURE__*/_classPrivateFieldLooseKey(\"delayedCleanupTimeout\");\nvar _pendingCleanup = /*#__PURE__*/_classPrivateFieldLooseKey(\"pendingCleanup\");\nvar _tryCleanup = /*#__PURE__*/_classPrivateFieldLooseKey(\"tryCleanup\");\nvar _abortDelayedCleanup = /*#__PURE__*/_classPrivateFieldLooseKey(\"abortDelayedCleanup\");\nclass PDFPageProxy {\n  constructor(pageIndex, pageInfo, transport) {\n    let pdfBug = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    Object.defineProperty(this, _abortDelayedCleanup, {\n      value: _abortDelayedCleanup2\n    });\n    Object.defineProperty(this, _tryCleanup, {\n      value: _tryCleanup2\n    });\n    Object.defineProperty(this, _delayedCleanupTimeout, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _pendingCleanup, {\n      writable: true,\n      value: false\n    });\n    this._pageIndex = pageIndex;\n    this._pageInfo = pageInfo;\n    this._transport = transport;\n    this._stats = pdfBug ? new StatTimer() : null;\n    this._pdfBug = pdfBug;\n    this.commonObjs = transport.commonObjs;\n    this.objs = new PDFObjects();\n    this._maybeCleanupAfterRender = false;\n    this._intentStates = new Map();\n    this.destroyed = false;\n  }\n  get pageNumber() {\n    return this._pageIndex + 1;\n  }\n  get rotate() {\n    return this._pageInfo.rotate;\n  }\n  get ref() {\n    return this._pageInfo.ref;\n  }\n  get userUnit() {\n    return this._pageInfo.userUnit;\n  }\n  get view() {\n    return this._pageInfo.view;\n  }\n  getViewport() {\n    let _ref76 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      scale = _ref76.scale,\n      _ref76$rotation = _ref76.rotation,\n      rotation = _ref76$rotation === void 0 ? this.rotate : _ref76$rotation,\n      _ref76$offsetX = _ref76.offsetX,\n      offsetX = _ref76$offsetX === void 0 ? 0 : _ref76$offsetX,\n      _ref76$offsetY = _ref76.offsetY,\n      offsetY = _ref76$offsetY === void 0 ? 0 : _ref76$offsetY,\n      _ref76$dontFlip = _ref76.dontFlip,\n      dontFlip = _ref76$dontFlip === void 0 ? false : _ref76$dontFlip;\n    return new PageViewport({\n      viewBox: this.view,\n      scale,\n      rotation,\n      offsetX,\n      offsetY,\n      dontFlip\n    });\n  }\n  getAnnotations() {\n    let _ref77 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref77$intent = _ref77.intent,\n      intent = _ref77$intent === void 0 ? \"display\" : _ref77$intent;\n    const _this$_transport$getR2 = this._transport.getRenderingIntent(intent),\n      renderingIntent = _this$_transport$getR2.renderingIntent;\n    return this._transport.getAnnotations(this._pageIndex, renderingIntent);\n  }\n  getJSActions() {\n    return this._transport.getPageJSActions(this._pageIndex);\n  }\n  get filterFactory() {\n    return this._transport.filterFactory;\n  }\n  get isPureXfa() {\n    return shadow(this, \"isPureXfa\", !!this._transport._htmlForXfa);\n  }\n  async getXfa() {\n    var _this$_transport$_htm;\n    return ((_this$_transport$_htm = this._transport._htmlForXfa) === null || _this$_transport$_htm === void 0 ? void 0 : _this$_transport$_htm.children[this._pageIndex]) || null;\n  }\n  render(_ref78) {\n    var _this$_stats, _intentState;\n    let canvasContext = _ref78.canvasContext,\n      viewport = _ref78.viewport,\n      _ref78$intent = _ref78.intent,\n      intent = _ref78$intent === void 0 ? \"display\" : _ref78$intent,\n      _ref78$annotationMode = _ref78.annotationMode,\n      annotationMode = _ref78$annotationMode === void 0 ? AnnotationMode.ENABLE : _ref78$annotationMode,\n      _ref78$transform = _ref78.transform,\n      transform = _ref78$transform === void 0 ? null : _ref78$transform,\n      _ref78$background = _ref78.background,\n      background = _ref78$background === void 0 ? null : _ref78$background,\n      _ref78$optionalConten = _ref78.optionalContentConfigPromise,\n      optionalContentConfigPromise = _ref78$optionalConten === void 0 ? null : _ref78$optionalConten,\n      _ref78$annotationCanv = _ref78.annotationCanvasMap,\n      annotationCanvasMap = _ref78$annotationCanv === void 0 ? null : _ref78$annotationCanv,\n      _ref78$pageColors = _ref78.pageColors,\n      pageColors = _ref78$pageColors === void 0 ? null : _ref78$pageColors,\n      _ref78$printAnnotatio = _ref78.printAnnotationStorage,\n      printAnnotationStorage = _ref78$printAnnotatio === void 0 ? null : _ref78$printAnnotatio,\n      _ref78$isEditing = _ref78.isEditing,\n      isEditing = _ref78$isEditing === void 0 ? false : _ref78$isEditing;\n    (_this$_stats = this._stats) === null || _this$_stats === void 0 ? void 0 : _this$_stats.time(\"Overall\");\n    const intentArgs = this._transport.getRenderingIntent(intent, annotationMode, printAnnotationStorage, isEditing);\n    const renderingIntent = intentArgs.renderingIntent,\n      cacheKey = intentArgs.cacheKey;\n    _classPrivateFieldLooseBase(this, _pendingCleanup)[_pendingCleanup] = false;\n    _classPrivateFieldLooseBase(this, _abortDelayedCleanup)[_abortDelayedCleanup]();\n    optionalContentConfigPromise || (optionalContentConfigPromise = this._transport.getOptionalContentConfig(renderingIntent));\n    let intentState = this._intentStates.get(cacheKey);\n    if (!intentState) {\n      intentState = Object.create(null);\n      this._intentStates.set(cacheKey, intentState);\n    }\n    if (intentState.streamReaderCancelTimeout) {\n      clearTimeout(intentState.streamReaderCancelTimeout);\n      intentState.streamReaderCancelTimeout = null;\n    }\n    const intentPrint = !!(renderingIntent & RenderingIntentFlag.PRINT);\n    if (!intentState.displayReadyCapability) {\n      var _this$_stats2;\n      intentState.displayReadyCapability = Promise.withResolvers();\n      intentState.operatorList = {\n        fnArray: [],\n        argsArray: [],\n        lastChunk: false,\n        separateAnnots: null\n      };\n      (_this$_stats2 = this._stats) === null || _this$_stats2 === void 0 ? void 0 : _this$_stats2.time(\"Page Request\");\n      this._pumpOperatorList(intentArgs);\n    }\n    const complete = error => {\n      intentState.renderTasks.delete(internalRenderTask);\n      if (this._maybeCleanupAfterRender || intentPrint) {\n        _classPrivateFieldLooseBase(this, _pendingCleanup)[_pendingCleanup] = true;\n      }\n      _classPrivateFieldLooseBase(this, _tryCleanup)[_tryCleanup](!intentPrint);\n      if (error) {\n        internalRenderTask.capability.reject(error);\n        this._abortOperatorList({\n          intentState,\n          reason: error instanceof Error ? error : new Error(error)\n        });\n      } else {\n        internalRenderTask.capability.resolve();\n      }\n      if (this._stats) {\n        var _globalThis$Stats;\n        this._stats.timeEnd(\"Rendering\");\n        this._stats.timeEnd(\"Overall\");\n        if ((_globalThis$Stats = globalThis.Stats) !== null && _globalThis$Stats !== void 0 && _globalThis$Stats.enabled) {\n          globalThis.Stats.add(this.pageNumber, this._stats);\n        }\n      }\n    };\n    const internalRenderTask = new InternalRenderTask({\n      callback: complete,\n      params: {\n        canvasContext,\n        viewport,\n        transform,\n        background\n      },\n      objs: this.objs,\n      commonObjs: this.commonObjs,\n      annotationCanvasMap,\n      operatorList: intentState.operatorList,\n      pageIndex: this._pageIndex,\n      canvasFactory: this._transport.canvasFactory,\n      filterFactory: this._transport.filterFactory,\n      useRequestAnimationFrame: !intentPrint,\n      pdfBug: this._pdfBug,\n      pageColors\n    });\n    ((_intentState = intentState).renderTasks || (_intentState.renderTasks = new Set())).add(internalRenderTask);\n    const renderTask = internalRenderTask.task;\n    Promise.all([intentState.displayReadyCapability.promise, optionalContentConfigPromise]).then(_ref79 => {\n      var _this$_stats3;\n      let _ref80 = _slicedToArray(_ref79, 2),\n        transparency = _ref80[0],\n        optionalContentConfig = _ref80[1];\n      if (this.destroyed) {\n        complete();\n        return;\n      }\n      (_this$_stats3 = this._stats) === null || _this$_stats3 === void 0 ? void 0 : _this$_stats3.time(\"Rendering\");\n      if (!(optionalContentConfig.renderingIntent & renderingIntent)) {\n        throw new Error(\"Must use the same `intent`-argument when calling the `PDFPageProxy.render` \" + \"and `PDFDocumentProxy.getOptionalContentConfig` methods.\");\n      }\n      internalRenderTask.initializeGraphics({\n        transparency,\n        optionalContentConfig\n      });\n      internalRenderTask.operatorListChanged();\n    }).catch(complete);\n    return renderTask;\n  }\n  getOperatorList() {\n    let _ref81 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref81$intent = _ref81.intent,\n      intent = _ref81$intent === void 0 ? \"display\" : _ref81$intent,\n      _ref81$annotationMode = _ref81.annotationMode,\n      annotationMode = _ref81$annotationMode === void 0 ? AnnotationMode.ENABLE : _ref81$annotationMode,\n      _ref81$printAnnotatio = _ref81.printAnnotationStorage,\n      printAnnotationStorage = _ref81$printAnnotatio === void 0 ? null : _ref81$printAnnotatio,\n      _ref81$isEditing = _ref81.isEditing,\n      isEditing = _ref81$isEditing === void 0 ? false : _ref81$isEditing;\n    function operatorListChanged() {\n      if (intentState.operatorList.lastChunk) {\n        intentState.opListReadCapability.resolve(intentState.operatorList);\n        intentState.renderTasks.delete(opListTask);\n      }\n    }\n    const intentArgs = this._transport.getRenderingIntent(intent, annotationMode, printAnnotationStorage, isEditing, true);\n    let intentState = this._intentStates.get(intentArgs.cacheKey);\n    if (!intentState) {\n      intentState = Object.create(null);\n      this._intentStates.set(intentArgs.cacheKey, intentState);\n    }\n    let opListTask;\n    if (!intentState.opListReadCapability) {\n      var _intentState2, _this$_stats4;\n      opListTask = Object.create(null);\n      opListTask.operatorListChanged = operatorListChanged;\n      intentState.opListReadCapability = Promise.withResolvers();\n      ((_intentState2 = intentState).renderTasks || (_intentState2.renderTasks = new Set())).add(opListTask);\n      intentState.operatorList = {\n        fnArray: [],\n        argsArray: [],\n        lastChunk: false,\n        separateAnnots: null\n      };\n      (_this$_stats4 = this._stats) === null || _this$_stats4 === void 0 ? void 0 : _this$_stats4.time(\"Page Request\");\n      this._pumpOperatorList(intentArgs);\n    }\n    return intentState.opListReadCapability.promise;\n  }\n  streamTextContent() {\n    let _ref82 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref82$includeMarkedC = _ref82.includeMarkedContent,\n      includeMarkedContent = _ref82$includeMarkedC === void 0 ? false : _ref82$includeMarkedC,\n      _ref82$disableNormali = _ref82.disableNormalization,\n      disableNormalization = _ref82$disableNormali === void 0 ? false : _ref82$disableNormali;\n    const TEXT_CONTENT_CHUNK_SIZE = 100;\n    return this._transport.messageHandler.sendWithStream(\"GetTextContent\", {\n      pageIndex: this._pageIndex,\n      includeMarkedContent: includeMarkedContent === true,\n      disableNormalization: disableNormalization === true\n    }, {\n      highWaterMark: TEXT_CONTENT_CHUNK_SIZE,\n      size(textContent) {\n        return textContent.items.length;\n      }\n    });\n  }\n  getTextContent() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (this._transport._htmlForXfa) {\n      return this.getXfa().then(xfa => XfaText.textContent(xfa));\n    }\n    const readableStream = this.streamTextContent(params);\n    return new Promise(function (resolve, reject) {\n      function pump() {\n        reader.read().then(function (_ref83) {\n          var _textContent$lang;\n          let value = _ref83.value,\n            done = _ref83.done;\n          if (done) {\n            resolve(textContent);\n            return;\n          }\n          (_textContent$lang = textContent.lang) !== null && _textContent$lang !== void 0 ? _textContent$lang : textContent.lang = value.lang;\n          Object.assign(textContent.styles, value.styles);\n          textContent.items.push(...value.items);\n          pump();\n        }, reject);\n      }\n      const reader = readableStream.getReader();\n      const textContent = {\n        items: [],\n        styles: Object.create(null),\n        lang: null\n      };\n      pump();\n    });\n  }\n  getStructTree() {\n    return this._transport.getStructTree(this._pageIndex);\n  }\n  _destroy() {\n    this.destroyed = true;\n    const waitOn = [];\n    for (const intentState of this._intentStates.values()) {\n      this._abortOperatorList({\n        intentState,\n        reason: new Error(\"Page was destroyed.\"),\n        force: true\n      });\n      if (intentState.opListReadCapability) {\n        continue;\n      }\n      for (const internalRenderTask of intentState.renderTasks) {\n        waitOn.push(internalRenderTask.completed);\n        internalRenderTask.cancel();\n      }\n    }\n    this.objs.clear();\n    _classPrivateFieldLooseBase(this, _pendingCleanup)[_pendingCleanup] = false;\n    _classPrivateFieldLooseBase(this, _abortDelayedCleanup)[_abortDelayedCleanup]();\n    return Promise.all(waitOn);\n  }\n  cleanup() {\n    let resetStats = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    _classPrivateFieldLooseBase(this, _pendingCleanup)[_pendingCleanup] = true;\n    const success = _classPrivateFieldLooseBase(this, _tryCleanup)[_tryCleanup](false);\n    if (resetStats && success) {\n      this._stats && (this._stats = new StatTimer());\n    }\n    return success;\n  }\n  _startRenderPage(transparency, cacheKey) {\n    var _this$_stats5, _intentState$displayR;\n    const intentState = this._intentStates.get(cacheKey);\n    if (!intentState) {\n      return;\n    }\n    (_this$_stats5 = this._stats) === null || _this$_stats5 === void 0 ? void 0 : _this$_stats5.timeEnd(\"Page Request\");\n    (_intentState$displayR = intentState.displayReadyCapability) === null || _intentState$displayR === void 0 ? void 0 : _intentState$displayR.resolve(transparency);\n  }\n  _renderPageChunk(operatorListChunk, intentState) {\n    for (let i = 0, ii = operatorListChunk.length; i < ii; i++) {\n      intentState.operatorList.fnArray.push(operatorListChunk.fnArray[i]);\n      intentState.operatorList.argsArray.push(operatorListChunk.argsArray[i]);\n    }\n    intentState.operatorList.lastChunk = operatorListChunk.lastChunk;\n    intentState.operatorList.separateAnnots = operatorListChunk.separateAnnots;\n    for (const internalRenderTask of intentState.renderTasks) {\n      internalRenderTask.operatorListChanged();\n    }\n    if (operatorListChunk.lastChunk) {\n      _classPrivateFieldLooseBase(this, _tryCleanup)[_tryCleanup](true);\n    }\n  }\n  _pumpOperatorList(_ref84) {\n    let renderingIntent = _ref84.renderingIntent,\n      cacheKey = _ref84.cacheKey,\n      annotationStorageSerializable = _ref84.annotationStorageSerializable,\n      modifiedIds = _ref84.modifiedIds;\n    const map = annotationStorageSerializable.map,\n      transfer = annotationStorageSerializable.transfer;\n    const readableStream = this._transport.messageHandler.sendWithStream(\"GetOperatorList\", {\n      pageIndex: this._pageIndex,\n      intent: renderingIntent,\n      cacheKey,\n      annotationStorage: map,\n      modifiedIds\n    }, transfer);\n    const reader = readableStream.getReader();\n    const intentState = this._intentStates.get(cacheKey);\n    intentState.streamReader = reader;\n    const pump = () => {\n      reader.read().then(_ref85 => {\n        let value = _ref85.value,\n          done = _ref85.done;\n        if (done) {\n          intentState.streamReader = null;\n          return;\n        }\n        if (this._transport.destroyed) {\n          return;\n        }\n        this._renderPageChunk(value, intentState);\n        pump();\n      }, reason => {\n        intentState.streamReader = null;\n        if (this._transport.destroyed) {\n          return;\n        }\n        if (intentState.operatorList) {\n          intentState.operatorList.lastChunk = true;\n          for (const internalRenderTask of intentState.renderTasks) {\n            internalRenderTask.operatorListChanged();\n          }\n          _classPrivateFieldLooseBase(this, _tryCleanup)[_tryCleanup](true);\n        }\n        if (intentState.displayReadyCapability) {\n          intentState.displayReadyCapability.reject(reason);\n        } else if (intentState.opListReadCapability) {\n          intentState.opListReadCapability.reject(reason);\n        } else {\n          throw reason;\n        }\n      });\n    };\n    pump();\n  }\n  _abortOperatorList(_ref86) {\n    let intentState = _ref86.intentState,\n      reason = _ref86.reason,\n      _ref86$force = _ref86.force,\n      force = _ref86$force === void 0 ? false : _ref86$force;\n    if (!intentState.streamReader) {\n      return;\n    }\n    if (intentState.streamReaderCancelTimeout) {\n      clearTimeout(intentState.streamReaderCancelTimeout);\n      intentState.streamReaderCancelTimeout = null;\n    }\n    if (!force) {\n      if (intentState.renderTasks.size > 0) {\n        return;\n      }\n      if (reason instanceof RenderingCancelledException) {\n        let delay = RENDERING_CANCELLED_TIMEOUT;\n        if (reason.extraDelay > 0 && reason.extraDelay < 1000) {\n          delay += reason.extraDelay;\n        }\n        intentState.streamReaderCancelTimeout = setTimeout(() => {\n          intentState.streamReaderCancelTimeout = null;\n          this._abortOperatorList({\n            intentState,\n            reason,\n            force: true\n          });\n        }, delay);\n        return;\n      }\n    }\n    intentState.streamReader.cancel(new AbortException(reason.message)).catch(() => {});\n    intentState.streamReader = null;\n    if (this._transport.destroyed) {\n      return;\n    }\n    for (const _ref87 of this._intentStates) {\n      var _ref88 = _slicedToArray(_ref87, 2);\n      const curCacheKey = _ref88[0];\n      const curIntentState = _ref88[1];\n      if (curIntentState === intentState) {\n        this._intentStates.delete(curCacheKey);\n        break;\n      }\n    }\n    this.cleanup();\n  }\n  get stats() {\n    return this._stats;\n  }\n}\nfunction _tryCleanup2() {\n  let delayed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  _classPrivateFieldLooseBase(this, _abortDelayedCleanup)[_abortDelayedCleanup]();\n  if (!_classPrivateFieldLooseBase(this, _pendingCleanup)[_pendingCleanup] || this.destroyed) {\n    return false;\n  }\n  if (delayed) {\n    _classPrivateFieldLooseBase(this, _delayedCleanupTimeout)[_delayedCleanupTimeout] = setTimeout(() => {\n      _classPrivateFieldLooseBase(this, _delayedCleanupTimeout)[_delayedCleanupTimeout] = null;\n      _classPrivateFieldLooseBase(this, _tryCleanup)[_tryCleanup](false);\n    }, DELAYED_CLEANUP_TIMEOUT);\n    return false;\n  }\n  for (const _ref164 of this._intentStates.values()) {\n    const renderTasks = _ref164.renderTasks;\n    const operatorList = _ref164.operatorList;\n    if (renderTasks.size > 0 || !operatorList.lastChunk) {\n      return false;\n    }\n  }\n  this._intentStates.clear();\n  this.objs.clear();\n  _classPrivateFieldLooseBase(this, _pendingCleanup)[_pendingCleanup] = false;\n  return true;\n}\nfunction _abortDelayedCleanup2() {\n  if (_classPrivateFieldLooseBase(this, _delayedCleanupTimeout)[_delayedCleanupTimeout]) {\n    clearTimeout(_classPrivateFieldLooseBase(this, _delayedCleanupTimeout)[_delayedCleanupTimeout]);\n    _classPrivateFieldLooseBase(this, _delayedCleanupTimeout)[_delayedCleanupTimeout] = null;\n  }\n}\nvar _listeners = /*#__PURE__*/_classPrivateFieldLooseKey(\"listeners\");\nvar _deferred = /*#__PURE__*/_classPrivateFieldLooseKey(\"deferred\");\nclass LoopbackPort {\n  constructor() {\n    Object.defineProperty(this, _listeners, {\n      writable: true,\n      value: new Map()\n    });\n    Object.defineProperty(this, _deferred, {\n      writable: true,\n      value: Promise.resolve()\n    });\n  }\n  postMessage(obj, transfer) {\n    const event = {\n      data: structuredClone(obj, transfer ? {\n        transfer\n      } : null)\n    };\n    _classPrivateFieldLooseBase(this, _deferred)[_deferred].then(() => {\n      for (const _ref89 of _classPrivateFieldLooseBase(this, _listeners)[_listeners]) {\n        var _ref90 = _slicedToArray(_ref89, 1);\n        const listener = _ref90[0];\n        listener.call(this, event);\n      }\n    });\n  }\n  addEventListener(name, listener) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let rmAbort = null;\n    if ((options === null || options === void 0 ? void 0 : options.signal) instanceof AbortSignal) {\n      const signal = options.signal;\n      if (signal.aborted) {\n        warn(\"LoopbackPort - cannot use an `aborted` signal.\");\n        return;\n      }\n      const onAbort = () => this.removeEventListener(name, listener);\n      rmAbort = () => signal.removeEventListener(\"abort\", onAbort);\n      signal.addEventListener(\"abort\", onAbort);\n    }\n    _classPrivateFieldLooseBase(this, _listeners)[_listeners].set(listener, rmAbort);\n  }\n  removeEventListener(name, listener) {\n    const rmAbort = _classPrivateFieldLooseBase(this, _listeners)[_listeners].get(listener);\n    rmAbort === null || rmAbort === void 0 ? void 0 : rmAbort();\n    _classPrivateFieldLooseBase(this, _listeners)[_listeners].delete(listener);\n  }\n  terminate() {\n    for (const _ref91 of _classPrivateFieldLooseBase(this, _listeners)[_listeners]) {\n      var _ref92 = _slicedToArray(_ref91, 2);\n      const rmAbort = _ref92[1];\n      rmAbort === null || rmAbort === void 0 ? void 0 : rmAbort();\n    }\n    _classPrivateFieldLooseBase(this, _listeners)[_listeners].clear();\n  }\n}\nvar _fakeWorkerId = /*#__PURE__*/_classPrivateFieldLooseKey(\"fakeWorkerId\");\nvar _isWorkerDisabled = /*#__PURE__*/_classPrivateFieldLooseKey(\"isWorkerDisabled\");\nvar _workerPorts = /*#__PURE__*/_classPrivateFieldLooseKey(\"workerPorts\");\nvar _resolve = /*#__PURE__*/_classPrivateFieldLooseKey(\"resolve\");\nvar _mainThreadWorkerMessageHandler = /*#__PURE__*/_classPrivateFieldLooseKey(\"mainThreadWorkerMessageHandler\");\nclass PDFWorker {\n  constructor() {\n    let _ref93 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref93$name = _ref93.name,\n      name = _ref93$name === void 0 ? null : _ref93$name,\n      _ref93$port = _ref93.port,\n      port = _ref93$port === void 0 ? null : _ref93$port,\n      _ref93$verbosity = _ref93.verbosity,\n      verbosity = _ref93$verbosity === void 0 ? getVerbosityLevel() : _ref93$verbosity;\n    Object.defineProperty(this, _resolve, {\n      value: _resolve2\n    });\n    this.name = name;\n    this.destroyed = false;\n    this.verbosity = verbosity;\n    this._readyCapability = Promise.withResolvers();\n    this._port = null;\n    this._webWorker = null;\n    this._messageHandler = null;\n    if (port) {\n      var _classPrivateFieldLoo61, _classPrivateFieldLoo62;\n      if ((_classPrivateFieldLoo61 = _classPrivateFieldLooseBase(PDFWorker, _workerPorts)[_workerPorts]) !== null && _classPrivateFieldLoo61 !== void 0 && _classPrivateFieldLoo61.has(port)) {\n        throw new Error(\"Cannot use more than one PDFWorker per port.\");\n      }\n      ((_classPrivateFieldLoo62 = _classPrivateFieldLooseBase(PDFWorker, _workerPorts))[_workerPorts] || (_classPrivateFieldLoo62[_workerPorts] = new WeakMap())).set(port, this);\n      this._initializeFromPort(port);\n      return;\n    }\n    this._initialize();\n  }\n  get promise() {\n    if (isNodeJS) {\n      return Promise.all([NodePackages.promise, this._readyCapability.promise]);\n    }\n    return this._readyCapability.promise;\n  }\n  get port() {\n    return this._port;\n  }\n  get messageHandler() {\n    return this._messageHandler;\n  }\n  _initializeFromPort(port) {\n    this._port = port;\n    this._messageHandler = new MessageHandler(\"main\", \"worker\", port);\n    this._messageHandler.on(\"ready\", function () {});\n    _classPrivateFieldLooseBase(this, _resolve)[_resolve]();\n  }\n  _initialize() {\n    if (_classPrivateFieldLooseBase(PDFWorker, _isWorkerDisabled)[_isWorkerDisabled] || _classPrivateFieldLooseBase(PDFWorker, _mainThreadWorkerMessageHandler)[_mainThreadWorkerMessageHandler]) {\n      this._setupFakeWorker();\n      return;\n    }\n    let workerSrc = PDFWorker.workerSrc;\n    try {\n      if (!PDFWorker._isSameOrigin(window.location.href, workerSrc)) {\n        workerSrc = PDFWorker._createCDNWrapper(new URL(workerSrc, window.location).href);\n      }\n      const worker = new Worker(workerSrc, {\n        type: \"module\"\n      });\n      const messageHandler = new MessageHandler(\"main\", \"worker\", worker);\n      const terminateEarly = () => {\n        ac.abort();\n        messageHandler.destroy();\n        worker.terminate();\n        if (this.destroyed) {\n          this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n        } else {\n          this._setupFakeWorker();\n        }\n      };\n      const ac = new AbortController();\n      worker.addEventListener(\"error\", () => {\n        if (!this._webWorker) {\n          terminateEarly();\n        }\n      }, {\n        signal: ac.signal\n      });\n      messageHandler.on(\"test\", data => {\n        ac.abort();\n        if (this.destroyed || !data) {\n          terminateEarly();\n          return;\n        }\n        this._messageHandler = messageHandler;\n        this._port = worker;\n        this._webWorker = worker;\n        _classPrivateFieldLooseBase(this, _resolve)[_resolve]();\n      });\n      messageHandler.on(\"ready\", data => {\n        ac.abort();\n        if (this.destroyed) {\n          terminateEarly();\n          return;\n        }\n        try {\n          sendTest();\n        } catch {\n          this._setupFakeWorker();\n        }\n      });\n      const sendTest = () => {\n        const testObj = new Uint8Array();\n        messageHandler.send(\"test\", testObj, [testObj.buffer]);\n      };\n      sendTest();\n      return;\n    } catch {\n      info(\"The worker has been disabled.\");\n    }\n    this._setupFakeWorker();\n  }\n  _setupFakeWorker() {\n    if (!_classPrivateFieldLooseBase(PDFWorker, _isWorkerDisabled)[_isWorkerDisabled]) {\n      warn(\"Setting up fake worker.\");\n      _classPrivateFieldLooseBase(PDFWorker, _isWorkerDisabled)[_isWorkerDisabled] = true;\n    }\n    PDFWorker._setupFakeWorkerGlobal.then(WorkerMessageHandler => {\n      if (this.destroyed) {\n        this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n        return;\n      }\n      const port = new LoopbackPort();\n      this._port = port;\n      const id = `fake${_classPrivateFieldLooseBase(PDFWorker, _fakeWorkerId)[_fakeWorkerId]++}`;\n      const workerHandler = new MessageHandler(id + \"_worker\", id, port);\n      WorkerMessageHandler.setup(workerHandler, port);\n      this._messageHandler = new MessageHandler(id, id + \"_worker\", port);\n      _classPrivateFieldLooseBase(this, _resolve)[_resolve]();\n    }).catch(reason => {\n      this._readyCapability.reject(new Error(`Setting up fake worker failed: \"${reason.message}\".`));\n    });\n  }\n  destroy() {\n    var _classPrivateFieldLoo63;\n    this.destroyed = true;\n    if (this._webWorker) {\n      this._webWorker.terminate();\n      this._webWorker = null;\n    }\n    (_classPrivateFieldLoo63 = _classPrivateFieldLooseBase(PDFWorker, _workerPorts)[_workerPorts]) === null || _classPrivateFieldLoo63 === void 0 ? void 0 : _classPrivateFieldLoo63.delete(this._port);\n    this._port = null;\n    if (this._messageHandler) {\n      this._messageHandler.destroy();\n      this._messageHandler = null;\n    }\n  }\n  static fromPort(params) {\n    var _classPrivateFieldLoo64;\n    if (!(params !== null && params !== void 0 && params.port)) {\n      throw new Error(\"PDFWorker.fromPort - invalid method signature.\");\n    }\n    const cachedPort = (_classPrivateFieldLoo64 = _classPrivateFieldLooseBase(this, _workerPorts)[_workerPorts]) === null || _classPrivateFieldLoo64 === void 0 ? void 0 : _classPrivateFieldLoo64.get(params.port);\n    if (cachedPort) {\n      if (cachedPort._pendingDestroy) {\n        throw new Error(\"PDFWorker.fromPort - the worker is being destroyed.\\n\" + \"Please remember to await `PDFDocumentLoadingTask.destroy()`-calls.\");\n      }\n      return cachedPort;\n    }\n    return new PDFWorker(params);\n  }\n  static get workerSrc() {\n    if (GlobalWorkerOptions.workerSrc) {\n      return GlobalWorkerOptions.workerSrc;\n    }\n    throw new Error('No \"GlobalWorkerOptions.workerSrc\" specified.');\n  }\n  static get _setupFakeWorkerGlobal() {\n    const loader = async () => {\n      if (_classPrivateFieldLooseBase(this, _mainThreadWorkerMessageHandler)[_mainThreadWorkerMessageHandler]) {\n        return _classPrivateFieldLooseBase(this, _mainThreadWorkerMessageHandler)[_mainThreadWorkerMessageHandler];\n      }\n      const worker = await import(/*webpackIgnore: true*/this.workerSrc);\n      return worker.WorkerMessageHandler;\n    };\n    return shadow(this, \"_setupFakeWorkerGlobal\", loader());\n  }\n}\n_PDFWorker = PDFWorker;\nfunction _resolve2() {\n  this._readyCapability.resolve();\n  this._messageHandler.send(\"configure\", {\n    verbosity: this.verbosity\n  });\n}\nfunction _get_mainThreadWorkerMessageHandler() {\n  try {\n    var _globalThis$pdfjsWork;\n    return ((_globalThis$pdfjsWork = globalThis.pdfjsWorker) === null || _globalThis$pdfjsWork === void 0 ? void 0 : _globalThis$pdfjsWork.WorkerMessageHandler) || null;\n  } catch {\n    return null;\n  }\n}\nObject.defineProperty(PDFWorker, _mainThreadWorkerMessageHandler, {\n  get: _get_mainThreadWorkerMessageHandler,\n  set: void 0\n});\nObject.defineProperty(PDFWorker, _fakeWorkerId, {\n  writable: true,\n  value: 0\n});\nObject.defineProperty(PDFWorker, _isWorkerDisabled, {\n  writable: true,\n  value: false\n});\nObject.defineProperty(PDFWorker, _workerPorts, {\n  writable: true,\n  value: void 0\n});\n(() => {\n  if (isNodeJS) {\n    _classPrivateFieldLooseBase(_PDFWorker, _isWorkerDisabled)[_isWorkerDisabled] = true;\n    GlobalWorkerOptions.workerSrc || (GlobalWorkerOptions.workerSrc = \"./pdf.worker.mjs\");\n  }\n  _PDFWorker._isSameOrigin = (baseUrl, otherUrl) => {\n    let base;\n    try {\n      base = new URL(baseUrl);\n      if (!base.origin || base.origin === \"null\") {\n        return false;\n      }\n    } catch {\n      return false;\n    }\n    const other = new URL(otherUrl, base);\n    return base.origin === other.origin;\n  };\n  _PDFWorker._createCDNWrapper = url => {\n    const wrapper = `await import(\"${url}\");`;\n    return URL.createObjectURL(new Blob([wrapper], {\n      type: \"text/javascript\"\n    }));\n  };\n})();\nvar _methodPromises = /*#__PURE__*/_classPrivateFieldLooseKey(\"methodPromises\");\nvar _pageCache = /*#__PURE__*/_classPrivateFieldLooseKey(\"pageCache\");\nvar _pagePromises = /*#__PURE__*/_classPrivateFieldLooseKey(\"pagePromises\");\nvar _pageRefCache = /*#__PURE__*/_classPrivateFieldLooseKey(\"pageRefCache\");\nvar _passwordCapability = /*#__PURE__*/_classPrivateFieldLooseKey(\"passwordCapability\");\nvar _cacheSimpleMethod = /*#__PURE__*/_classPrivateFieldLooseKey(\"cacheSimpleMethod\");\nclass WorkerTransport {\n  constructor(messageHandler, loadingTask, networkStream, params, factory) {\n    Object.defineProperty(this, _cacheSimpleMethod, {\n      value: _cacheSimpleMethod2\n    });\n    Object.defineProperty(this, _methodPromises, {\n      writable: true,\n      value: new Map()\n    });\n    Object.defineProperty(this, _pageCache, {\n      writable: true,\n      value: new Map()\n    });\n    Object.defineProperty(this, _pagePromises, {\n      writable: true,\n      value: new Map()\n    });\n    Object.defineProperty(this, _pageRefCache, {\n      writable: true,\n      value: new Map()\n    });\n    Object.defineProperty(this, _passwordCapability, {\n      writable: true,\n      value: null\n    });\n    this.messageHandler = messageHandler;\n    this.loadingTask = loadingTask;\n    this.commonObjs = new PDFObjects();\n    this.fontLoader = new FontLoader({\n      ownerDocument: params.ownerDocument,\n      styleElement: params.styleElement\n    });\n    this.loadingParams = params.loadingParams;\n    this._params = params;\n    this.canvasFactory = factory.canvasFactory;\n    this.filterFactory = factory.filterFactory;\n    this.cMapReaderFactory = factory.cMapReaderFactory;\n    this.standardFontDataFactory = factory.standardFontDataFactory;\n    this.destroyed = false;\n    this.destroyCapability = null;\n    this._networkStream = networkStream;\n    this._fullReader = null;\n    this._lastProgress = null;\n    this.downloadInfoCapability = Promise.withResolvers();\n    this.setupMessageHandler();\n  }\n  get annotationStorage() {\n    return shadow(this, \"annotationStorage\", new AnnotationStorage());\n  }\n  getRenderingIntent(intent) {\n    let annotationMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : AnnotationMode.ENABLE;\n    let printAnnotationStorage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let isEditing = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    let isOpList = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    let renderingIntent = RenderingIntentFlag.DISPLAY;\n    let annotationStorageSerializable = SerializableEmpty;\n    switch (intent) {\n      case \"any\":\n        renderingIntent = RenderingIntentFlag.ANY;\n        break;\n      case \"display\":\n        break;\n      case \"print\":\n        renderingIntent = RenderingIntentFlag.PRINT;\n        break;\n      default:\n        warn(`getRenderingIntent - invalid intent: ${intent}`);\n    }\n    const annotationStorage = renderingIntent & RenderingIntentFlag.PRINT && printAnnotationStorage instanceof PrintAnnotationStorage ? printAnnotationStorage : this.annotationStorage;\n    switch (annotationMode) {\n      case AnnotationMode.DISABLE:\n        renderingIntent += RenderingIntentFlag.ANNOTATIONS_DISABLE;\n        break;\n      case AnnotationMode.ENABLE:\n        break;\n      case AnnotationMode.ENABLE_FORMS:\n        renderingIntent += RenderingIntentFlag.ANNOTATIONS_FORMS;\n        break;\n      case AnnotationMode.ENABLE_STORAGE:\n        renderingIntent += RenderingIntentFlag.ANNOTATIONS_STORAGE;\n        annotationStorageSerializable = annotationStorage.serializable;\n        break;\n      default:\n        warn(`getRenderingIntent - invalid annotationMode: ${annotationMode}`);\n    }\n    if (isEditing) {\n      renderingIntent += RenderingIntentFlag.IS_EDITING;\n    }\n    if (isOpList) {\n      renderingIntent += RenderingIntentFlag.OPLIST;\n    }\n    const _annotationStorage$mo = annotationStorage.modifiedIds,\n      modifiedIds = _annotationStorage$mo.ids,\n      modifiedIdsHash = _annotationStorage$mo.hash;\n    const cacheKeyBuf = [renderingIntent, annotationStorageSerializable.hash, modifiedIdsHash];\n    return {\n      renderingIntent,\n      cacheKey: cacheKeyBuf.join(\"_\"),\n      annotationStorageSerializable,\n      modifiedIds\n    };\n  }\n  destroy() {\n    var _classPrivateFieldLoo65;\n    if (this.destroyCapability) {\n      return this.destroyCapability.promise;\n    }\n    this.destroyed = true;\n    this.destroyCapability = Promise.withResolvers();\n    (_classPrivateFieldLoo65 = _classPrivateFieldLooseBase(this, _passwordCapability)[_passwordCapability]) === null || _classPrivateFieldLoo65 === void 0 ? void 0 : _classPrivateFieldLoo65.reject(new Error(\"Worker was destroyed during onPassword callback\"));\n    const waitOn = [];\n    for (const page of _classPrivateFieldLooseBase(this, _pageCache)[_pageCache].values()) {\n      waitOn.push(page._destroy());\n    }\n    _classPrivateFieldLooseBase(this, _pageCache)[_pageCache].clear();\n    _classPrivateFieldLooseBase(this, _pagePromises)[_pagePromises].clear();\n    _classPrivateFieldLooseBase(this, _pageRefCache)[_pageRefCache].clear();\n    if (this.hasOwnProperty(\"annotationStorage\")) {\n      this.annotationStorage.resetModified();\n    }\n    const terminated = this.messageHandler.sendWithPromise(\"Terminate\", null);\n    waitOn.push(terminated);\n    Promise.all(waitOn).then(() => {\n      var _this$_networkStream;\n      this.commonObjs.clear();\n      this.fontLoader.clear();\n      _classPrivateFieldLooseBase(this, _methodPromises)[_methodPromises].clear();\n      this.filterFactory.destroy();\n      TextLayer.cleanup();\n      (_this$_networkStream = this._networkStream) === null || _this$_networkStream === void 0 ? void 0 : _this$_networkStream.cancelAllRequests(new AbortException(\"Worker was terminated.\"));\n      if (this.messageHandler) {\n        this.messageHandler.destroy();\n        this.messageHandler = null;\n      }\n      this.destroyCapability.resolve();\n    }, this.destroyCapability.reject);\n    return this.destroyCapability.promise;\n  }\n  setupMessageHandler() {\n    const messageHandler = this.messageHandler,\n      loadingTask = this.loadingTask;\n    messageHandler.on(\"GetReader\", (data, sink) => {\n      assert(this._networkStream, \"GetReader - no `IPDFStream` instance available.\");\n      this._fullReader = this._networkStream.getFullReader();\n      this._fullReader.onProgress = evt => {\n        this._lastProgress = {\n          loaded: evt.loaded,\n          total: evt.total\n        };\n      };\n      sink.onPull = () => {\n        this._fullReader.read().then(function (_ref94) {\n          let value = _ref94.value,\n            done = _ref94.done;\n          if (done) {\n            sink.close();\n            return;\n          }\n          assert(value instanceof ArrayBuffer, \"GetReader - expected an ArrayBuffer.\");\n          sink.enqueue(new Uint8Array(value), 1, [value]);\n        }).catch(reason => {\n          sink.error(reason);\n        });\n      };\n      sink.onCancel = reason => {\n        this._fullReader.cancel(reason);\n        sink.ready.catch(readyReason => {\n          if (this.destroyed) {\n            return;\n          }\n          throw readyReason;\n        });\n      };\n    });\n    messageHandler.on(\"ReaderHeadersReady\", async data => {\n      await this._fullReader.headersReady;\n      const _this$_fullReader = this._fullReader,\n        isStreamingSupported = _this$_fullReader.isStreamingSupported,\n        isRangeSupported = _this$_fullReader.isRangeSupported,\n        contentLength = _this$_fullReader.contentLength;\n      if (!isStreamingSupported || !isRangeSupported) {\n        if (this._lastProgress) {\n          var _loadingTask$onProgre;\n          (_loadingTask$onProgre = loadingTask.onProgress) === null || _loadingTask$onProgre === void 0 ? void 0 : _loadingTask$onProgre.call(loadingTask, this._lastProgress);\n        }\n        this._fullReader.onProgress = evt => {\n          var _loadingTask$onProgre2;\n          (_loadingTask$onProgre2 = loadingTask.onProgress) === null || _loadingTask$onProgre2 === void 0 ? void 0 : _loadingTask$onProgre2.call(loadingTask, {\n            loaded: evt.loaded,\n            total: evt.total\n          });\n        };\n      }\n      return {\n        isStreamingSupported,\n        isRangeSupported,\n        contentLength\n      };\n    });\n    messageHandler.on(\"GetRangeReader\", (data, sink) => {\n      assert(this._networkStream, \"GetRangeReader - no `IPDFStream` instance available.\");\n      const rangeReader = this._networkStream.getRangeReader(data.begin, data.end);\n      if (!rangeReader) {\n        sink.close();\n        return;\n      }\n      sink.onPull = () => {\n        rangeReader.read().then(function (_ref95) {\n          let value = _ref95.value,\n            done = _ref95.done;\n          if (done) {\n            sink.close();\n            return;\n          }\n          assert(value instanceof ArrayBuffer, \"GetRangeReader - expected an ArrayBuffer.\");\n          sink.enqueue(new Uint8Array(value), 1, [value]);\n        }).catch(reason => {\n          sink.error(reason);\n        });\n      };\n      sink.onCancel = reason => {\n        rangeReader.cancel(reason);\n        sink.ready.catch(readyReason => {\n          if (this.destroyed) {\n            return;\n          }\n          throw readyReason;\n        });\n      };\n    });\n    messageHandler.on(\"GetDoc\", _ref96 => {\n      let pdfInfo = _ref96.pdfInfo;\n      this._numPages = pdfInfo.numPages;\n      this._htmlForXfa = pdfInfo.htmlForXfa;\n      delete pdfInfo.htmlForXfa;\n      loadingTask._capability.resolve(new PDFDocumentProxy(pdfInfo, this));\n    });\n    messageHandler.on(\"DocException\", function (ex) {\n      let reason;\n      switch (ex.name) {\n        case \"PasswordException\":\n          reason = new PasswordException(ex.message, ex.code);\n          break;\n        case \"InvalidPDFException\":\n          reason = new InvalidPDFException(ex.message);\n          break;\n        case \"MissingPDFException\":\n          reason = new MissingPDFException(ex.message);\n          break;\n        case \"UnexpectedResponseException\":\n          reason = new UnexpectedResponseException(ex.message, ex.status);\n          break;\n        case \"UnknownErrorException\":\n          reason = new UnknownErrorException(ex.message, ex.details);\n          break;\n        default:\n          unreachable(\"DocException - expected a valid Error.\");\n      }\n      loadingTask._capability.reject(reason);\n    });\n    messageHandler.on(\"PasswordRequest\", exception => {\n      _classPrivateFieldLooseBase(this, _passwordCapability)[_passwordCapability] = Promise.withResolvers();\n      if (loadingTask.onPassword) {\n        const updatePassword = password => {\n          if (password instanceof Error) {\n            _classPrivateFieldLooseBase(this, _passwordCapability)[_passwordCapability].reject(password);\n          } else {\n            _classPrivateFieldLooseBase(this, _passwordCapability)[_passwordCapability].resolve({\n              password\n            });\n          }\n        };\n        try {\n          loadingTask.onPassword(updatePassword, exception.code);\n        } catch (ex) {\n          _classPrivateFieldLooseBase(this, _passwordCapability)[_passwordCapability].reject(ex);\n        }\n      } else {\n        _classPrivateFieldLooseBase(this, _passwordCapability)[_passwordCapability].reject(new PasswordException(exception.message, exception.code));\n      }\n      return _classPrivateFieldLooseBase(this, _passwordCapability)[_passwordCapability].promise;\n    });\n    messageHandler.on(\"DataLoaded\", data => {\n      var _loadingTask$onProgre3;\n      (_loadingTask$onProgre3 = loadingTask.onProgress) === null || _loadingTask$onProgre3 === void 0 ? void 0 : _loadingTask$onProgre3.call(loadingTask, {\n        loaded: data.length,\n        total: data.length\n      });\n      this.downloadInfoCapability.resolve(data);\n    });\n    messageHandler.on(\"StartRenderPage\", data => {\n      if (this.destroyed) {\n        return;\n      }\n      const page = _classPrivateFieldLooseBase(this, _pageCache)[_pageCache].get(data.pageIndex);\n      page._startRenderPage(data.transparency, data.cacheKey);\n    });\n    messageHandler.on(\"commonobj\", _ref97 => {\n      var _globalThis$FontInspe2;\n      let _ref98 = _slicedToArray(_ref97, 3),\n        id = _ref98[0],\n        type = _ref98[1],\n        exportedData = _ref98[2];\n      if (this.destroyed) {\n        return null;\n      }\n      if (this.commonObjs.has(id)) {\n        return null;\n      }\n      switch (type) {\n        case \"Font\":\n          const _this$_params = this._params,\n            disableFontFace = _this$_params.disableFontFace,\n            fontExtraProperties = _this$_params.fontExtraProperties,\n            pdfBug = _this$_params.pdfBug;\n          if (\"error\" in exportedData) {\n            const exportedError = exportedData.error;\n            warn(`Error during font loading: ${exportedError}`);\n            this.commonObjs.resolve(id, exportedError);\n            break;\n          }\n          const inspectFont = pdfBug && (_globalThis$FontInspe2 = globalThis.FontInspector) !== null && _globalThis$FontInspe2 !== void 0 && _globalThis$FontInspe2.enabled ? (font, url) => globalThis.FontInspector.fontAdded(font, url) : null;\n          const font = new FontFaceObject(exportedData, {\n            disableFontFace,\n            inspectFont\n          });\n          this.fontLoader.bind(font).catch(() => messageHandler.sendWithPromise(\"FontFallback\", {\n            id\n          })).finally(() => {\n            if (!fontExtraProperties && font.data) {\n              font.data = null;\n            }\n            this.commonObjs.resolve(id, font);\n          });\n          break;\n        case \"CopyLocalImage\":\n          const imageRef = exportedData.imageRef;\n          assert(imageRef, \"The imageRef must be defined.\");\n          for (const pageProxy of _classPrivateFieldLooseBase(this, _pageCache)[_pageCache].values()) {\n            for (const _ref99 of pageProxy.objs) {\n              var _ref100 = _slicedToArray(_ref99, 2);\n              const data = _ref100[1];\n              if ((data === null || data === void 0 ? void 0 : data.ref) !== imageRef) {\n                continue;\n              }\n              if (!data.dataLen) {\n                return null;\n              }\n              this.commonObjs.resolve(id, structuredClone(data));\n              return data.dataLen;\n            }\n          }\n          break;\n        case \"FontPath\":\n        case \"Image\":\n        case \"Pattern\":\n          this.commonObjs.resolve(id, exportedData);\n          break;\n        default:\n          throw new Error(`Got unknown common object type ${type}`);\n      }\n      return null;\n    });\n    messageHandler.on(\"obj\", _ref101 => {\n      let _ref102 = _slicedToArray(_ref101, 4),\n        id = _ref102[0],\n        pageIndex = _ref102[1],\n        type = _ref102[2],\n        imageData = _ref102[3];\n      if (this.destroyed) {\n        return;\n      }\n      const pageProxy = _classPrivateFieldLooseBase(this, _pageCache)[_pageCache].get(pageIndex);\n      if (pageProxy.objs.has(id)) {\n        return;\n      }\n      if (pageProxy._intentStates.size === 0) {\n        var _imageData$bitmap;\n        imageData === null || imageData === void 0 ? void 0 : (_imageData$bitmap = imageData.bitmap) === null || _imageData$bitmap === void 0 ? void 0 : _imageData$bitmap.close();\n        return;\n      }\n      switch (type) {\n        case \"Image\":\n          pageProxy.objs.resolve(id, imageData);\n          if ((imageData === null || imageData === void 0 ? void 0 : imageData.dataLen) > MAX_IMAGE_SIZE_TO_CACHE) {\n            pageProxy._maybeCleanupAfterRender = true;\n          }\n          break;\n        case \"Pattern\":\n          pageProxy.objs.resolve(id, imageData);\n          break;\n        default:\n          throw new Error(`Got unknown object type ${type}`);\n      }\n    });\n    messageHandler.on(\"DocProgress\", data => {\n      var _loadingTask$onProgre4;\n      if (this.destroyed) {\n        return;\n      }\n      (_loadingTask$onProgre4 = loadingTask.onProgress) === null || _loadingTask$onProgre4 === void 0 ? void 0 : _loadingTask$onProgre4.call(loadingTask, {\n        loaded: data.loaded,\n        total: data.total\n      });\n    });\n    messageHandler.on(\"FetchBuiltInCMap\", async data => {\n      if (this.destroyed) {\n        throw new Error(\"Worker was destroyed.\");\n      }\n      if (!this.cMapReaderFactory) {\n        throw new Error(\"CMapReaderFactory not initialized, see the `useWorkerFetch` parameter.\");\n      }\n      return this.cMapReaderFactory.fetch(data);\n    });\n    messageHandler.on(\"FetchStandardFontData\", async data => {\n      if (this.destroyed) {\n        throw new Error(\"Worker was destroyed.\");\n      }\n      if (!this.standardFontDataFactory) {\n        throw new Error(\"StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter.\");\n      }\n      return this.standardFontDataFactory.fetch(data);\n    });\n  }\n  getData() {\n    return this.messageHandler.sendWithPromise(\"GetData\", null);\n  }\n  saveDocument() {\n    var _this$_fullReader$fil, _this$_fullReader2;\n    if (this.annotationStorage.size <= 0) {\n      warn(\"saveDocument called while `annotationStorage` is empty, \" + \"please use the getData-method instead.\");\n    }\n    const _this$annotationStora = this.annotationStorage.serializable,\n      map = _this$annotationStora.map,\n      transfer = _this$annotationStora.transfer;\n    return this.messageHandler.sendWithPromise(\"SaveDocument\", {\n      isPureXfa: !!this._htmlForXfa,\n      numPages: this._numPages,\n      annotationStorage: map,\n      filename: (_this$_fullReader$fil = (_this$_fullReader2 = this._fullReader) === null || _this$_fullReader2 === void 0 ? void 0 : _this$_fullReader2.filename) !== null && _this$_fullReader$fil !== void 0 ? _this$_fullReader$fil : null\n    }, transfer).finally(() => {\n      this.annotationStorage.resetModified();\n    });\n  }\n  getPage(pageNumber) {\n    if (!Number.isInteger(pageNumber) || pageNumber <= 0 || pageNumber > this._numPages) {\n      return Promise.reject(new Error(\"Invalid page request.\"));\n    }\n    const pageIndex = pageNumber - 1,\n      cachedPromise = _classPrivateFieldLooseBase(this, _pagePromises)[_pagePromises].get(pageIndex);\n    if (cachedPromise) {\n      return cachedPromise;\n    }\n    const promise = this.messageHandler.sendWithPromise(\"GetPage\", {\n      pageIndex\n    }).then(pageInfo => {\n      if (this.destroyed) {\n        throw new Error(\"Transport destroyed\");\n      }\n      if (pageInfo.refStr) {\n        _classPrivateFieldLooseBase(this, _pageRefCache)[_pageRefCache].set(pageInfo.refStr, pageNumber);\n      }\n      const page = new PDFPageProxy(pageIndex, pageInfo, this, this._params.pdfBug);\n      _classPrivateFieldLooseBase(this, _pageCache)[_pageCache].set(pageIndex, page);\n      return page;\n    });\n    _classPrivateFieldLooseBase(this, _pagePromises)[_pagePromises].set(pageIndex, promise);\n    return promise;\n  }\n  getPageIndex(ref) {\n    if (!isRefProxy(ref)) {\n      return Promise.reject(new Error(\"Invalid pageIndex request.\"));\n    }\n    return this.messageHandler.sendWithPromise(\"GetPageIndex\", {\n      num: ref.num,\n      gen: ref.gen\n    });\n  }\n  getAnnotations(pageIndex, intent) {\n    return this.messageHandler.sendWithPromise(\"GetAnnotations\", {\n      pageIndex,\n      intent\n    });\n  }\n  getFieldObjects() {\n    return _classPrivateFieldLooseBase(this, _cacheSimpleMethod)[_cacheSimpleMethod](\"GetFieldObjects\");\n  }\n  hasJSActions() {\n    return _classPrivateFieldLooseBase(this, _cacheSimpleMethod)[_cacheSimpleMethod](\"HasJSActions\");\n  }\n  getCalculationOrderIds() {\n    return this.messageHandler.sendWithPromise(\"GetCalculationOrderIds\", null);\n  }\n  getDestinations() {\n    return this.messageHandler.sendWithPromise(\"GetDestinations\", null);\n  }\n  getDestination(id) {\n    if (typeof id !== \"string\") {\n      return Promise.reject(new Error(\"Invalid destination request.\"));\n    }\n    return this.messageHandler.sendWithPromise(\"GetDestination\", {\n      id\n    });\n  }\n  getPageLabels() {\n    return this.messageHandler.sendWithPromise(\"GetPageLabels\", null);\n  }\n  getPageLayout() {\n    return this.messageHandler.sendWithPromise(\"GetPageLayout\", null);\n  }\n  getPageMode() {\n    return this.messageHandler.sendWithPromise(\"GetPageMode\", null);\n  }\n  getViewerPreferences() {\n    return this.messageHandler.sendWithPromise(\"GetViewerPreferences\", null);\n  }\n  getOpenAction() {\n    return this.messageHandler.sendWithPromise(\"GetOpenAction\", null);\n  }\n  getAttachments() {\n    return this.messageHandler.sendWithPromise(\"GetAttachments\", null);\n  }\n  getDocJSActions() {\n    return _classPrivateFieldLooseBase(this, _cacheSimpleMethod)[_cacheSimpleMethod](\"GetDocJSActions\");\n  }\n  getPageJSActions(pageIndex) {\n    return this.messageHandler.sendWithPromise(\"GetPageJSActions\", {\n      pageIndex\n    });\n  }\n  getStructTree(pageIndex) {\n    return this.messageHandler.sendWithPromise(\"GetStructTree\", {\n      pageIndex\n    });\n  }\n  getOutline() {\n    return this.messageHandler.sendWithPromise(\"GetOutline\", null);\n  }\n  getOptionalContentConfig(renderingIntent) {\n    return _classPrivateFieldLooseBase(this, _cacheSimpleMethod)[_cacheSimpleMethod](\"GetOptionalContentConfig\").then(data => new OptionalContentConfig(data, renderingIntent));\n  }\n  getPermissions() {\n    return this.messageHandler.sendWithPromise(\"GetPermissions\", null);\n  }\n  getMetadata() {\n    const name = \"GetMetadata\",\n      cachedPromise = _classPrivateFieldLooseBase(this, _methodPromises)[_methodPromises].get(name);\n    if (cachedPromise) {\n      return cachedPromise;\n    }\n    const promise = this.messageHandler.sendWithPromise(name, null).then(results => {\n      var _this$_fullReader$fil2, _this$_fullReader3, _this$_fullReader$con, _this$_fullReader4;\n      return {\n        info: results[0],\n        metadata: results[1] ? new Metadata(results[1]) : null,\n        contentDispositionFilename: (_this$_fullReader$fil2 = (_this$_fullReader3 = this._fullReader) === null || _this$_fullReader3 === void 0 ? void 0 : _this$_fullReader3.filename) !== null && _this$_fullReader$fil2 !== void 0 ? _this$_fullReader$fil2 : null,\n        contentLength: (_this$_fullReader$con = (_this$_fullReader4 = this._fullReader) === null || _this$_fullReader4 === void 0 ? void 0 : _this$_fullReader4.contentLength) !== null && _this$_fullReader$con !== void 0 ? _this$_fullReader$con : null\n      };\n    });\n    _classPrivateFieldLooseBase(this, _methodPromises)[_methodPromises].set(name, promise);\n    return promise;\n  }\n  getMarkInfo() {\n    return this.messageHandler.sendWithPromise(\"GetMarkInfo\", null);\n  }\n  async startCleanup() {\n    let keepLoadedFonts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (this.destroyed) {\n      return;\n    }\n    await this.messageHandler.sendWithPromise(\"Cleanup\", null);\n    for (const page of _classPrivateFieldLooseBase(this, _pageCache)[_pageCache].values()) {\n      const cleanupSuccessful = page.cleanup();\n      if (!cleanupSuccessful) {\n        throw new Error(`startCleanup: Page ${page.pageNumber} is currently rendering.`);\n      }\n    }\n    this.commonObjs.clear();\n    if (!keepLoadedFonts) {\n      this.fontLoader.clear();\n    }\n    _classPrivateFieldLooseBase(this, _methodPromises)[_methodPromises].clear();\n    this.filterFactory.destroy(true);\n    TextLayer.cleanup();\n  }\n  cachedPageNumber(ref) {\n    var _classPrivateFieldLoo66;\n    if (!isRefProxy(ref)) {\n      return null;\n    }\n    const refStr = ref.gen === 0 ? `${ref.num}R` : `${ref.num}R${ref.gen}`;\n    return (_classPrivateFieldLoo66 = _classPrivateFieldLooseBase(this, _pageRefCache)[_pageRefCache].get(refStr)) !== null && _classPrivateFieldLoo66 !== void 0 ? _classPrivateFieldLoo66 : null;\n  }\n}\nfunction _cacheSimpleMethod2(name) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  const cachedPromise = _classPrivateFieldLooseBase(this, _methodPromises)[_methodPromises].get(name);\n  if (cachedPromise) {\n    return cachedPromise;\n  }\n  const promise = this.messageHandler.sendWithPromise(name, data);\n  _classPrivateFieldLooseBase(this, _methodPromises)[_methodPromises].set(name, promise);\n  return promise;\n}\nconst INITIAL_DATA = Symbol(\"INITIAL_DATA\");\nvar _objs = /*#__PURE__*/_classPrivateFieldLooseKey(\"objs\");\nvar _ensureObj = /*#__PURE__*/_classPrivateFieldLooseKey(\"ensureObj\");\nclass PDFObjects {\n  constructor() {\n    Object.defineProperty(this, _ensureObj, {\n      value: _ensureObj2\n    });\n    Object.defineProperty(this, _objs, {\n      writable: true,\n      value: Object.create(null)\n    });\n  }\n  get(objId) {\n    let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    if (callback) {\n      const obj = _classPrivateFieldLooseBase(this, _ensureObj)[_ensureObj](objId);\n      obj.promise.then(() => callback(obj.data));\n      return null;\n    }\n    const obj = _classPrivateFieldLooseBase(this, _objs)[_objs][objId];\n    if (!obj || obj.data === INITIAL_DATA) {\n      throw new Error(`Requesting object that isn't resolved yet ${objId}.`);\n    }\n    return obj.data;\n  }\n  has(objId) {\n    const obj = _classPrivateFieldLooseBase(this, _objs)[_objs][objId];\n    return !!obj && obj.data !== INITIAL_DATA;\n  }\n  resolve(objId) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const obj = _classPrivateFieldLooseBase(this, _ensureObj)[_ensureObj](objId);\n    obj.data = data;\n    obj.resolve();\n  }\n  clear() {\n    for (const objId in _classPrivateFieldLooseBase(this, _objs)[_objs]) {\n      var _data$bitmap;\n      const data = _classPrivateFieldLooseBase(this, _objs)[_objs][objId].data;\n      data === null || data === void 0 ? void 0 : (_data$bitmap = data.bitmap) === null || _data$bitmap === void 0 ? void 0 : _data$bitmap.close();\n    }\n    _classPrivateFieldLooseBase(this, _objs)[_objs] = Object.create(null);\n  }\n  [Symbol.iterator]() {\n    var _this = this;\n    return /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var objId, data;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.t0 = _regeneratorRuntime().keys(_classPrivateFieldLooseBase(_this, _objs)[_objs]);\n          case 1:\n            if ((_context.t1 = _context.t0()).done) {\n              _context.next = 10;\n              break;\n            }\n            objId = _context.t1.value;\n            data = _classPrivateFieldLooseBase(_this, _objs)[_objs][objId].data;\n            if (!(data === INITIAL_DATA)) {\n              _context.next = 6;\n              break;\n            }\n            return _context.abrupt(\"continue\", 1);\n          case 6:\n            _context.next = 8;\n            return [objId, data];\n          case 8:\n            _context.next = 1;\n            break;\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    })();\n  }\n}\nfunction _ensureObj2(objId) {\n  var _classPrivateFieldLoo144;\n  return (_classPrivateFieldLoo144 = _classPrivateFieldLooseBase(this, _objs)[_objs])[objId] || (_classPrivateFieldLoo144[objId] = _objectSpread(_objectSpread({}, Promise.withResolvers()), {}, {\n    data: INITIAL_DATA\n  }));\n}\nvar _internalRenderTask = /*#__PURE__*/_classPrivateFieldLooseKey(\"internalRenderTask\");\nclass RenderTask {\n  constructor(internalRenderTask) {\n    Object.defineProperty(this, _internalRenderTask, {\n      writable: true,\n      value: null\n    });\n    _classPrivateFieldLooseBase(this, _internalRenderTask)[_internalRenderTask] = internalRenderTask;\n    this.onContinue = null;\n  }\n  get promise() {\n    return _classPrivateFieldLooseBase(this, _internalRenderTask)[_internalRenderTask].capability.promise;\n  }\n  cancel() {\n    let extraDelay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    _classPrivateFieldLooseBase(this, _internalRenderTask)[_internalRenderTask].cancel(null, extraDelay);\n  }\n  get separateAnnots() {\n    const separateAnnots = _classPrivateFieldLooseBase(this, _internalRenderTask)[_internalRenderTask].operatorList.separateAnnots;\n    if (!separateAnnots) {\n      return false;\n    }\n    const annotationCanvasMap = _classPrivateFieldLooseBase(this, _internalRenderTask)[_internalRenderTask].annotationCanvasMap;\n    return separateAnnots.form || separateAnnots.canvas && (annotationCanvasMap === null || annotationCanvasMap === void 0 ? void 0 : annotationCanvasMap.size) > 0;\n  }\n}\nvar _rAF = /*#__PURE__*/_classPrivateFieldLooseKey(\"rAF\");\nvar _canvasInUse = /*#__PURE__*/_classPrivateFieldLooseKey(\"canvasInUse\");\nclass InternalRenderTask {\n  constructor(_ref103) {\n    let callback = _ref103.callback,\n      params = _ref103.params,\n      objs = _ref103.objs,\n      commonObjs = _ref103.commonObjs,\n      annotationCanvasMap = _ref103.annotationCanvasMap,\n      operatorList = _ref103.operatorList,\n      pageIndex = _ref103.pageIndex,\n      canvasFactory = _ref103.canvasFactory,\n      filterFactory = _ref103.filterFactory,\n      _ref103$useRequestAni = _ref103.useRequestAnimationFrame,\n      useRequestAnimationFrame = _ref103$useRequestAni === void 0 ? false : _ref103$useRequestAni,\n      _ref103$pdfBug = _ref103.pdfBug,\n      pdfBug = _ref103$pdfBug === void 0 ? false : _ref103$pdfBug,\n      _ref103$pageColors = _ref103.pageColors,\n      pageColors = _ref103$pageColors === void 0 ? null : _ref103$pageColors;\n    Object.defineProperty(this, _rAF, {\n      writable: true,\n      value: null\n    });\n    this.callback = callback;\n    this.params = params;\n    this.objs = objs;\n    this.commonObjs = commonObjs;\n    this.annotationCanvasMap = annotationCanvasMap;\n    this.operatorListIdx = null;\n    this.operatorList = operatorList;\n    this._pageIndex = pageIndex;\n    this.canvasFactory = canvasFactory;\n    this.filterFactory = filterFactory;\n    this._pdfBug = pdfBug;\n    this.pageColors = pageColors;\n    this.running = false;\n    this.graphicsReadyCallback = null;\n    this.graphicsReady = false;\n    this._useRequestAnimationFrame = useRequestAnimationFrame === true && typeof window !== \"undefined\";\n    this.cancelled = false;\n    this.capability = Promise.withResolvers();\n    this.task = new RenderTask(this);\n    this._cancelBound = this.cancel.bind(this);\n    this._continueBound = this._continue.bind(this);\n    this._scheduleNextBound = this._scheduleNext.bind(this);\n    this._nextBound = this._next.bind(this);\n    this._canvas = params.canvasContext.canvas;\n  }\n  get completed() {\n    return this.capability.promise.catch(function () {});\n  }\n  initializeGraphics(_ref104) {\n    var _globalThis$StepperMa, _this$graphicsReadyCa;\n    let _ref104$transparency = _ref104.transparency,\n      transparency = _ref104$transparency === void 0 ? false : _ref104$transparency,\n      optionalContentConfig = _ref104.optionalContentConfig;\n    if (this.cancelled) {\n      return;\n    }\n    if (this._canvas) {\n      if (_classPrivateFieldLooseBase(InternalRenderTask, _canvasInUse)[_canvasInUse].has(this._canvas)) {\n        throw new Error(\"Cannot use the same canvas during multiple render() operations. \" + \"Use different canvas or ensure previous operations were \" + \"cancelled or completed.\");\n      }\n      _classPrivateFieldLooseBase(InternalRenderTask, _canvasInUse)[_canvasInUse].add(this._canvas);\n    }\n    if (this._pdfBug && (_globalThis$StepperMa = globalThis.StepperManager) !== null && _globalThis$StepperMa !== void 0 && _globalThis$StepperMa.enabled) {\n      this.stepper = globalThis.StepperManager.create(this._pageIndex);\n      this.stepper.init(this.operatorList);\n      this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint();\n    }\n    const _this$params = this.params,\n      canvasContext = _this$params.canvasContext,\n      viewport = _this$params.viewport,\n      transform = _this$params.transform,\n      background = _this$params.background;\n    this.gfx = new CanvasGraphics(canvasContext, this.commonObjs, this.objs, this.canvasFactory, this.filterFactory, {\n      optionalContentConfig\n    }, this.annotationCanvasMap, this.pageColors);\n    this.gfx.beginDrawing({\n      transform,\n      viewport,\n      transparency,\n      background\n    });\n    this.operatorListIdx = 0;\n    this.graphicsReady = true;\n    (_this$graphicsReadyCa = this.graphicsReadyCallback) === null || _this$graphicsReadyCa === void 0 ? void 0 : _this$graphicsReadyCa.call(this);\n  }\n  cancel() {\n    var _this$gfx;\n    let error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let extraDelay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.running = false;\n    this.cancelled = true;\n    (_this$gfx = this.gfx) === null || _this$gfx === void 0 ? void 0 : _this$gfx.endDrawing();\n    if (_classPrivateFieldLooseBase(this, _rAF)[_rAF]) {\n      window.cancelAnimationFrame(_classPrivateFieldLooseBase(this, _rAF)[_rAF]);\n      _classPrivateFieldLooseBase(this, _rAF)[_rAF] = null;\n    }\n    _classPrivateFieldLooseBase(InternalRenderTask, _canvasInUse)[_canvasInUse].delete(this._canvas);\n    this.callback(error || new RenderingCancelledException(`Rendering cancelled, page ${this._pageIndex + 1}`, extraDelay));\n  }\n  operatorListChanged() {\n    var _this$stepper;\n    if (!this.graphicsReady) {\n      this.graphicsReadyCallback || (this.graphicsReadyCallback = this._continueBound);\n      return;\n    }\n    (_this$stepper = this.stepper) === null || _this$stepper === void 0 ? void 0 : _this$stepper.updateOperatorList(this.operatorList);\n    if (this.running) {\n      return;\n    }\n    this._continue();\n  }\n  _continue() {\n    this.running = true;\n    if (this.cancelled) {\n      return;\n    }\n    if (this.task.onContinue) {\n      this.task.onContinue(this._scheduleNextBound);\n    } else {\n      this._scheduleNext();\n    }\n  }\n  _scheduleNext() {\n    if (this._useRequestAnimationFrame) {\n      _classPrivateFieldLooseBase(this, _rAF)[_rAF] = window.requestAnimationFrame(() => {\n        _classPrivateFieldLooseBase(this, _rAF)[_rAF] = null;\n        this._nextBound().catch(this._cancelBound);\n      });\n    } else {\n      Promise.resolve().then(this._nextBound).catch(this._cancelBound);\n    }\n  }\n  async _next() {\n    if (this.cancelled) {\n      return;\n    }\n    this.operatorListIdx = this.gfx.executeOperatorList(this.operatorList, this.operatorListIdx, this._continueBound, this.stepper);\n    if (this.operatorListIdx === this.operatorList.argsArray.length) {\n      this.running = false;\n      if (this.operatorList.lastChunk) {\n        this.gfx.endDrawing();\n        _classPrivateFieldLooseBase(InternalRenderTask, _canvasInUse)[_canvasInUse].delete(this._canvas);\n        this.callback();\n      }\n    }\n  }\n}\nObject.defineProperty(InternalRenderTask, _canvasInUse, {\n  writable: true,\n  value: new WeakSet()\n});\nconst version = \"4.8.69\";\nconst build = \"3634dab10\";\n; // ./src/shared/scripting_utils.js\nfunction makeColorComp(n) {\n  return Math.floor(Math.max(0, Math.min(1, n)) * 255).toString(16).padStart(2, \"0\");\n}\nfunction scaleAndClamp(x) {\n  return Math.max(0, Math.min(255, 255 * x));\n}\nclass ColorConverters {\n  static CMYK_G(_ref105) {\n    let _ref106 = _slicedToArray(_ref105, 4),\n      c = _ref106[0],\n      y = _ref106[1],\n      m = _ref106[2],\n      k = _ref106[3];\n    return [\"G\", 1 - Math.min(1, 0.3 * c + 0.59 * m + 0.11 * y + k)];\n  }\n  static G_CMYK(_ref107) {\n    let _ref108 = _slicedToArray(_ref107, 1),\n      g = _ref108[0];\n    return [\"CMYK\", 0, 0, 0, 1 - g];\n  }\n  static G_RGB(_ref109) {\n    let _ref110 = _slicedToArray(_ref109, 1),\n      g = _ref110[0];\n    return [\"RGB\", g, g, g];\n  }\n  static G_rgb(_ref111) {\n    let _ref112 = _slicedToArray(_ref111, 1),\n      g = _ref112[0];\n    g = scaleAndClamp(g);\n    return [g, g, g];\n  }\n  static G_HTML(_ref113) {\n    let _ref114 = _slicedToArray(_ref113, 1),\n      g = _ref114[0];\n    const G = makeColorComp(g);\n    return `#${G}${G}${G}`;\n  }\n  static RGB_G(_ref115) {\n    let _ref116 = _slicedToArray(_ref115, 3),\n      r = _ref116[0],\n      g = _ref116[1],\n      b = _ref116[2];\n    return [\"G\", 0.3 * r + 0.59 * g + 0.11 * b];\n  }\n  static RGB_rgb(color) {\n    return color.map(scaleAndClamp);\n  }\n  static RGB_HTML(color) {\n    return `#${color.map(makeColorComp).join(\"\")}`;\n  }\n  static T_HTML() {\n    return \"#00000000\";\n  }\n  static T_rgb() {\n    return [null];\n  }\n  static CMYK_RGB(_ref117) {\n    let _ref118 = _slicedToArray(_ref117, 4),\n      c = _ref118[0],\n      y = _ref118[1],\n      m = _ref118[2],\n      k = _ref118[3];\n    return [\"RGB\", 1 - Math.min(1, c + k), 1 - Math.min(1, m + k), 1 - Math.min(1, y + k)];\n  }\n  static CMYK_rgb(_ref119) {\n    let _ref120 = _slicedToArray(_ref119, 4),\n      c = _ref120[0],\n      y = _ref120[1],\n      m = _ref120[2],\n      k = _ref120[3];\n    return [scaleAndClamp(1 - Math.min(1, c + k)), scaleAndClamp(1 - Math.min(1, m + k)), scaleAndClamp(1 - Math.min(1, y + k))];\n  }\n  static CMYK_HTML(components) {\n    const rgb = this.CMYK_RGB(components).slice(1);\n    return this.RGB_HTML(rgb);\n  }\n  static RGB_CMYK(_ref121) {\n    let _ref122 = _slicedToArray(_ref121, 3),\n      r = _ref122[0],\n      g = _ref122[1],\n      b = _ref122[2];\n    const c = 1 - r;\n    const m = 1 - g;\n    const y = 1 - b;\n    const k = Math.min(c, m, y);\n    return [\"CMYK\", c, m, y, k];\n  }\n}\n; // ./src/display/svg_factory.js\n\nclass BaseSVGFactory {\n  create(width, height) {\n    let skipDimensions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (width <= 0 || height <= 0) {\n      throw new Error(\"Invalid SVG dimensions\");\n    }\n    const svg = this._createSVG(\"svg:svg\");\n    svg.setAttribute(\"version\", \"1.1\");\n    if (!skipDimensions) {\n      svg.setAttribute(\"width\", `${width}px`);\n      svg.setAttribute(\"height\", `${height}px`);\n    }\n    svg.setAttribute(\"preserveAspectRatio\", \"none\");\n    svg.setAttribute(\"viewBox\", `0 0 ${width} ${height}`);\n    return svg;\n  }\n  createElement(type) {\n    if (typeof type !== \"string\") {\n      throw new Error(\"Invalid SVG element type\");\n    }\n    return this._createSVG(type);\n  }\n  _createSVG(type) {\n    unreachable(\"Abstract method `_createSVG` called.\");\n  }\n}\nclass DOMSVGFactory extends BaseSVGFactory {\n  _createSVG(type) {\n    return document.createElementNS(SVG_NS, type);\n  }\n}\n; // ./src/display/xfa_layer.js\n\nclass XfaLayer {\n  static setupStorage(html, id, element, storage, intent) {\n    const storedData = storage.getValue(id, {\n      value: null\n    });\n    switch (element.name) {\n      case \"textarea\":\n        if (storedData.value !== null) {\n          html.textContent = storedData.value;\n        }\n        if (intent === \"print\") {\n          break;\n        }\n        html.addEventListener(\"input\", event => {\n          storage.setValue(id, {\n            value: event.target.value\n          });\n        });\n        break;\n      case \"input\":\n        if (element.attributes.type === \"radio\" || element.attributes.type === \"checkbox\") {\n          if (storedData.value === element.attributes.xfaOn) {\n            html.setAttribute(\"checked\", true);\n          } else if (storedData.value === element.attributes.xfaOff) {\n            html.removeAttribute(\"checked\");\n          }\n          if (intent === \"print\") {\n            break;\n          }\n          html.addEventListener(\"change\", event => {\n            storage.setValue(id, {\n              value: event.target.checked ? event.target.getAttribute(\"xfaOn\") : event.target.getAttribute(\"xfaOff\")\n            });\n          });\n        } else {\n          if (storedData.value !== null) {\n            html.setAttribute(\"value\", storedData.value);\n          }\n          if (intent === \"print\") {\n            break;\n          }\n          html.addEventListener(\"input\", event => {\n            storage.setValue(id, {\n              value: event.target.value\n            });\n          });\n        }\n        break;\n      case \"select\":\n        if (storedData.value !== null) {\n          html.setAttribute(\"value\", storedData.value);\n          for (const option of element.children) {\n            if (option.attributes.value === storedData.value) {\n              option.attributes.selected = true;\n            } else if (option.attributes.hasOwnProperty(\"selected\")) {\n              delete option.attributes.selected;\n            }\n          }\n        }\n        html.addEventListener(\"input\", event => {\n          const options = event.target.options;\n          const value = options.selectedIndex === -1 ? \"\" : options[options.selectedIndex].value;\n          storage.setValue(id, {\n            value\n          });\n        });\n        break;\n    }\n  }\n  static setAttributes(_ref123) {\n    let html = _ref123.html,\n      element = _ref123.element,\n      _ref123$storage = _ref123.storage,\n      storage = _ref123$storage === void 0 ? null : _ref123$storage,\n      intent = _ref123.intent,\n      linkService = _ref123.linkService;\n    const attributes = element.attributes;\n    const isHTMLAnchorElement = html instanceof HTMLAnchorElement;\n    if (attributes.type === \"radio\") {\n      attributes.name = `${attributes.name}-${intent}`;\n    }\n    for (const _ref124 of Object.entries(attributes)) {\n      var _ref125 = _slicedToArray(_ref124, 2);\n      const key = _ref125[0];\n      const value = _ref125[1];\n      if (value === null || value === undefined) {\n        continue;\n      }\n      switch (key) {\n        case \"class\":\n          if (value.length) {\n            html.setAttribute(key, value.join(\" \"));\n          }\n          break;\n        case \"dataId\":\n          break;\n        case \"id\":\n          html.setAttribute(\"data-element-id\", value);\n          break;\n        case \"style\":\n          Object.assign(html.style, value);\n          break;\n        case \"textContent\":\n          html.textContent = value;\n          break;\n        default:\n          if (!isHTMLAnchorElement || key !== \"href\" && key !== \"newWindow\") {\n            html.setAttribute(key, value);\n          }\n      }\n    }\n    if (isHTMLAnchorElement) {\n      linkService.addLinkAttributes(html, attributes.href, attributes.newWindow);\n    }\n    if (storage && attributes.dataId) {\n      this.setupStorage(html, attributes.dataId, element, storage);\n    }\n  }\n  static render(parameters) {\n    const storage = parameters.annotationStorage;\n    const linkService = parameters.linkService;\n    const root = parameters.xfaHtml;\n    const intent = parameters.intent || \"display\";\n    const rootHtml = document.createElement(root.name);\n    if (root.attributes) {\n      this.setAttributes({\n        html: rootHtml,\n        element: root,\n        intent,\n        linkService\n      });\n    }\n    const isNotForRichText = intent !== \"richText\";\n    const rootDiv = parameters.div;\n    rootDiv.append(rootHtml);\n    if (parameters.viewport) {\n      const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n      rootDiv.style.transform = transform;\n    }\n    if (isNotForRichText) {\n      rootDiv.setAttribute(\"class\", \"xfaLayer xfaFont\");\n    }\n    const textDivs = [];\n    if (root.children.length === 0) {\n      if (root.value) {\n        const node = document.createTextNode(root.value);\n        rootHtml.append(node);\n        if (isNotForRichText && XfaText.shouldBuildText(root.name)) {\n          textDivs.push(node);\n        }\n      }\n      return {\n        textDivs\n      };\n    }\n    const stack = [[root, -1, rootHtml]];\n    while (stack.length > 0) {\n      var _child$attributes, _child$children;\n      const _stack$at = stack.at(-1),\n        _stack$at2 = _slicedToArray(_stack$at, 3),\n        parent = _stack$at2[0],\n        i = _stack$at2[1],\n        html = _stack$at2[2];\n      if (i + 1 === parent.children.length) {\n        stack.pop();\n        continue;\n      }\n      const child = parent.children[++stack.at(-1)[1]];\n      if (child === null) {\n        continue;\n      }\n      const name = child.name;\n      if (name === \"#text\") {\n        const node = document.createTextNode(child.value);\n        textDivs.push(node);\n        html.append(node);\n        continue;\n      }\n      const childHtml = child !== null && child !== void 0 && (_child$attributes = child.attributes) !== null && _child$attributes !== void 0 && _child$attributes.xmlns ? document.createElementNS(child.attributes.xmlns, name) : document.createElement(name);\n      html.append(childHtml);\n      if (child.attributes) {\n        this.setAttributes({\n          html: childHtml,\n          element: child,\n          storage,\n          intent,\n          linkService\n        });\n      }\n      if (((_child$children = child.children) === null || _child$children === void 0 ? void 0 : _child$children.length) > 0) {\n        stack.push([child, -1, childHtml]);\n      } else if (child.value) {\n        const node = document.createTextNode(child.value);\n        if (isNotForRichText && XfaText.shouldBuildText(name)) {\n          textDivs.push(node);\n        }\n        childHtml.append(node);\n      }\n    }\n    for (const el of rootDiv.querySelectorAll(\".xfaNonInteractive input, .xfaNonInteractive textarea\")) {\n      el.setAttribute(\"readOnly\", true);\n    }\n    return {\n      textDivs\n    };\n  }\n  static update(parameters) {\n    const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n    parameters.div.style.transform = transform;\n    parameters.div.hidden = false;\n  }\n}\n; // ./src/display/annotation_layer.js\n\nconst DEFAULT_TAB_INDEX = 1000;\nconst annotation_layer_DEFAULT_FONT_SIZE = 9;\nconst GetElementsByNameSet = new WeakSet();\nfunction getRectDims(rect) {\n  return {\n    width: rect[2] - rect[0],\n    height: rect[3] - rect[1]\n  };\n}\nclass AnnotationElementFactory {\n  static create(parameters) {\n    const subtype = parameters.data.annotationType;\n    switch (subtype) {\n      case AnnotationType.LINK:\n        return new LinkAnnotationElement(parameters);\n      case AnnotationType.TEXT:\n        return new TextAnnotationElement(parameters);\n      case AnnotationType.WIDGET:\n        const fieldType = parameters.data.fieldType;\n        switch (fieldType) {\n          case \"Tx\":\n            return new TextWidgetAnnotationElement(parameters);\n          case \"Btn\":\n            if (parameters.data.radioButton) {\n              return new RadioButtonWidgetAnnotationElement(parameters);\n            } else if (parameters.data.checkBox) {\n              return new CheckboxWidgetAnnotationElement(parameters);\n            }\n            return new PushButtonWidgetAnnotationElement(parameters);\n          case \"Ch\":\n            return new ChoiceWidgetAnnotationElement(parameters);\n          case \"Sig\":\n            return new SignatureWidgetAnnotationElement(parameters);\n        }\n        return new WidgetAnnotationElement(parameters);\n      case AnnotationType.POPUP:\n        return new PopupAnnotationElement(parameters);\n      case AnnotationType.FREETEXT:\n        return new FreeTextAnnotationElement(parameters);\n      case AnnotationType.LINE:\n        return new LineAnnotationElement(parameters);\n      case AnnotationType.SQUARE:\n        return new SquareAnnotationElement(parameters);\n      case AnnotationType.CIRCLE:\n        return new CircleAnnotationElement(parameters);\n      case AnnotationType.POLYLINE:\n        return new PolylineAnnotationElement(parameters);\n      case AnnotationType.CARET:\n        return new CaretAnnotationElement(parameters);\n      case AnnotationType.INK:\n        return new InkAnnotationElement(parameters);\n      case AnnotationType.POLYGON:\n        return new PolygonAnnotationElement(parameters);\n      case AnnotationType.HIGHLIGHT:\n        return new HighlightAnnotationElement(parameters);\n      case AnnotationType.UNDERLINE:\n        return new UnderlineAnnotationElement(parameters);\n      case AnnotationType.SQUIGGLY:\n        return new SquigglyAnnotationElement(parameters);\n      case AnnotationType.STRIKEOUT:\n        return new StrikeOutAnnotationElement(parameters);\n      case AnnotationType.STAMP:\n        return new StampAnnotationElement(parameters);\n      case AnnotationType.FILEATTACHMENT:\n        return new FileAttachmentAnnotationElement(parameters);\n      default:\n        return new AnnotationElement(parameters);\n    }\n  }\n}\nvar _updates = /*#__PURE__*/_classPrivateFieldLooseKey(\"updates\");\nvar _hasBorder = /*#__PURE__*/_classPrivateFieldLooseKey(\"hasBorder\");\nvar _popupElement = /*#__PURE__*/_classPrivateFieldLooseKey(\"popupElement\");\nvar _setRectEdited = /*#__PURE__*/_classPrivateFieldLooseKey(\"setRectEdited\");\nclass AnnotationElement {\n  constructor(parameters) {\n    let _ref126 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref126$isRenderable = _ref126.isRenderable,\n      isRenderable = _ref126$isRenderable === void 0 ? false : _ref126$isRenderable,\n      _ref126$ignoreBorder = _ref126.ignoreBorder,\n      ignoreBorder = _ref126$ignoreBorder === void 0 ? false : _ref126$ignoreBorder,\n      _ref126$createQuadril = _ref126.createQuadrilaterals,\n      createQuadrilaterals = _ref126$createQuadril === void 0 ? false : _ref126$createQuadril;\n    Object.defineProperty(this, _setRectEdited, {\n      value: _setRectEdited2\n    });\n    Object.defineProperty(this, _updates, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _hasBorder, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _popupElement, {\n      writable: true,\n      value: null\n    });\n    this.isRenderable = isRenderable;\n    this.data = parameters.data;\n    this.layer = parameters.layer;\n    this.linkService = parameters.linkService;\n    this.downloadManager = parameters.downloadManager;\n    this.imageResourcesPath = parameters.imageResourcesPath;\n    this.renderForms = parameters.renderForms;\n    this.svgFactory = parameters.svgFactory;\n    this.annotationStorage = parameters.annotationStorage;\n    this.enableScripting = parameters.enableScripting;\n    this.hasJSActions = parameters.hasJSActions;\n    this._fieldObjects = parameters.fieldObjects;\n    this.parent = parameters.parent;\n    if (isRenderable) {\n      this.container = this._createContainer(ignoreBorder);\n    }\n    if (createQuadrilaterals) {\n      this._createQuadrilaterals();\n    }\n  }\n  static _hasPopupData(_ref127) {\n    let titleObj = _ref127.titleObj,\n      contentsObj = _ref127.contentsObj,\n      richText = _ref127.richText;\n    return !!(titleObj !== null && titleObj !== void 0 && titleObj.str || contentsObj !== null && contentsObj !== void 0 && contentsObj.str || richText !== null && richText !== void 0 && richText.str);\n  }\n  get _isEditable() {\n    return this.data.isEditable;\n  }\n  get hasPopupData() {\n    return AnnotationElement._hasPopupData(this.data);\n  }\n  updateEdited(params) {\n    var _classPrivateFieldLoo67, _classPrivateFieldLoo68;\n    if (!this.container) {\n      return;\n    }\n    (_classPrivateFieldLoo67 = _classPrivateFieldLooseBase(this, _updates))[_updates] || (_classPrivateFieldLoo67[_updates] = {\n      rect: this.data.rect.slice(0)\n    });\n    const rect = params.rect;\n    if (rect) {\n      _classPrivateFieldLooseBase(this, _setRectEdited)[_setRectEdited](rect);\n    }\n    (_classPrivateFieldLoo68 = _classPrivateFieldLooseBase(this, _popupElement)[_popupElement]) === null || _classPrivateFieldLoo68 === void 0 ? void 0 : _classPrivateFieldLoo68.popup.updateEdited(params);\n  }\n  resetEdited() {\n    var _classPrivateFieldLoo69;\n    if (!_classPrivateFieldLooseBase(this, _updates)[_updates]) {\n      return;\n    }\n    _classPrivateFieldLooseBase(this, _setRectEdited)[_setRectEdited](_classPrivateFieldLooseBase(this, _updates)[_updates].rect);\n    (_classPrivateFieldLoo69 = _classPrivateFieldLooseBase(this, _popupElement)[_popupElement]) === null || _classPrivateFieldLoo69 === void 0 ? void 0 : _classPrivateFieldLoo69.popup.resetEdited();\n    _classPrivateFieldLooseBase(this, _updates)[_updates] = null;\n  }\n  _createContainer(ignoreBorder) {\n    const data = this.data,\n      _this$parent3 = this.parent,\n      page = _this$parent3.page,\n      viewport = _this$parent3.viewport;\n    const container = document.createElement(\"section\");\n    container.setAttribute(\"data-annotation-id\", data.id);\n    if (!(this instanceof WidgetAnnotationElement)) {\n      container.tabIndex = DEFAULT_TAB_INDEX;\n    }\n    const style = container.style;\n    style.zIndex = this.parent.zIndex++;\n    if (data.alternativeText) {\n      container.title = data.alternativeText;\n    }\n    if (data.noRotate) {\n      container.classList.add(\"norotate\");\n    }\n    if (!data.rect || this instanceof PopupAnnotationElement) {\n      const rotation = data.rotation;\n      if (!data.hasOwnCanvas && rotation !== 0) {\n        this.setRotation(rotation, container);\n      }\n      return container;\n    }\n    const _getRectDims = getRectDims(data.rect),\n      width = _getRectDims.width,\n      height = _getRectDims.height;\n    if (!ignoreBorder && data.borderStyle.width > 0) {\n      style.borderWidth = `${data.borderStyle.width}px`;\n      const horizontalRadius = data.borderStyle.horizontalCornerRadius;\n      const verticalRadius = data.borderStyle.verticalCornerRadius;\n      if (horizontalRadius > 0 || verticalRadius > 0) {\n        const radius = `calc(${horizontalRadius}px * var(--scale-factor)) / calc(${verticalRadius}px * var(--scale-factor))`;\n        style.borderRadius = radius;\n      } else if (this instanceof RadioButtonWidgetAnnotationElement) {\n        const radius = `calc(${width}px * var(--scale-factor)) / calc(${height}px * var(--scale-factor))`;\n        style.borderRadius = radius;\n      }\n      switch (data.borderStyle.style) {\n        case AnnotationBorderStyleType.SOLID:\n          style.borderStyle = \"solid\";\n          break;\n        case AnnotationBorderStyleType.DASHED:\n          style.borderStyle = \"dashed\";\n          break;\n        case AnnotationBorderStyleType.BEVELED:\n          warn(\"Unimplemented border style: beveled\");\n          break;\n        case AnnotationBorderStyleType.INSET:\n          warn(\"Unimplemented border style: inset\");\n          break;\n        case AnnotationBorderStyleType.UNDERLINE:\n          style.borderBottomStyle = \"solid\";\n          break;\n        default:\n          break;\n      }\n      const borderColor = data.borderColor || null;\n      if (borderColor) {\n        _classPrivateFieldLooseBase(this, _hasBorder)[_hasBorder] = true;\n        style.borderColor = Util.makeHexColor(borderColor[0] | 0, borderColor[1] | 0, borderColor[2] | 0);\n      } else {\n        style.borderWidth = 0;\n      }\n    }\n    const rect = Util.normalizeRect([data.rect[0], page.view[3] - data.rect[1] + page.view[1], data.rect[2], page.view[3] - data.rect[3] + page.view[1]]);\n    const _viewport$rawDims3 = viewport.rawDims,\n      pageWidth = _viewport$rawDims3.pageWidth,\n      pageHeight = _viewport$rawDims3.pageHeight,\n      pageX = _viewport$rawDims3.pageX,\n      pageY = _viewport$rawDims3.pageY;\n    style.left = `${100 * (rect[0] - pageX) / pageWidth}%`;\n    style.top = `${100 * (rect[1] - pageY) / pageHeight}%`;\n    const rotation = data.rotation;\n    if (data.hasOwnCanvas || rotation === 0) {\n      style.width = `${100 * width / pageWidth}%`;\n      style.height = `${100 * height / pageHeight}%`;\n    } else {\n      this.setRotation(rotation, container);\n    }\n    return container;\n  }\n  setRotation(angle) {\n    let container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.container;\n    if (!this.data.rect) {\n      return;\n    }\n    const _this$parent$viewport3 = this.parent.viewport.rawDims,\n      pageWidth = _this$parent$viewport3.pageWidth,\n      pageHeight = _this$parent$viewport3.pageHeight;\n    const _getRectDims2 = getRectDims(this.data.rect),\n      width = _getRectDims2.width,\n      height = _getRectDims2.height;\n    let elementWidth, elementHeight;\n    if (angle % 180 === 0) {\n      elementWidth = 100 * width / pageWidth;\n      elementHeight = 100 * height / pageHeight;\n    } else {\n      elementWidth = 100 * height / pageWidth;\n      elementHeight = 100 * width / pageHeight;\n    }\n    container.style.width = `${elementWidth}%`;\n    container.style.height = `${elementHeight}%`;\n    container.setAttribute(\"data-main-rotation\", (360 - angle) % 360);\n  }\n  get _commonActions() {\n    const setColor = (jsName, styleName, event) => {\n      const color = event.detail[jsName];\n      const colorType = color[0];\n      const colorArray = color.slice(1);\n      event.target.style[styleName] = ColorConverters[`${colorType}_HTML`](colorArray);\n      this.annotationStorage.setValue(this.data.id, {\n        [styleName]: ColorConverters[`${colorType}_rgb`](colorArray)\n      });\n    };\n    return shadow(this, \"_commonActions\", {\n      display: event => {\n        const display = event.detail.display;\n        const hidden = display % 2 === 1;\n        this.container.style.visibility = hidden ? \"hidden\" : \"visible\";\n        this.annotationStorage.setValue(this.data.id, {\n          noView: hidden,\n          noPrint: display === 1 || display === 2\n        });\n      },\n      print: event => {\n        this.annotationStorage.setValue(this.data.id, {\n          noPrint: !event.detail.print\n        });\n      },\n      hidden: event => {\n        const hidden = event.detail.hidden;\n        this.container.style.visibility = hidden ? \"hidden\" : \"visible\";\n        this.annotationStorage.setValue(this.data.id, {\n          noPrint: hidden,\n          noView: hidden\n        });\n      },\n      focus: event => {\n        setTimeout(() => event.target.focus({\n          preventScroll: false\n        }), 0);\n      },\n      userName: event => {\n        event.target.title = event.detail.userName;\n      },\n      readonly: event => {\n        event.target.disabled = event.detail.readonly;\n      },\n      required: event => {\n        this._setRequired(event.target, event.detail.required);\n      },\n      bgColor: event => {\n        setColor(\"bgColor\", \"backgroundColor\", event);\n      },\n      fillColor: event => {\n        setColor(\"fillColor\", \"backgroundColor\", event);\n      },\n      fgColor: event => {\n        setColor(\"fgColor\", \"color\", event);\n      },\n      textColor: event => {\n        setColor(\"textColor\", \"color\", event);\n      },\n      borderColor: event => {\n        setColor(\"borderColor\", \"borderColor\", event);\n      },\n      strokeColor: event => {\n        setColor(\"strokeColor\", \"borderColor\", event);\n      },\n      rotation: event => {\n        const angle = event.detail.rotation;\n        this.setRotation(angle);\n        this.annotationStorage.setValue(this.data.id, {\n          rotation: angle\n        });\n      }\n    });\n  }\n  _dispatchEventFromSandbox(actions, jsEvent) {\n    const commonActions = this._commonActions;\n    for (const name of Object.keys(jsEvent.detail)) {\n      const action = actions[name] || commonActions[name];\n      action === null || action === void 0 ? void 0 : action(jsEvent);\n    }\n  }\n  _setDefaultPropertiesFromJS(element) {\n    if (!this.enableScripting) {\n      return;\n    }\n    const storedData = this.annotationStorage.getRawValue(this.data.id);\n    if (!storedData) {\n      return;\n    }\n    const commonActions = this._commonActions;\n    for (const _ref128 of Object.entries(storedData)) {\n      var _ref129 = _slicedToArray(_ref128, 2);\n      const actionName = _ref129[0];\n      const detail = _ref129[1];\n      const action = commonActions[actionName];\n      if (action) {\n        const eventProxy = {\n          detail: {\n            [actionName]: detail\n          },\n          target: element\n        };\n        action(eventProxy);\n        delete storedData[actionName];\n      }\n    }\n  }\n  _createQuadrilaterals() {\n    if (!this.container) {\n      return;\n    }\n    const quadPoints = this.data.quadPoints;\n    if (!quadPoints) {\n      return;\n    }\n    const _this$data$rect$map = this.data.rect.map(x => Math.fround(x)),\n      _this$data$rect$map2 = _slicedToArray(_this$data$rect$map, 4),\n      rectBlX = _this$data$rect$map2[0],\n      rectBlY = _this$data$rect$map2[1],\n      rectTrX = _this$data$rect$map2[2],\n      rectTrY = _this$data$rect$map2[3];\n    if (quadPoints.length === 8) {\n      const _quadPoints$subarray = quadPoints.subarray(2, 6),\n        _quadPoints$subarray2 = _slicedToArray(_quadPoints$subarray, 4),\n        trX = _quadPoints$subarray2[0],\n        trY = _quadPoints$subarray2[1],\n        blX = _quadPoints$subarray2[2],\n        blY = _quadPoints$subarray2[3];\n      if (rectTrX === trX && rectTrY === trY && rectBlX === blX && rectBlY === blY) {\n        return;\n      }\n    }\n    const style = this.container.style;\n    let svgBuffer;\n    if (_classPrivateFieldLooseBase(this, _hasBorder)[_hasBorder]) {\n      const borderColor = style.borderColor,\n        borderWidth = style.borderWidth;\n      style.borderWidth = 0;\n      svgBuffer = [\"url('data:image/svg+xml;utf8,\", `<svg xmlns=\"http://www.w3.org/2000/svg\"`, ` preserveAspectRatio=\"none\" viewBox=\"0 0 1 1\">`, `<g fill=\"transparent\" stroke=\"${borderColor}\" stroke-width=\"${borderWidth}\">`];\n      this.container.classList.add(\"hasBorder\");\n    }\n    const width = rectTrX - rectBlX;\n    const height = rectTrY - rectBlY;\n    const svgFactory = this.svgFactory;\n    const svg = svgFactory.createElement(\"svg\");\n    svg.classList.add(\"quadrilateralsContainer\");\n    svg.setAttribute(\"width\", 0);\n    svg.setAttribute(\"height\", 0);\n    const defs = svgFactory.createElement(\"defs\");\n    svg.append(defs);\n    const clipPath = svgFactory.createElement(\"clipPath\");\n    const id = `clippath_${this.data.id}`;\n    clipPath.setAttribute(\"id\", id);\n    clipPath.setAttribute(\"clipPathUnits\", \"objectBoundingBox\");\n    defs.append(clipPath);\n    for (let i = 2, ii = quadPoints.length; i < ii; i += 8) {\n      var _svgBuffer;\n      const trX = quadPoints[i];\n      const trY = quadPoints[i + 1];\n      const blX = quadPoints[i + 2];\n      const blY = quadPoints[i + 3];\n      const rect = svgFactory.createElement(\"rect\");\n      const x = (blX - rectBlX) / width;\n      const y = (rectTrY - trY) / height;\n      const rectWidth = (trX - blX) / width;\n      const rectHeight = (trY - blY) / height;\n      rect.setAttribute(\"x\", x);\n      rect.setAttribute(\"y\", y);\n      rect.setAttribute(\"width\", rectWidth);\n      rect.setAttribute(\"height\", rectHeight);\n      clipPath.append(rect);\n      (_svgBuffer = svgBuffer) === null || _svgBuffer === void 0 ? void 0 : _svgBuffer.push(`<rect vector-effect=\"non-scaling-stroke\" x=\"${x}\" y=\"${y}\" width=\"${rectWidth}\" height=\"${rectHeight}\"/>`);\n    }\n    if (_classPrivateFieldLooseBase(this, _hasBorder)[_hasBorder]) {\n      svgBuffer.push(`</g></svg>')`);\n      style.backgroundImage = svgBuffer.join(\"\");\n    }\n    this.container.append(svg);\n    this.container.style.clipPath = `url(#${id})`;\n  }\n  _createPopup() {\n    const data = this.data;\n    const popup = _classPrivateFieldLooseBase(this, _popupElement)[_popupElement] = new PopupAnnotationElement({\n      data: {\n        color: data.color,\n        titleObj: data.titleObj,\n        modificationDate: data.modificationDate,\n        contentsObj: data.contentsObj,\n        richText: data.richText,\n        parentRect: data.rect,\n        borderStyle: 0,\n        id: `popup_${data.id}`,\n        rotation: data.rotation\n      },\n      parent: this.parent,\n      elements: [this]\n    });\n    this.parent.div.append(popup.render());\n  }\n  render() {\n    unreachable(\"Abstract method `AnnotationElement.render` called\");\n  }\n  _getElementsByName(name) {\n    let skipId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const fields = [];\n    if (this._fieldObjects) {\n      const fieldObj = this._fieldObjects[name];\n      if (fieldObj) {\n        for (const _ref130 of fieldObj) {\n          const page = _ref130.page;\n          const id = _ref130.id;\n          const exportValues = _ref130.exportValues;\n          if (page === -1) {\n            continue;\n          }\n          if (id === skipId) {\n            continue;\n          }\n          const exportValue = typeof exportValues === \"string\" ? exportValues : null;\n          const domElement = document.querySelector(`[data-element-id=\"${id}\"]`);\n          if (domElement && !GetElementsByNameSet.has(domElement)) {\n            warn(`_getElementsByName - element not allowed: ${id}`);\n            continue;\n          }\n          fields.push({\n            id,\n            exportValue,\n            domElement\n          });\n        }\n      }\n      return fields;\n    }\n    for (const domElement of document.getElementsByName(name)) {\n      const exportValue = domElement.exportValue;\n      const id = domElement.getAttribute(\"data-element-id\");\n      if (id === skipId) {\n        continue;\n      }\n      if (!GetElementsByNameSet.has(domElement)) {\n        continue;\n      }\n      fields.push({\n        id,\n        exportValue,\n        domElement\n      });\n    }\n    return fields;\n  }\n  show() {\n    var _this$popup;\n    if (this.container) {\n      this.container.hidden = false;\n    }\n    (_this$popup = this.popup) === null || _this$popup === void 0 ? void 0 : _this$popup.maybeShow();\n  }\n  hide() {\n    var _this$popup2;\n    if (this.container) {\n      this.container.hidden = true;\n    }\n    (_this$popup2 = this.popup) === null || _this$popup2 === void 0 ? void 0 : _this$popup2.forceHide();\n  }\n  getElementsToTriggerPopup() {\n    return this.container;\n  }\n  addHighlightArea() {\n    const triggers = this.getElementsToTriggerPopup();\n    if (Array.isArray(triggers)) {\n      for (const element of triggers) {\n        element.classList.add(\"highlightArea\");\n      }\n    } else {\n      triggers.classList.add(\"highlightArea\");\n    }\n  }\n  _editOnDoubleClick() {\n    if (!this._isEditable) {\n      return;\n    }\n    const mode = this.annotationEditorType,\n      editId = this.data.id;\n    this.container.addEventListener(\"dblclick\", () => {\n      var _this$linkService$eve;\n      (_this$linkService$eve = this.linkService.eventBus) === null || _this$linkService$eve === void 0 ? void 0 : _this$linkService$eve.dispatch(\"switchannotationeditormode\", {\n        source: this,\n        mode,\n        editId\n      });\n    });\n  }\n}\nfunction _setRectEdited2(rect) {\n  const style = this.container.style,\n    _this$data3 = this.data,\n    currentRect = _this$data3.rect,\n    rotation = _this$data3.rotation,\n    _this$parent$viewport4 = this.parent.viewport.rawDims,\n    pageWidth = _this$parent$viewport4.pageWidth,\n    pageHeight = _this$parent$viewport4.pageHeight,\n    pageX = _this$parent$viewport4.pageX,\n    pageY = _this$parent$viewport4.pageY;\n  currentRect === null || currentRect === void 0 ? void 0 : currentRect.splice(0, 4, ...rect);\n  const _getRectDims9 = getRectDims(rect),\n    width = _getRectDims9.width,\n    height = _getRectDims9.height;\n  style.left = `${100 * (rect[0] - pageX) / pageWidth}%`;\n  style.top = `${100 * (pageHeight - rect[3] + pageY) / pageHeight}%`;\n  if (rotation === 0) {\n    style.width = `${100 * width / pageWidth}%`;\n    style.height = `${100 * height / pageHeight}%`;\n  } else {\n    this.setRotation(rotation);\n  }\n}\nvar _setInternalLink = /*#__PURE__*/_classPrivateFieldLooseKey(\"setInternalLink\");\nvar _bindAttachment = /*#__PURE__*/_classPrivateFieldLooseKey(\"bindAttachment\");\nvar _bindSetOCGState = /*#__PURE__*/_classPrivateFieldLooseKey(\"bindSetOCGState\");\nclass LinkAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    super(parameters, {\n      isRenderable: true,\n      ignoreBorder: !!(options !== null && options !== void 0 && options.ignoreBorder),\n      createQuadrilaterals: true\n    });\n    Object.defineProperty(this, _bindSetOCGState, {\n      value: _bindSetOCGState2\n    });\n    Object.defineProperty(this, _bindAttachment, {\n      value: _bindAttachment2\n    });\n    Object.defineProperty(this, _setInternalLink, {\n      value: _setInternalLink2\n    });\n    this.isTooltipOnly = parameters.data.isTooltipOnly;\n  }\n  render() {\n    const data = this.data,\n      linkService = this.linkService;\n    const link = document.createElement(\"a\");\n    link.setAttribute(\"data-element-id\", data.id);\n    let isBound = false;\n    if (data.url) {\n      linkService.addLinkAttributes(link, data.url, data.newWindow);\n      isBound = true;\n    } else if (data.action) {\n      this._bindNamedAction(link, data.action);\n      isBound = true;\n    } else if (data.attachment) {\n      _classPrivateFieldLooseBase(this, _bindAttachment)[_bindAttachment](link, data.attachment, data.attachmentDest);\n      isBound = true;\n    } else if (data.setOCGState) {\n      _classPrivateFieldLooseBase(this, _bindSetOCGState)[_bindSetOCGState](link, data.setOCGState);\n      isBound = true;\n    } else if (data.dest) {\n      this._bindLink(link, data.dest);\n      isBound = true;\n    } else {\n      if (data.actions && (data.actions.Action || data.actions[\"Mouse Up\"] || data.actions[\"Mouse Down\"]) && this.enableScripting && this.hasJSActions) {\n        this._bindJSAction(link, data);\n        isBound = true;\n      }\n      if (data.resetForm) {\n        this._bindResetFormAction(link, data.resetForm);\n        isBound = true;\n      } else if (this.isTooltipOnly && !isBound) {\n        this._bindLink(link, \"\");\n        isBound = true;\n      }\n    }\n    this.container.classList.add(\"linkAnnotation\");\n    if (isBound) {\n      this.container.append(link);\n    }\n    return this.container;\n  }\n  _bindLink(link, destination) {\n    link.href = this.linkService.getDestinationHash(destination);\n    link.onclick = () => {\n      if (destination) {\n        this.linkService.goToDestination(destination);\n      }\n      return false;\n    };\n    if (destination || destination === \"\") {\n      _classPrivateFieldLooseBase(this, _setInternalLink)[_setInternalLink]();\n    }\n  }\n  _bindNamedAction(link, action) {\n    link.href = this.linkService.getAnchorUrl(\"\");\n    link.onclick = () => {\n      this.linkService.executeNamedAction(action);\n      return false;\n    };\n    _classPrivateFieldLooseBase(this, _setInternalLink)[_setInternalLink]();\n  }\n  _bindJSAction(link, data) {\n    link.href = this.linkService.getAnchorUrl(\"\");\n    const map = new Map([[\"Action\", \"onclick\"], [\"Mouse Up\", \"onmouseup\"], [\"Mouse Down\", \"onmousedown\"]]);\n    for (const name of Object.keys(data.actions)) {\n      const jsName = map.get(name);\n      if (!jsName) {\n        continue;\n      }\n      link[jsName] = () => {\n        var _this$linkService$eve2;\n        (_this$linkService$eve2 = this.linkService.eventBus) === null || _this$linkService$eve2 === void 0 ? void 0 : _this$linkService$eve2.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: data.id,\n            name\n          }\n        });\n        return false;\n      };\n    }\n    if (!link.onclick) {\n      link.onclick = () => false;\n    }\n    _classPrivateFieldLooseBase(this, _setInternalLink)[_setInternalLink]();\n  }\n  _bindResetFormAction(link, resetForm) {\n    const otherClickAction = link.onclick;\n    if (!otherClickAction) {\n      link.href = this.linkService.getAnchorUrl(\"\");\n    }\n    _classPrivateFieldLooseBase(this, _setInternalLink)[_setInternalLink]();\n    if (!this._fieldObjects) {\n      warn(`_bindResetFormAction - \"resetForm\" action not supported, ` + \"ensure that the `fieldObjects` parameter is provided.\");\n      if (!otherClickAction) {\n        link.onclick = () => false;\n      }\n      return;\n    }\n    link.onclick = () => {\n      otherClickAction === null || otherClickAction === void 0 ? void 0 : otherClickAction();\n      const resetFormFields = resetForm.fields,\n        resetFormRefs = resetForm.refs,\n        include = resetForm.include;\n      const allFields = [];\n      if (resetFormFields.length !== 0 || resetFormRefs.length !== 0) {\n        const fieldIds = new Set(resetFormRefs);\n        for (const fieldName of resetFormFields) {\n          const fields = this._fieldObjects[fieldName] || [];\n          for (const _ref131 of fields) {\n            const id = _ref131.id;\n            fieldIds.add(id);\n          }\n        }\n        for (const fields of Object.values(this._fieldObjects)) {\n          for (const field of fields) {\n            if (fieldIds.has(field.id) === include) {\n              allFields.push(field);\n            }\n          }\n        }\n      } else {\n        for (const fields of Object.values(this._fieldObjects)) {\n          allFields.push(...fields);\n        }\n      }\n      const storage = this.annotationStorage;\n      const allIds = [];\n      for (const field of allFields) {\n        const id = field.id;\n        allIds.push(id);\n        switch (field.type) {\n          case \"text\":\n            {\n              const value = field.defaultValue || \"\";\n              storage.setValue(id, {\n                value\n              });\n              break;\n            }\n          case \"checkbox\":\n          case \"radiobutton\":\n            {\n              const value = field.defaultValue === field.exportValues;\n              storage.setValue(id, {\n                value\n              });\n              break;\n            }\n          case \"combobox\":\n          case \"listbox\":\n            {\n              const value = field.defaultValue || \"\";\n              storage.setValue(id, {\n                value\n              });\n              break;\n            }\n          default:\n            continue;\n        }\n        const domElement = document.querySelector(`[data-element-id=\"${id}\"]`);\n        if (!domElement) {\n          continue;\n        } else if (!GetElementsByNameSet.has(domElement)) {\n          warn(`_bindResetFormAction - element not allowed: ${id}`);\n          continue;\n        }\n        domElement.dispatchEvent(new Event(\"resetform\"));\n      }\n      if (this.enableScripting) {\n        var _this$linkService$eve3;\n        (_this$linkService$eve3 = this.linkService.eventBus) === null || _this$linkService$eve3 === void 0 ? void 0 : _this$linkService$eve3.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: \"app\",\n            ids: allIds,\n            name: \"ResetForm\"\n          }\n        });\n      }\n      return false;\n    };\n  }\n}\nfunction _setInternalLink2() {\n  this.container.setAttribute(\"data-internal-link\", \"\");\n}\nfunction _bindAttachment2(link, attachment) {\n  let dest = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  link.href = this.linkService.getAnchorUrl(\"\");\n  if (attachment.description) {\n    link.title = attachment.description;\n  }\n  link.onclick = () => {\n    var _this$downloadManager;\n    (_this$downloadManager = this.downloadManager) === null || _this$downloadManager === void 0 ? void 0 : _this$downloadManager.openOrDownloadData(attachment.content, attachment.filename, dest);\n    return false;\n  };\n  _classPrivateFieldLooseBase(this, _setInternalLink)[_setInternalLink]();\n}\nfunction _bindSetOCGState2(link, action) {\n  link.href = this.linkService.getAnchorUrl(\"\");\n  link.onclick = () => {\n    this.linkService.executeSetOCGState(action);\n    return false;\n  };\n  _classPrivateFieldLooseBase(this, _setInternalLink)[_setInternalLink]();\n}\nclass TextAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    super(parameters, {\n      isRenderable: true\n    });\n  }\n  render() {\n    this.container.classList.add(\"textAnnotation\");\n    const image = document.createElement(\"img\");\n    image.src = this.imageResourcesPath + \"annotation-\" + this.data.name.toLowerCase() + \".svg\";\n    image.setAttribute(\"data-l10n-id\", \"pdfjs-text-annotation-type\");\n    image.setAttribute(\"data-l10n-args\", JSON.stringify({\n      type: this.data.name\n    }));\n    if (!this.data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    }\n    this.container.append(image);\n    return this.container;\n  }\n}\nclass WidgetAnnotationElement extends AnnotationElement {\n  render() {\n    return this.container;\n  }\n  showElementAndHideCanvas(element) {\n    if (this.data.hasOwnCanvas) {\n      var _element$previousSibl;\n      if (((_element$previousSibl = element.previousSibling) === null || _element$previousSibl === void 0 ? void 0 : _element$previousSibl.nodeName) === \"CANVAS\") {\n        element.previousSibling.hidden = true;\n      }\n      element.hidden = false;\n    }\n  }\n  _getKeyModifier(event) {\n    return util_FeatureTest.platform.isMac ? event.metaKey : event.ctrlKey;\n  }\n  _setEventListener(element, elementData, baseName, eventName, valueGetter) {\n    if (baseName.includes(\"mouse\")) {\n      element.addEventListener(baseName, event => {\n        var _this$linkService$eve4;\n        (_this$linkService$eve4 = this.linkService.eventBus) === null || _this$linkService$eve4 === void 0 ? void 0 : _this$linkService$eve4.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: this.data.id,\n            name: eventName,\n            value: valueGetter(event),\n            shift: event.shiftKey,\n            modifier: this._getKeyModifier(event)\n          }\n        });\n      });\n    } else {\n      element.addEventListener(baseName, event => {\n        var _this$linkService$eve5;\n        if (baseName === \"blur\") {\n          if (!elementData.focused || !event.relatedTarget) {\n            return;\n          }\n          elementData.focused = false;\n        } else if (baseName === \"focus\") {\n          if (elementData.focused) {\n            return;\n          }\n          elementData.focused = true;\n        }\n        if (!valueGetter) {\n          return;\n        }\n        (_this$linkService$eve5 = this.linkService.eventBus) === null || _this$linkService$eve5 === void 0 ? void 0 : _this$linkService$eve5.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: this.data.id,\n            name: eventName,\n            value: valueGetter(event)\n          }\n        });\n      });\n    }\n  }\n  _setEventListeners(element, elementData, names, getter) {\n    for (const _ref132 of names) {\n      var _this$data$actions;\n      var _ref133 = _slicedToArray(_ref132, 2);\n      const baseName = _ref133[0];\n      const eventName = _ref133[1];\n      if (eventName === \"Action\" || (_this$data$actions = this.data.actions) !== null && _this$data$actions !== void 0 && _this$data$actions[eventName]) {\n        var _this$data$actions2, _this$data$actions3;\n        if (eventName === \"Focus\" || eventName === \"Blur\") {\n          elementData || (elementData = {\n            focused: false\n          });\n        }\n        this._setEventListener(element, elementData, baseName, eventName, getter);\n        if (eventName === \"Focus\" && !((_this$data$actions2 = this.data.actions) !== null && _this$data$actions2 !== void 0 && _this$data$actions2.Blur)) {\n          this._setEventListener(element, elementData, \"blur\", \"Blur\", null);\n        } else if (eventName === \"Blur\" && !((_this$data$actions3 = this.data.actions) !== null && _this$data$actions3 !== void 0 && _this$data$actions3.Focus)) {\n          this._setEventListener(element, elementData, \"focus\", \"Focus\", null);\n        }\n      }\n    }\n  }\n  _setBackgroundColor(element) {\n    const color = this.data.backgroundColor || null;\n    element.style.backgroundColor = color === null ? \"transparent\" : Util.makeHexColor(color[0], color[1], color[2]);\n  }\n  _setTextStyle(element) {\n    const TEXT_ALIGNMENT = [\"left\", \"center\", \"right\"];\n    const fontColor = this.data.defaultAppearanceData.fontColor;\n    const fontSize = this.data.defaultAppearanceData.fontSize || annotation_layer_DEFAULT_FONT_SIZE;\n    const style = element.style;\n    let computedFontSize;\n    const BORDER_SIZE = 2;\n    const roundToOneDecimal = x => Math.round(10 * x) / 10;\n    if (this.data.multiLine) {\n      const height = Math.abs(this.data.rect[3] - this.data.rect[1] - BORDER_SIZE);\n      const numberOfLines = Math.round(height / (LINE_FACTOR * fontSize)) || 1;\n      const lineHeight = height / numberOfLines;\n      computedFontSize = Math.min(fontSize, roundToOneDecimal(lineHeight / LINE_FACTOR));\n    } else {\n      const height = Math.abs(this.data.rect[3] - this.data.rect[1] - BORDER_SIZE);\n      computedFontSize = Math.min(fontSize, roundToOneDecimal(height / LINE_FACTOR));\n    }\n    style.fontSize = `calc(${computedFontSize}px * var(--scale-factor))`;\n    style.color = Util.makeHexColor(fontColor[0], fontColor[1], fontColor[2]);\n    if (this.data.textAlignment !== null) {\n      style.textAlign = TEXT_ALIGNMENT[this.data.textAlignment];\n    }\n  }\n  _setRequired(element, isRequired) {\n    if (isRequired) {\n      element.setAttribute(\"required\", true);\n    } else {\n      element.removeAttribute(\"required\");\n    }\n    element.setAttribute(\"aria-required\", isRequired);\n  }\n}\nclass TextWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    const isRenderable = parameters.renderForms || parameters.data.hasOwnCanvas || !parameters.data.hasAppearance && !!parameters.data.fieldValue;\n    super(parameters, {\n      isRenderable\n    });\n  }\n  setPropertyOnSiblings(base, key, value, keyInStorage) {\n    const storage = this.annotationStorage;\n    for (const element of this._getElementsByName(base.name, base.id)) {\n      if (element.domElement) {\n        element.domElement[key] = value;\n      }\n      storage.setValue(element.id, {\n        [keyInStorage]: value\n      });\n    }\n  }\n  render() {\n    const storage = this.annotationStorage;\n    const id = this.data.id;\n    this.container.classList.add(\"textWidgetAnnotation\");\n    let element = null;\n    if (this.renderForms) {\n      var _this$data$textConten;\n      const storedData = storage.getValue(id, {\n        value: this.data.fieldValue\n      });\n      let textContent = storedData.value || \"\";\n      const maxLen = storage.getValue(id, {\n        charLimit: this.data.maxLen\n      }).charLimit;\n      if (maxLen && textContent.length > maxLen) {\n        textContent = textContent.slice(0, maxLen);\n      }\n      let fieldFormattedValues = storedData.formattedValue || ((_this$data$textConten = this.data.textContent) === null || _this$data$textConten === void 0 ? void 0 : _this$data$textConten.join(\"\\n\")) || null;\n      if (fieldFormattedValues && this.data.comb) {\n        fieldFormattedValues = fieldFormattedValues.replaceAll(/\\s+/g, \"\");\n      }\n      const elementData = {\n        userValue: textContent,\n        formattedValue: fieldFormattedValues,\n        lastCommittedValue: null,\n        commitKey: 1,\n        focused: false\n      };\n      if (this.data.multiLine) {\n        var _fieldFormattedValues;\n        element = document.createElement(\"textarea\");\n        element.textContent = (_fieldFormattedValues = fieldFormattedValues) !== null && _fieldFormattedValues !== void 0 ? _fieldFormattedValues : textContent;\n        if (this.data.doNotScroll) {\n          element.style.overflowY = \"hidden\";\n        }\n      } else {\n        var _fieldFormattedValues2;\n        element = document.createElement(\"input\");\n        element.type = \"text\";\n        element.setAttribute(\"value\", (_fieldFormattedValues2 = fieldFormattedValues) !== null && _fieldFormattedValues2 !== void 0 ? _fieldFormattedValues2 : textContent);\n        if (this.data.doNotScroll) {\n          element.style.overflowX = \"hidden\";\n        }\n      }\n      if (this.data.hasOwnCanvas) {\n        element.hidden = true;\n      }\n      GetElementsByNameSet.add(element);\n      element.setAttribute(\"data-element-id\", id);\n      element.disabled = this.data.readOnly;\n      element.name = this.data.fieldName;\n      element.tabIndex = DEFAULT_TAB_INDEX;\n      this._setRequired(element, this.data.required);\n      if (maxLen) {\n        element.maxLength = maxLen;\n      }\n      element.addEventListener(\"input\", event => {\n        storage.setValue(id, {\n          value: event.target.value\n        });\n        this.setPropertyOnSiblings(element, \"value\", event.target.value, \"value\");\n        elementData.formattedValue = null;\n      });\n      element.addEventListener(\"resetform\", event => {\n        var _this$data$defaultFie;\n        const defaultValue = (_this$data$defaultFie = this.data.defaultFieldValue) !== null && _this$data$defaultFie !== void 0 ? _this$data$defaultFie : \"\";\n        element.value = elementData.userValue = defaultValue;\n        elementData.formattedValue = null;\n      });\n      let blurListener = event => {\n        const formattedValue = elementData.formattedValue;\n        if (formattedValue !== null && formattedValue !== undefined) {\n          event.target.value = formattedValue;\n        }\n        event.target.scrollLeft = 0;\n      };\n      if (this.enableScripting && this.hasJSActions) {\n        var _this$data$actions6;\n        element.addEventListener(\"focus\", event => {\n          var _this$data$actions4;\n          if (elementData.focused) {\n            return;\n          }\n          const target = event.target;\n          if (elementData.userValue) {\n            target.value = elementData.userValue;\n          }\n          elementData.lastCommittedValue = target.value;\n          elementData.commitKey = 1;\n          if (!((_this$data$actions4 = this.data.actions) !== null && _this$data$actions4 !== void 0 && _this$data$actions4.Focus)) {\n            elementData.focused = true;\n          }\n        });\n        element.addEventListener(\"updatefromsandbox\", jsEvent => {\n          this.showElementAndHideCanvas(jsEvent.target);\n          const actions = {\n            value(event) {\n              var _event$detail$value;\n              elementData.userValue = (_event$detail$value = event.detail.value) !== null && _event$detail$value !== void 0 ? _event$detail$value : \"\";\n              storage.setValue(id, {\n                value: elementData.userValue.toString()\n              });\n              event.target.value = elementData.userValue;\n            },\n            formattedValue(event) {\n              const formattedValue = event.detail.formattedValue;\n              elementData.formattedValue = formattedValue;\n              if (formattedValue !== null && formattedValue !== undefined && event.target !== document.activeElement) {\n                event.target.value = formattedValue;\n              }\n              storage.setValue(id, {\n                formattedValue\n              });\n            },\n            selRange(event) {\n              event.target.setSelectionRange(...event.detail.selRange);\n            },\n            charLimit: event => {\n              var _this$linkService$eve6;\n              const charLimit = event.detail.charLimit;\n              const target = event.target;\n              if (charLimit === 0) {\n                target.removeAttribute(\"maxLength\");\n                return;\n              }\n              target.setAttribute(\"maxLength\", charLimit);\n              let value = elementData.userValue;\n              if (!value || value.length <= charLimit) {\n                return;\n              }\n              value = value.slice(0, charLimit);\n              target.value = elementData.userValue = value;\n              storage.setValue(id, {\n                value\n              });\n              (_this$linkService$eve6 = this.linkService.eventBus) === null || _this$linkService$eve6 === void 0 ? void 0 : _this$linkService$eve6.dispatch(\"dispatcheventinsandbox\", {\n                source: this,\n                detail: {\n                  id,\n                  name: \"Keystroke\",\n                  value,\n                  willCommit: true,\n                  commitKey: 1,\n                  selStart: target.selectionStart,\n                  selEnd: target.selectionEnd\n                }\n              });\n            }\n          };\n          this._dispatchEventFromSandbox(actions, jsEvent);\n        });\n        element.addEventListener(\"keydown\", event => {\n          var _this$linkService$eve7;\n          elementData.commitKey = 1;\n          let commitKey = -1;\n          if (event.key === \"Escape\") {\n            commitKey = 0;\n          } else if (event.key === \"Enter\" && !this.data.multiLine) {\n            commitKey = 2;\n          } else if (event.key === \"Tab\") {\n            elementData.commitKey = 3;\n          }\n          if (commitKey === -1) {\n            return;\n          }\n          const value = event.target.value;\n          if (elementData.lastCommittedValue === value) {\n            return;\n          }\n          elementData.lastCommittedValue = value;\n          elementData.userValue = value;\n          (_this$linkService$eve7 = this.linkService.eventBus) === null || _this$linkService$eve7 === void 0 ? void 0 : _this$linkService$eve7.dispatch(\"dispatcheventinsandbox\", {\n            source: this,\n            detail: {\n              id,\n              name: \"Keystroke\",\n              value,\n              willCommit: true,\n              commitKey,\n              selStart: event.target.selectionStart,\n              selEnd: event.target.selectionEnd\n            }\n          });\n        });\n        const _blurListener = blurListener;\n        blurListener = null;\n        element.addEventListener(\"blur\", event => {\n          var _this$data$actions5;\n          if (!elementData.focused || !event.relatedTarget) {\n            return;\n          }\n          if (!((_this$data$actions5 = this.data.actions) !== null && _this$data$actions5 !== void 0 && _this$data$actions5.Blur)) {\n            elementData.focused = false;\n          }\n          const value = event.target.value;\n          elementData.userValue = value;\n          if (elementData.lastCommittedValue !== value) {\n            var _this$linkService$eve8;\n            (_this$linkService$eve8 = this.linkService.eventBus) === null || _this$linkService$eve8 === void 0 ? void 0 : _this$linkService$eve8.dispatch(\"dispatcheventinsandbox\", {\n              source: this,\n              detail: {\n                id,\n                name: \"Keystroke\",\n                value,\n                willCommit: true,\n                commitKey: elementData.commitKey,\n                selStart: event.target.selectionStart,\n                selEnd: event.target.selectionEnd\n              }\n            });\n          }\n          _blurListener(event);\n        });\n        if ((_this$data$actions6 = this.data.actions) !== null && _this$data$actions6 !== void 0 && _this$data$actions6.Keystroke) {\n          element.addEventListener(\"beforeinput\", event => {\n            var _this$linkService$eve9;\n            elementData.lastCommittedValue = null;\n            const data = event.data,\n              target = event.target;\n            const value = target.value,\n              selectionStart = target.selectionStart,\n              selectionEnd = target.selectionEnd;\n            let selStart = selectionStart,\n              selEnd = selectionEnd;\n            switch (event.inputType) {\n              case \"deleteWordBackward\":\n                {\n                  const match = value.substring(0, selectionStart).match(/\\w*[^\\w]*$/);\n                  if (match) {\n                    selStart -= match[0].length;\n                  }\n                  break;\n                }\n              case \"deleteWordForward\":\n                {\n                  const match = value.substring(selectionStart).match(/^[^\\w]*\\w*/);\n                  if (match) {\n                    selEnd += match[0].length;\n                  }\n                  break;\n                }\n              case \"deleteContentBackward\":\n                if (selectionStart === selectionEnd) {\n                  selStart -= 1;\n                }\n                break;\n              case \"deleteContentForward\":\n                if (selectionStart === selectionEnd) {\n                  selEnd += 1;\n                }\n                break;\n            }\n            event.preventDefault();\n            (_this$linkService$eve9 = this.linkService.eventBus) === null || _this$linkService$eve9 === void 0 ? void 0 : _this$linkService$eve9.dispatch(\"dispatcheventinsandbox\", {\n              source: this,\n              detail: {\n                id,\n                name: \"Keystroke\",\n                value,\n                change: data || \"\",\n                willCommit: false,\n                selStart,\n                selEnd\n              }\n            });\n          });\n        }\n        this._setEventListeners(element, elementData, [[\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], event => event.target.value);\n      }\n      if (blurListener) {\n        element.addEventListener(\"blur\", blurListener);\n      }\n      if (this.data.comb) {\n        const fieldWidth = this.data.rect[2] - this.data.rect[0];\n        const combWidth = fieldWidth / maxLen;\n        element.classList.add(\"comb\");\n        element.style.letterSpacing = `calc(${combWidth}px * var(--scale-factor) - 1ch)`;\n      }\n    } else {\n      element = document.createElement(\"div\");\n      element.textContent = this.data.fieldValue;\n      element.style.verticalAlign = \"middle\";\n      element.style.display = \"table-cell\";\n      if (this.data.hasOwnCanvas) {\n        element.hidden = true;\n      }\n    }\n    this._setTextStyle(element);\n    this._setBackgroundColor(element);\n    this._setDefaultPropertiesFromJS(element);\n    this.container.append(element);\n    return this.container;\n  }\n}\nclass SignatureWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    super(parameters, {\n      isRenderable: !!parameters.data.hasOwnCanvas\n    });\n  }\n}\nclass CheckboxWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    super(parameters, {\n      isRenderable: parameters.renderForms\n    });\n  }\n  render() {\n    const storage = this.annotationStorage;\n    const data = this.data;\n    const id = data.id;\n    let value = storage.getValue(id, {\n      value: data.exportValue === data.fieldValue\n    }).value;\n    if (typeof value === \"string\") {\n      value = value !== \"Off\";\n      storage.setValue(id, {\n        value\n      });\n    }\n    this.container.classList.add(\"buttonWidgetAnnotation\", \"checkBox\");\n    const element = document.createElement(\"input\");\n    GetElementsByNameSet.add(element);\n    element.setAttribute(\"data-element-id\", id);\n    element.disabled = data.readOnly;\n    this._setRequired(element, this.data.required);\n    element.type = \"checkbox\";\n    element.name = data.fieldName;\n    if (value) {\n      element.setAttribute(\"checked\", true);\n    }\n    element.setAttribute(\"exportValue\", data.exportValue);\n    element.tabIndex = DEFAULT_TAB_INDEX;\n    element.addEventListener(\"change\", event => {\n      const _event$target = event.target,\n        name = _event$target.name,\n        checked = _event$target.checked;\n      for (const checkbox of this._getElementsByName(name, id)) {\n        const curChecked = checked && checkbox.exportValue === data.exportValue;\n        if (checkbox.domElement) {\n          checkbox.domElement.checked = curChecked;\n        }\n        storage.setValue(checkbox.id, {\n          value: curChecked\n        });\n      }\n      storage.setValue(id, {\n        value: checked\n      });\n    });\n    element.addEventListener(\"resetform\", event => {\n      const defaultValue = data.defaultFieldValue || \"Off\";\n      event.target.checked = defaultValue === data.exportValue;\n    });\n    if (this.enableScripting && this.hasJSActions) {\n      element.addEventListener(\"updatefromsandbox\", jsEvent => {\n        const actions = {\n          value(event) {\n            event.target.checked = event.detail.value !== \"Off\";\n            storage.setValue(id, {\n              value: event.target.checked\n            });\n          }\n        };\n        this._dispatchEventFromSandbox(actions, jsEvent);\n      });\n      this._setEventListeners(element, null, [[\"change\", \"Validate\"], [\"change\", \"Action\"], [\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], event => event.target.checked);\n    }\n    this._setBackgroundColor(element);\n    this._setDefaultPropertiesFromJS(element);\n    this.container.append(element);\n    return this.container;\n  }\n}\nclass RadioButtonWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    super(parameters, {\n      isRenderable: parameters.renderForms\n    });\n  }\n  render() {\n    this.container.classList.add(\"buttonWidgetAnnotation\", \"radioButton\");\n    const storage = this.annotationStorage;\n    const data = this.data;\n    const id = data.id;\n    let value = storage.getValue(id, {\n      value: data.fieldValue === data.buttonValue\n    }).value;\n    if (typeof value === \"string\") {\n      value = value !== data.buttonValue;\n      storage.setValue(id, {\n        value\n      });\n    }\n    if (value) {\n      for (const radio of this._getElementsByName(data.fieldName, id)) {\n        storage.setValue(radio.id, {\n          value: false\n        });\n      }\n    }\n    const element = document.createElement(\"input\");\n    GetElementsByNameSet.add(element);\n    element.setAttribute(\"data-element-id\", id);\n    element.disabled = data.readOnly;\n    this._setRequired(element, this.data.required);\n    element.type = \"radio\";\n    element.name = data.fieldName;\n    if (value) {\n      element.setAttribute(\"checked\", true);\n    }\n    element.tabIndex = DEFAULT_TAB_INDEX;\n    element.addEventListener(\"change\", event => {\n      const _event$target2 = event.target,\n        name = _event$target2.name,\n        checked = _event$target2.checked;\n      for (const radio of this._getElementsByName(name, id)) {\n        storage.setValue(radio.id, {\n          value: false\n        });\n      }\n      storage.setValue(id, {\n        value: checked\n      });\n    });\n    element.addEventListener(\"resetform\", event => {\n      const defaultValue = data.defaultFieldValue;\n      event.target.checked = defaultValue !== null && defaultValue !== undefined && defaultValue === data.buttonValue;\n    });\n    if (this.enableScripting && this.hasJSActions) {\n      const pdfButtonValue = data.buttonValue;\n      element.addEventListener(\"updatefromsandbox\", jsEvent => {\n        const actions = {\n          value: event => {\n            const checked = pdfButtonValue === event.detail.value;\n            for (const radio of this._getElementsByName(event.target.name)) {\n              const curChecked = checked && radio.id === id;\n              if (radio.domElement) {\n                radio.domElement.checked = curChecked;\n              }\n              storage.setValue(radio.id, {\n                value: curChecked\n              });\n            }\n          }\n        };\n        this._dispatchEventFromSandbox(actions, jsEvent);\n      });\n      this._setEventListeners(element, null, [[\"change\", \"Validate\"], [\"change\", \"Action\"], [\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], event => event.target.checked);\n    }\n    this._setBackgroundColor(element);\n    this._setDefaultPropertiesFromJS(element);\n    this.container.append(element);\n    return this.container;\n  }\n}\nclass PushButtonWidgetAnnotationElement extends LinkAnnotationElement {\n  constructor(parameters) {\n    super(parameters, {\n      ignoreBorder: parameters.data.hasAppearance\n    });\n  }\n  render() {\n    const container = super.render();\n    container.classList.add(\"buttonWidgetAnnotation\", \"pushButton\");\n    const linkElement = container.lastChild;\n    if (this.enableScripting && this.hasJSActions && linkElement) {\n      this._setDefaultPropertiesFromJS(linkElement);\n      linkElement.addEventListener(\"updatefromsandbox\", jsEvent => {\n        this._dispatchEventFromSandbox({}, jsEvent);\n      });\n    }\n    return container;\n  }\n}\nclass ChoiceWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    super(parameters, {\n      isRenderable: parameters.renderForms\n    });\n  }\n  render() {\n    this.container.classList.add(\"choiceWidgetAnnotation\");\n    const storage = this.annotationStorage;\n    const id = this.data.id;\n    const storedData = storage.getValue(id, {\n      value: this.data.fieldValue\n    });\n    const selectElement = document.createElement(\"select\");\n    GetElementsByNameSet.add(selectElement);\n    selectElement.setAttribute(\"data-element-id\", id);\n    selectElement.disabled = this.data.readOnly;\n    this._setRequired(selectElement, this.data.required);\n    selectElement.name = this.data.fieldName;\n    selectElement.tabIndex = DEFAULT_TAB_INDEX;\n    let addAnEmptyEntry = this.data.combo && this.data.options.length > 0;\n    if (!this.data.combo) {\n      selectElement.size = this.data.options.length;\n      if (this.data.multiSelect) {\n        selectElement.multiple = true;\n      }\n    }\n    selectElement.addEventListener(\"resetform\", event => {\n      const defaultValue = this.data.defaultFieldValue;\n      for (const option of selectElement.options) {\n        option.selected = option.value === defaultValue;\n      }\n    });\n    for (const option of this.data.options) {\n      const optionElement = document.createElement(\"option\");\n      optionElement.textContent = option.displayValue;\n      optionElement.value = option.exportValue;\n      if (storedData.value.includes(option.exportValue)) {\n        optionElement.setAttribute(\"selected\", true);\n        addAnEmptyEntry = false;\n      }\n      selectElement.append(optionElement);\n    }\n    let removeEmptyEntry = null;\n    if (addAnEmptyEntry) {\n      const noneOptionElement = document.createElement(\"option\");\n      noneOptionElement.value = \" \";\n      noneOptionElement.setAttribute(\"hidden\", true);\n      noneOptionElement.setAttribute(\"selected\", true);\n      selectElement.prepend(noneOptionElement);\n      removeEmptyEntry = () => {\n        noneOptionElement.remove();\n        selectElement.removeEventListener(\"input\", removeEmptyEntry);\n        removeEmptyEntry = null;\n      };\n      selectElement.addEventListener(\"input\", removeEmptyEntry);\n    }\n    const getValue = isExport => {\n      const name = isExport ? \"value\" : \"textContent\";\n      const options = selectElement.options,\n        multiple = selectElement.multiple;\n      if (!multiple) {\n        return options.selectedIndex === -1 ? null : options[options.selectedIndex][name];\n      }\n      return Array.prototype.filter.call(options, option => option.selected).map(option => option[name]);\n    };\n    let selectedValues = getValue(false);\n    const getItems = event => {\n      const options = event.target.options;\n      return Array.prototype.map.call(options, option => ({\n        displayValue: option.textContent,\n        exportValue: option.value\n      }));\n    };\n    if (this.enableScripting && this.hasJSActions) {\n      selectElement.addEventListener(\"updatefromsandbox\", jsEvent => {\n        const actions = {\n          value(event) {\n            var _removeEmptyEntry;\n            (_removeEmptyEntry = removeEmptyEntry) === null || _removeEmptyEntry === void 0 ? void 0 : _removeEmptyEntry();\n            const value = event.detail.value;\n            const values = new Set(Array.isArray(value) ? value : [value]);\n            for (const option of selectElement.options) {\n              option.selected = values.has(option.value);\n            }\n            storage.setValue(id, {\n              value: getValue(true)\n            });\n            selectedValues = getValue(false);\n          },\n          multipleSelection(event) {\n            selectElement.multiple = true;\n          },\n          remove(event) {\n            const options = selectElement.options;\n            const index = event.detail.remove;\n            options[index].selected = false;\n            selectElement.remove(index);\n            if (options.length > 0) {\n              const i = Array.prototype.findIndex.call(options, option => option.selected);\n              if (i === -1) {\n                options[0].selected = true;\n              }\n            }\n            storage.setValue(id, {\n              value: getValue(true),\n              items: getItems(event)\n            });\n            selectedValues = getValue(false);\n          },\n          clear(event) {\n            while (selectElement.length !== 0) {\n              selectElement.remove(0);\n            }\n            storage.setValue(id, {\n              value: null,\n              items: []\n            });\n            selectedValues = getValue(false);\n          },\n          insert(event) {\n            const _event$detail$insert = event.detail.insert,\n              index = _event$detail$insert.index,\n              displayValue = _event$detail$insert.displayValue,\n              exportValue = _event$detail$insert.exportValue;\n            const selectChild = selectElement.children[index];\n            const optionElement = document.createElement(\"option\");\n            optionElement.textContent = displayValue;\n            optionElement.value = exportValue;\n            if (selectChild) {\n              selectChild.before(optionElement);\n            } else {\n              selectElement.append(optionElement);\n            }\n            storage.setValue(id, {\n              value: getValue(true),\n              items: getItems(event)\n            });\n            selectedValues = getValue(false);\n          },\n          items(event) {\n            const items = event.detail.items;\n            while (selectElement.length !== 0) {\n              selectElement.remove(0);\n            }\n            for (const item of items) {\n              const displayValue = item.displayValue,\n                exportValue = item.exportValue;\n              const optionElement = document.createElement(\"option\");\n              optionElement.textContent = displayValue;\n              optionElement.value = exportValue;\n              selectElement.append(optionElement);\n            }\n            if (selectElement.options.length > 0) {\n              selectElement.options[0].selected = true;\n            }\n            storage.setValue(id, {\n              value: getValue(true),\n              items: getItems(event)\n            });\n            selectedValues = getValue(false);\n          },\n          indices(event) {\n            const indices = new Set(event.detail.indices);\n            for (const option of event.target.options) {\n              option.selected = indices.has(option.index);\n            }\n            storage.setValue(id, {\n              value: getValue(true)\n            });\n            selectedValues = getValue(false);\n          },\n          editable(event) {\n            event.target.disabled = !event.detail.editable;\n          }\n        };\n        this._dispatchEventFromSandbox(actions, jsEvent);\n      });\n      selectElement.addEventListener(\"input\", event => {\n        var _this$linkService$eve0;\n        const exportValue = getValue(true);\n        const change = getValue(false);\n        storage.setValue(id, {\n          value: exportValue\n        });\n        event.preventDefault();\n        (_this$linkService$eve0 = this.linkService.eventBus) === null || _this$linkService$eve0 === void 0 ? void 0 : _this$linkService$eve0.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id,\n            name: \"Keystroke\",\n            value: selectedValues,\n            change,\n            changeEx: exportValue,\n            willCommit: false,\n            commitKey: 1,\n            keyDown: false\n          }\n        });\n      });\n      this._setEventListeners(selectElement, null, [[\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"], [\"input\", \"Action\"], [\"input\", \"Validate\"]], event => event.target.value);\n    } else {\n      selectElement.addEventListener(\"input\", function (event) {\n        storage.setValue(id, {\n          value: getValue(true)\n        });\n      });\n    }\n    if (this.data.combo) {\n      this._setTextStyle(selectElement);\n    } else {}\n    this._setBackgroundColor(selectElement);\n    this._setDefaultPropertiesFromJS(selectElement);\n    this.container.append(selectElement);\n    return this.container;\n  }\n}\nclass PopupAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const data = parameters.data,\n      elements = parameters.elements;\n    super(parameters, {\n      isRenderable: AnnotationElement._hasPopupData(data)\n    });\n    this.elements = elements;\n    this.popup = null;\n  }\n  render() {\n    this.container.classList.add(\"popupAnnotation\");\n    const popup = this.popup = new PopupElement({\n      container: this.container,\n      color: this.data.color,\n      titleObj: this.data.titleObj,\n      modificationDate: this.data.modificationDate,\n      contentsObj: this.data.contentsObj,\n      richText: this.data.richText,\n      rect: this.data.rect,\n      parentRect: this.data.parentRect || null,\n      parent: this.parent,\n      elements: this.elements,\n      open: this.data.open\n    });\n    const elementIds = [];\n    for (const element of this.elements) {\n      element.popup = popup;\n      element.container.ariaHasPopup = \"dialog\";\n      elementIds.push(element.data.id);\n      element.addHighlightArea();\n    }\n    this.container.setAttribute(\"aria-controls\", elementIds.map(id => `${AnnotationPrefix}${id}`).join(\",\"));\n    return this.container;\n  }\n}\nvar _boundKeyDown = /*#__PURE__*/_classPrivateFieldLooseKey(\"boundKeyDown\");\nvar _boundHide = /*#__PURE__*/_classPrivateFieldLooseKey(\"boundHide\");\nvar _boundShow = /*#__PURE__*/_classPrivateFieldLooseKey(\"boundShow\");\nvar _boundToggle = /*#__PURE__*/_classPrivateFieldLooseKey(\"boundToggle\");\nvar _color = /*#__PURE__*/_classPrivateFieldLooseKey(\"color\");\nvar _container3 = /*#__PURE__*/_classPrivateFieldLooseKey(\"container\");\nvar _contentsObj = /*#__PURE__*/_classPrivateFieldLooseKey(\"contentsObj\");\nvar _dateObj = /*#__PURE__*/_classPrivateFieldLooseKey(\"dateObj\");\nvar _elements = /*#__PURE__*/_classPrivateFieldLooseKey(\"elements\");\nvar _parent = /*#__PURE__*/_classPrivateFieldLooseKey(\"parent\");\nvar _parentRect = /*#__PURE__*/_classPrivateFieldLooseKey(\"parentRect\");\nvar _pinned = /*#__PURE__*/_classPrivateFieldLooseKey(\"pinned\");\nvar _popup = /*#__PURE__*/_classPrivateFieldLooseKey(\"popup\");\nvar _position2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"position\");\nvar _rect2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"rect\");\nvar _richText = /*#__PURE__*/_classPrivateFieldLooseKey(\"richText\");\nvar _titleObj = /*#__PURE__*/_classPrivateFieldLooseKey(\"titleObj\");\nvar _updates2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"updates\");\nvar _wasVisible = /*#__PURE__*/_classPrivateFieldLooseKey(\"wasVisible\");\nvar _html = /*#__PURE__*/_classPrivateFieldLooseKey(\"html\");\nvar _fontSize = /*#__PURE__*/_classPrivateFieldLooseKey(\"fontSize\");\nvar _fontColor = /*#__PURE__*/_classPrivateFieldLooseKey(\"fontColor\");\nvar _makePopupContent = /*#__PURE__*/_classPrivateFieldLooseKey(\"makePopupContent\");\nvar _keyDown = /*#__PURE__*/_classPrivateFieldLooseKey(\"keyDown\");\nvar _setPosition = /*#__PURE__*/_classPrivateFieldLooseKey(\"setPosition\");\nvar _toggle = /*#__PURE__*/_classPrivateFieldLooseKey(\"toggle\");\nvar _show = /*#__PURE__*/_classPrivateFieldLooseKey(\"show\");\nvar _hide = /*#__PURE__*/_classPrivateFieldLooseKey(\"hide\");\nclass PopupElement {\n  constructor(_ref134) {\n    let container = _ref134.container,\n      color = _ref134.color,\n      elements = _ref134.elements,\n      titleObj = _ref134.titleObj,\n      modificationDate = _ref134.modificationDate,\n      _contentsObj2 = _ref134.contentsObj,\n      _richText2 = _ref134.richText,\n      parent = _ref134.parent,\n      _rect3 = _ref134.rect,\n      parentRect = _ref134.parentRect,\n      open = _ref134.open;\n    Object.defineProperty(this, _hide, {\n      value: _hide2\n    });\n    Object.defineProperty(this, _show, {\n      value: _show2\n    });\n    Object.defineProperty(this, _toggle, {\n      value: _toggle2\n    });\n    Object.defineProperty(this, _setPosition, {\n      value: _setPosition2\n    });\n    Object.defineProperty(this, _keyDown, {\n      value: _keyDown2\n    });\n    Object.defineProperty(this, _makePopupContent, {\n      value: _makePopupContent2\n    });\n    Object.defineProperty(this, _fontColor, {\n      get: _get_fontColor,\n      set: void 0\n    });\n    Object.defineProperty(this, _fontSize, {\n      get: _get_fontSize,\n      set: void 0\n    });\n    Object.defineProperty(this, _html, {\n      get: _get_html,\n      set: void 0\n    });\n    Object.defineProperty(this, _boundKeyDown, {\n      writable: true,\n      value: _classPrivateFieldLooseBase(this, _keyDown)[_keyDown].bind(this)\n    });\n    Object.defineProperty(this, _boundHide, {\n      writable: true,\n      value: _classPrivateFieldLooseBase(this, _hide)[_hide].bind(this)\n    });\n    Object.defineProperty(this, _boundShow, {\n      writable: true,\n      value: _classPrivateFieldLooseBase(this, _show)[_show].bind(this)\n    });\n    Object.defineProperty(this, _boundToggle, {\n      writable: true,\n      value: _classPrivateFieldLooseBase(this, _toggle)[_toggle].bind(this)\n    });\n    Object.defineProperty(this, _color, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _container3, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _contentsObj, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _dateObj, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _elements, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _parent, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _parentRect, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _pinned, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _popup, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _position2, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _rect2, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _richText, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _titleObj, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _updates2, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _wasVisible, {\n      writable: true,\n      value: false\n    });\n    _classPrivateFieldLooseBase(this, _container3)[_container3] = container;\n    _classPrivateFieldLooseBase(this, _titleObj)[_titleObj] = titleObj;\n    _classPrivateFieldLooseBase(this, _contentsObj)[_contentsObj] = _contentsObj2;\n    _classPrivateFieldLooseBase(this, _richText)[_richText] = _richText2;\n    _classPrivateFieldLooseBase(this, _parent)[_parent] = parent;\n    _classPrivateFieldLooseBase(this, _color)[_color] = color;\n    _classPrivateFieldLooseBase(this, _rect2)[_rect2] = _rect3;\n    _classPrivateFieldLooseBase(this, _parentRect)[_parentRect] = parentRect;\n    _classPrivateFieldLooseBase(this, _elements)[_elements] = elements;\n    _classPrivateFieldLooseBase(this, _dateObj)[_dateObj] = PDFDateString.toDateObject(modificationDate);\n    this.trigger = elements.flatMap(e => e.getElementsToTriggerPopup());\n    for (const element of this.trigger) {\n      element.addEventListener(\"click\", _classPrivateFieldLooseBase(this, _boundToggle)[_boundToggle]);\n      element.addEventListener(\"mouseenter\", _classPrivateFieldLooseBase(this, _boundShow)[_boundShow]);\n      element.addEventListener(\"mouseleave\", _classPrivateFieldLooseBase(this, _boundHide)[_boundHide]);\n      element.classList.add(\"popupTriggerArea\");\n    }\n    for (const element of elements) {\n      var _element$container;\n      (_element$container = element.container) === null || _element$container === void 0 ? void 0 : _element$container.addEventListener(\"keydown\", _classPrivateFieldLooseBase(this, _boundKeyDown)[_boundKeyDown]);\n    }\n    _classPrivateFieldLooseBase(this, _container3)[_container3].hidden = true;\n    if (open) {\n      _classPrivateFieldLooseBase(this, _toggle)[_toggle]();\n    }\n  }\n  render() {\n    if (_classPrivateFieldLooseBase(this, _popup)[_popup]) {\n      return;\n    }\n    const popup = _classPrivateFieldLooseBase(this, _popup)[_popup] = document.createElement(\"div\");\n    popup.className = \"popup\";\n    if (_classPrivateFieldLooseBase(this, _color)[_color]) {\n      const baseColor = popup.style.outlineColor = Util.makeHexColor(..._classPrivateFieldLooseBase(this, _color)[_color]);\n      if (CSS.supports(\"background-color\", \"color-mix(in srgb, red 30%, white)\")) {\n        popup.style.backgroundColor = `color-mix(in srgb, ${baseColor} 30%, white)`;\n      } else {\n        const BACKGROUND_ENLIGHT = 0.7;\n        popup.style.backgroundColor = Util.makeHexColor(..._classPrivateFieldLooseBase(this, _color)[_color].map(c => Math.floor(BACKGROUND_ENLIGHT * (255 - c) + c)));\n      }\n    }\n    const header = document.createElement(\"span\");\n    header.className = \"header\";\n    const title = document.createElement(\"h1\");\n    header.append(title);\n    var _classPrivateFieldLoo70 = _classPrivateFieldLooseBase(this, _titleObj)[_titleObj];\n    title.dir = _classPrivateFieldLoo70.dir;\n    title.textContent = _classPrivateFieldLoo70.str;\n    popup.append(header);\n    if (_classPrivateFieldLooseBase(this, _dateObj)[_dateObj]) {\n      const modificationDate = document.createElement(\"span\");\n      modificationDate.classList.add(\"popupDate\");\n      modificationDate.setAttribute(\"data-l10n-id\", \"pdfjs-annotation-date-time-string\");\n      modificationDate.setAttribute(\"data-l10n-args\", JSON.stringify({\n        dateObj: _classPrivateFieldLooseBase(this, _dateObj)[_dateObj].valueOf()\n      }));\n      header.append(modificationDate);\n    }\n    const html = _classPrivateFieldLooseBase(this, _html)[_html];\n    if (html) {\n      XfaLayer.render({\n        xfaHtml: html,\n        intent: \"richText\",\n        div: popup\n      });\n      popup.lastChild.classList.add(\"richText\", \"popupContent\");\n    } else {\n      const contents = this._formatContents(_classPrivateFieldLooseBase(this, _contentsObj)[_contentsObj]);\n      popup.append(contents);\n    }\n    _classPrivateFieldLooseBase(this, _container3)[_container3].append(popup);\n  }\n  _formatContents(_ref135) {\n    let str = _ref135.str,\n      dir = _ref135.dir;\n    const p = document.createElement(\"p\");\n    p.classList.add(\"popupContent\");\n    p.dir = dir;\n    const lines = str.split(/(?:\\r\\n?|\\n)/);\n    for (let i = 0, ii = lines.length; i < ii; ++i) {\n      const line = lines[i];\n      p.append(document.createTextNode(line));\n      if (i < ii - 1) {\n        p.append(document.createElement(\"br\"));\n      }\n    }\n    return p;\n  }\n  updateEdited(_ref136) {\n    var _classPrivateFieldLoo71, _classPrivateFieldLoo72;\n    let rect = _ref136.rect,\n      popupContent = _ref136.popupContent;\n    (_classPrivateFieldLoo71 = _classPrivateFieldLooseBase(this, _updates2))[_updates2] || (_classPrivateFieldLoo71[_updates2] = {\n      contentsObj: _classPrivateFieldLooseBase(this, _contentsObj)[_contentsObj],\n      richText: _classPrivateFieldLooseBase(this, _richText)[_richText]\n    });\n    if (rect) {\n      _classPrivateFieldLooseBase(this, _position2)[_position2] = null;\n    }\n    if (popupContent) {\n      _classPrivateFieldLooseBase(this, _richText)[_richText] = _classPrivateFieldLooseBase(this, _makePopupContent)[_makePopupContent](popupContent);\n      _classPrivateFieldLooseBase(this, _contentsObj)[_contentsObj] = null;\n    }\n    (_classPrivateFieldLoo72 = _classPrivateFieldLooseBase(this, _popup)[_popup]) === null || _classPrivateFieldLoo72 === void 0 ? void 0 : _classPrivateFieldLoo72.remove();\n    _classPrivateFieldLooseBase(this, _popup)[_popup] = null;\n  }\n  resetEdited() {\n    var _classPrivateFieldLoo74;\n    if (!_classPrivateFieldLooseBase(this, _updates2)[_updates2]) {\n      return;\n    }\n    var _classPrivateFieldLoo73 = _classPrivateFieldLooseBase(this, _updates2)[_updates2];\n    _classPrivateFieldLooseBase(this, _contentsObj)[_contentsObj] = _classPrivateFieldLoo73.contentsObj;\n    _classPrivateFieldLooseBase(this, _richText)[_richText] = _classPrivateFieldLoo73.richText;\n    _classPrivateFieldLooseBase(this, _updates2)[_updates2] = null;\n    (_classPrivateFieldLoo74 = _classPrivateFieldLooseBase(this, _popup)[_popup]) === null || _classPrivateFieldLoo74 === void 0 ? void 0 : _classPrivateFieldLoo74.remove();\n    _classPrivateFieldLooseBase(this, _popup)[_popup] = null;\n    _classPrivateFieldLooseBase(this, _position2)[_position2] = null;\n  }\n  forceHide() {\n    _classPrivateFieldLooseBase(this, _wasVisible)[_wasVisible] = this.isVisible;\n    if (!_classPrivateFieldLooseBase(this, _wasVisible)[_wasVisible]) {\n      return;\n    }\n    _classPrivateFieldLooseBase(this, _container3)[_container3].hidden = true;\n  }\n  maybeShow() {\n    if (!_classPrivateFieldLooseBase(this, _wasVisible)[_wasVisible]) {\n      return;\n    }\n    if (!_classPrivateFieldLooseBase(this, _popup)[_popup]) {\n      _classPrivateFieldLooseBase(this, _show)[_show]();\n    }\n    _classPrivateFieldLooseBase(this, _wasVisible)[_wasVisible] = false;\n    _classPrivateFieldLooseBase(this, _container3)[_container3].hidden = false;\n  }\n  get isVisible() {\n    return _classPrivateFieldLooseBase(this, _container3)[_container3].hidden === false;\n  }\n}\nfunction _get_html() {\n  const richText = _classPrivateFieldLooseBase(this, _richText)[_richText];\n  const contentsObj = _classPrivateFieldLooseBase(this, _contentsObj)[_contentsObj];\n  if (richText !== null && richText !== void 0 && richText.str && (!(contentsObj !== null && contentsObj !== void 0 && contentsObj.str) || contentsObj.str === richText.str)) {\n    return _classPrivateFieldLooseBase(this, _richText)[_richText].html || null;\n  }\n  return null;\n}\nfunction _get_fontSize() {\n  var _classPrivateFieldLoo145, _classPrivateFieldLoo146, _classPrivateFieldLoo147;\n  return ((_classPrivateFieldLoo145 = _classPrivateFieldLooseBase(this, _html)[_html]) === null || _classPrivateFieldLoo145 === void 0 ? void 0 : (_classPrivateFieldLoo146 = _classPrivateFieldLoo145.attributes) === null || _classPrivateFieldLoo146 === void 0 ? void 0 : (_classPrivateFieldLoo147 = _classPrivateFieldLoo146.style) === null || _classPrivateFieldLoo147 === void 0 ? void 0 : _classPrivateFieldLoo147.fontSize) || 0;\n}\nfunction _get_fontColor() {\n  var _classPrivateFieldLoo148, _classPrivateFieldLoo149, _classPrivateFieldLoo150;\n  return ((_classPrivateFieldLoo148 = _classPrivateFieldLooseBase(this, _html)[_html]) === null || _classPrivateFieldLoo148 === void 0 ? void 0 : (_classPrivateFieldLoo149 = _classPrivateFieldLoo148.attributes) === null || _classPrivateFieldLoo149 === void 0 ? void 0 : (_classPrivateFieldLoo150 = _classPrivateFieldLoo149.style) === null || _classPrivateFieldLoo150 === void 0 ? void 0 : _classPrivateFieldLoo150.color) || null;\n}\nfunction _makePopupContent2(text) {\n  const popupLines = [];\n  const popupContent = {\n    str: text,\n    html: {\n      name: \"div\",\n      attributes: {\n        dir: \"auto\"\n      },\n      children: [{\n        name: \"p\",\n        children: popupLines\n      }]\n    }\n  };\n  const lineAttributes = {\n    style: {\n      color: _classPrivateFieldLooseBase(this, _fontColor)[_fontColor],\n      fontSize: _classPrivateFieldLooseBase(this, _fontSize)[_fontSize] ? `calc(${_classPrivateFieldLooseBase(this, _fontSize)[_fontSize]}px * var(--scale-factor))` : \"\"\n    }\n  };\n  for (const line of text.split(\"\\n\")) {\n    popupLines.push({\n      name: \"span\",\n      value: line,\n      attributes: lineAttributes\n    });\n  }\n  return popupContent;\n}\nfunction _keyDown2(event) {\n  if (event.altKey || event.shiftKey || event.ctrlKey || event.metaKey) {\n    return;\n  }\n  if (event.key === \"Enter\" || event.key === \"Escape\" && _classPrivateFieldLooseBase(this, _pinned)[_pinned]) {\n    _classPrivateFieldLooseBase(this, _toggle)[_toggle]();\n  }\n}\nfunction _setPosition2() {\n  if (_classPrivateFieldLooseBase(this, _position2)[_position2] !== null) {\n    return;\n  }\n  const _classPrivateFieldLoo151 = _classPrivateFieldLooseBase(this, _parent)[_parent],\n    view = _classPrivateFieldLoo151.page.view,\n    _classPrivateFieldLoo152 = _classPrivateFieldLoo151.viewport.rawDims,\n    pageWidth = _classPrivateFieldLoo152.pageWidth,\n    pageHeight = _classPrivateFieldLoo152.pageHeight,\n    pageX = _classPrivateFieldLoo152.pageX,\n    pageY = _classPrivateFieldLoo152.pageY;\n  let useParentRect = !!_classPrivateFieldLooseBase(this, _parentRect)[_parentRect];\n  let rect = useParentRect ? _classPrivateFieldLooseBase(this, _parentRect)[_parentRect] : _classPrivateFieldLooseBase(this, _rect2)[_rect2];\n  for (const element of _classPrivateFieldLooseBase(this, _elements)[_elements]) {\n    if (!rect || Util.intersect(element.data.rect, rect) !== null) {\n      rect = element.data.rect;\n      useParentRect = true;\n      break;\n    }\n  }\n  const normalizedRect = Util.normalizeRect([rect[0], view[3] - rect[1] + view[1], rect[2], view[3] - rect[3] + view[1]]);\n  const HORIZONTAL_SPACE_AFTER_ANNOTATION = 5;\n  const parentWidth = useParentRect ? rect[2] - rect[0] + HORIZONTAL_SPACE_AFTER_ANNOTATION : 0;\n  const popupLeft = normalizedRect[0] + parentWidth;\n  const popupTop = normalizedRect[1];\n  _classPrivateFieldLooseBase(this, _position2)[_position2] = [100 * (popupLeft - pageX) / pageWidth, 100 * (popupTop - pageY) / pageHeight];\n  const style = _classPrivateFieldLooseBase(this, _container3)[_container3].style;\n  style.left = `${_classPrivateFieldLooseBase(this, _position2)[_position2][0]}%`;\n  style.top = `${_classPrivateFieldLooseBase(this, _position2)[_position2][1]}%`;\n}\nfunction _toggle2() {\n  _classPrivateFieldLooseBase(this, _pinned)[_pinned] = !_classPrivateFieldLooseBase(this, _pinned)[_pinned];\n  if (_classPrivateFieldLooseBase(this, _pinned)[_pinned]) {\n    _classPrivateFieldLooseBase(this, _show)[_show]();\n    _classPrivateFieldLooseBase(this, _container3)[_container3].addEventListener(\"click\", _classPrivateFieldLooseBase(this, _boundToggle)[_boundToggle]);\n    _classPrivateFieldLooseBase(this, _container3)[_container3].addEventListener(\"keydown\", _classPrivateFieldLooseBase(this, _boundKeyDown)[_boundKeyDown]);\n  } else {\n    _classPrivateFieldLooseBase(this, _hide)[_hide]();\n    _classPrivateFieldLooseBase(this, _container3)[_container3].removeEventListener(\"click\", _classPrivateFieldLooseBase(this, _boundToggle)[_boundToggle]);\n    _classPrivateFieldLooseBase(this, _container3)[_container3].removeEventListener(\"keydown\", _classPrivateFieldLooseBase(this, _boundKeyDown)[_boundKeyDown]);\n  }\n}\nfunction _show2() {\n  if (!_classPrivateFieldLooseBase(this, _popup)[_popup]) {\n    this.render();\n  }\n  if (!this.isVisible) {\n    _classPrivateFieldLooseBase(this, _setPosition)[_setPosition]();\n    _classPrivateFieldLooseBase(this, _container3)[_container3].hidden = false;\n    _classPrivateFieldLooseBase(this, _container3)[_container3].style.zIndex = parseInt(_classPrivateFieldLooseBase(this, _container3)[_container3].style.zIndex) + 1000;\n  } else if (_classPrivateFieldLooseBase(this, _pinned)[_pinned]) {\n    _classPrivateFieldLooseBase(this, _container3)[_container3].classList.add(\"focused\");\n  }\n}\nfunction _hide2() {\n  _classPrivateFieldLooseBase(this, _container3)[_container3].classList.remove(\"focused\");\n  if (_classPrivateFieldLooseBase(this, _pinned)[_pinned] || !this.isVisible) {\n    return;\n  }\n  _classPrivateFieldLooseBase(this, _container3)[_container3].hidden = true;\n  _classPrivateFieldLooseBase(this, _container3)[_container3].style.zIndex = parseInt(_classPrivateFieldLooseBase(this, _container3)[_container3].style.zIndex) - 1000;\n}\nclass FreeTextAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    super(parameters, {\n      isRenderable: true,\n      ignoreBorder: true\n    });\n    this.textContent = parameters.data.textContent;\n    this.textPosition = parameters.data.textPosition;\n    this.annotationEditorType = AnnotationEditorType.FREETEXT;\n  }\n  render() {\n    this.container.classList.add(\"freeTextAnnotation\");\n    if (this.textContent) {\n      const content = document.createElement(\"div\");\n      content.classList.add(\"annotationTextContent\");\n      content.setAttribute(\"role\", \"comment\");\n      for (const line of this.textContent) {\n        const lineSpan = document.createElement(\"span\");\n        lineSpan.textContent = line;\n        content.append(lineSpan);\n      }\n      this.container.append(content);\n    }\n    if (!this.data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    }\n    this._editOnDoubleClick();\n    return this.container;\n  }\n}\nvar _line = /*#__PURE__*/_classPrivateFieldLooseKey(\"line\");\nclass LineAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    super(parameters, {\n      isRenderable: true,\n      ignoreBorder: true\n    });\n    Object.defineProperty(this, _line, {\n      writable: true,\n      value: null\n    });\n  }\n  render() {\n    this.container.classList.add(\"lineAnnotation\");\n    const data = this.data;\n    const _getRectDims3 = getRectDims(data.rect),\n      width = _getRectDims3.width,\n      height = _getRectDims3.height;\n    const svg = this.svgFactory.create(width, height, true);\n    const line = _classPrivateFieldLooseBase(this, _line)[_line] = this.svgFactory.createElement(\"svg:line\");\n    line.setAttribute(\"x1\", data.rect[2] - data.lineCoordinates[0]);\n    line.setAttribute(\"y1\", data.rect[3] - data.lineCoordinates[1]);\n    line.setAttribute(\"x2\", data.rect[2] - data.lineCoordinates[2]);\n    line.setAttribute(\"y2\", data.rect[3] - data.lineCoordinates[3]);\n    line.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n    line.setAttribute(\"stroke\", \"transparent\");\n    line.setAttribute(\"fill\", \"transparent\");\n    svg.append(line);\n    this.container.append(svg);\n    if (!data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    }\n    return this.container;\n  }\n  getElementsToTriggerPopup() {\n    return _classPrivateFieldLooseBase(this, _line)[_line];\n  }\n  addHighlightArea() {\n    this.container.classList.add(\"highlightArea\");\n  }\n}\nvar _square = /*#__PURE__*/_classPrivateFieldLooseKey(\"square\");\nclass SquareAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    super(parameters, {\n      isRenderable: true,\n      ignoreBorder: true\n    });\n    Object.defineProperty(this, _square, {\n      writable: true,\n      value: null\n    });\n  }\n  render() {\n    this.container.classList.add(\"squareAnnotation\");\n    const data = this.data;\n    const _getRectDims4 = getRectDims(data.rect),\n      width = _getRectDims4.width,\n      height = _getRectDims4.height;\n    const svg = this.svgFactory.create(width, height, true);\n    const borderWidth = data.borderStyle.width;\n    const square = _classPrivateFieldLooseBase(this, _square)[_square] = this.svgFactory.createElement(\"svg:rect\");\n    square.setAttribute(\"x\", borderWidth / 2);\n    square.setAttribute(\"y\", borderWidth / 2);\n    square.setAttribute(\"width\", width - borderWidth);\n    square.setAttribute(\"height\", height - borderWidth);\n    square.setAttribute(\"stroke-width\", borderWidth || 1);\n    square.setAttribute(\"stroke\", \"transparent\");\n    square.setAttribute(\"fill\", \"transparent\");\n    svg.append(square);\n    this.container.append(svg);\n    if (!data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    }\n    return this.container;\n  }\n  getElementsToTriggerPopup() {\n    return _classPrivateFieldLooseBase(this, _square)[_square];\n  }\n  addHighlightArea() {\n    this.container.classList.add(\"highlightArea\");\n  }\n}\nvar _circle = /*#__PURE__*/_classPrivateFieldLooseKey(\"circle\");\nclass CircleAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    super(parameters, {\n      isRenderable: true,\n      ignoreBorder: true\n    });\n    Object.defineProperty(this, _circle, {\n      writable: true,\n      value: null\n    });\n  }\n  render() {\n    this.container.classList.add(\"circleAnnotation\");\n    const data = this.data;\n    const _getRectDims5 = getRectDims(data.rect),\n      width = _getRectDims5.width,\n      height = _getRectDims5.height;\n    const svg = this.svgFactory.create(width, height, true);\n    const borderWidth = data.borderStyle.width;\n    const circle = _classPrivateFieldLooseBase(this, _circle)[_circle] = this.svgFactory.createElement(\"svg:ellipse\");\n    circle.setAttribute(\"cx\", width / 2);\n    circle.setAttribute(\"cy\", height / 2);\n    circle.setAttribute(\"rx\", width / 2 - borderWidth / 2);\n    circle.setAttribute(\"ry\", height / 2 - borderWidth / 2);\n    circle.setAttribute(\"stroke-width\", borderWidth || 1);\n    circle.setAttribute(\"stroke\", \"transparent\");\n    circle.setAttribute(\"fill\", \"transparent\");\n    svg.append(circle);\n    this.container.append(svg);\n    if (!data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    }\n    return this.container;\n  }\n  getElementsToTriggerPopup() {\n    return _classPrivateFieldLooseBase(this, _circle)[_circle];\n  }\n  addHighlightArea() {\n    this.container.classList.add(\"highlightArea\");\n  }\n}\nvar _polyline = /*#__PURE__*/_classPrivateFieldLooseKey(\"polyline\");\nclass PolylineAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    super(parameters, {\n      isRenderable: true,\n      ignoreBorder: true\n    });\n    Object.defineProperty(this, _polyline, {\n      writable: true,\n      value: null\n    });\n    this.containerClassName = \"polylineAnnotation\";\n    this.svgElementName = \"svg:polyline\";\n  }\n  render() {\n    this.container.classList.add(this.containerClassName);\n    const _this$data = this.data,\n      rect = _this$data.rect,\n      vertices = _this$data.vertices,\n      borderStyle = _this$data.borderStyle,\n      popupRef = _this$data.popupRef;\n    if (!vertices) {\n      return this.container;\n    }\n    const _getRectDims6 = getRectDims(rect),\n      width = _getRectDims6.width,\n      height = _getRectDims6.height;\n    const svg = this.svgFactory.create(width, height, true);\n    let points = [];\n    for (let i = 0, ii = vertices.length; i < ii; i += 2) {\n      const x = vertices[i] - rect[0];\n      const y = rect[3] - vertices[i + 1];\n      points.push(`${x},${y}`);\n    }\n    points = points.join(\" \");\n    const polyline = _classPrivateFieldLooseBase(this, _polyline)[_polyline] = this.svgFactory.createElement(this.svgElementName);\n    polyline.setAttribute(\"points\", points);\n    polyline.setAttribute(\"stroke-width\", borderStyle.width || 1);\n    polyline.setAttribute(\"stroke\", \"transparent\");\n    polyline.setAttribute(\"fill\", \"transparent\");\n    svg.append(polyline);\n    this.container.append(svg);\n    if (!popupRef && this.hasPopupData) {\n      this._createPopup();\n    }\n    return this.container;\n  }\n  getElementsToTriggerPopup() {\n    return _classPrivateFieldLooseBase(this, _polyline)[_polyline];\n  }\n  addHighlightArea() {\n    this.container.classList.add(\"highlightArea\");\n  }\n}\nclass PolygonAnnotationElement extends PolylineAnnotationElement {\n  constructor(parameters) {\n    super(parameters);\n    this.containerClassName = \"polygonAnnotation\";\n    this.svgElementName = \"svg:polygon\";\n  }\n}\nclass CaretAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    super(parameters, {\n      isRenderable: true,\n      ignoreBorder: true\n    });\n  }\n  render() {\n    this.container.classList.add(\"caretAnnotation\");\n    if (!this.data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    }\n    return this.container;\n  }\n}\nvar _polylines = /*#__PURE__*/_classPrivateFieldLooseKey(\"polylines\");\nclass InkAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    super(parameters, {\n      isRenderable: true,\n      ignoreBorder: true\n    });\n    Object.defineProperty(this, _polylines, {\n      writable: true,\n      value: []\n    });\n    this.containerClassName = \"inkAnnotation\";\n    this.svgElementName = \"svg:polyline\";\n    this.annotationEditorType = this.data.it === \"InkHighlight\" ? AnnotationEditorType.HIGHLIGHT : AnnotationEditorType.INK;\n  }\n  render() {\n    this.container.classList.add(this.containerClassName);\n    const _this$data2 = this.data,\n      rect = _this$data2.rect,\n      inkLists = _this$data2.inkLists,\n      borderStyle = _this$data2.borderStyle,\n      popupRef = _this$data2.popupRef;\n    const _getRectDims7 = getRectDims(rect),\n      width = _getRectDims7.width,\n      height = _getRectDims7.height;\n    const svg = this.svgFactory.create(width, height, true);\n    for (const inkList of inkLists) {\n      let points = [];\n      for (let i = 0, ii = inkList.length; i < ii; i += 2) {\n        const x = inkList[i] - rect[0];\n        const y = rect[3] - inkList[i + 1];\n        points.push(`${x},${y}`);\n      }\n      points = points.join(\" \");\n      const polyline = this.svgFactory.createElement(this.svgElementName);\n      _classPrivateFieldLooseBase(this, _polylines)[_polylines].push(polyline);\n      polyline.setAttribute(\"points\", points);\n      polyline.setAttribute(\"stroke-width\", borderStyle.width || 1);\n      polyline.setAttribute(\"stroke\", \"transparent\");\n      polyline.setAttribute(\"fill\", \"transparent\");\n      svg.append(polyline);\n    }\n    if (!popupRef && this.hasPopupData) {\n      this._createPopup();\n    }\n    this.container.append(svg);\n    this._editOnDoubleClick();\n    return this.container;\n  }\n  getElementsToTriggerPopup() {\n    return _classPrivateFieldLooseBase(this, _polylines)[_polylines];\n  }\n  addHighlightArea() {\n    this.container.classList.add(\"highlightArea\");\n  }\n}\nclass HighlightAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    super(parameters, {\n      isRenderable: true,\n      ignoreBorder: true,\n      createQuadrilaterals: true\n    });\n    this.annotationEditorType = AnnotationEditorType.HIGHLIGHT;\n  }\n  render() {\n    if (!this.data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    }\n    this.container.classList.add(\"highlightAnnotation\");\n    this._editOnDoubleClick();\n    return this.container;\n  }\n}\nclass UnderlineAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    super(parameters, {\n      isRenderable: true,\n      ignoreBorder: true,\n      createQuadrilaterals: true\n    });\n  }\n  render() {\n    if (!this.data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    }\n    this.container.classList.add(\"underlineAnnotation\");\n    return this.container;\n  }\n}\nclass SquigglyAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    super(parameters, {\n      isRenderable: true,\n      ignoreBorder: true,\n      createQuadrilaterals: true\n    });\n  }\n  render() {\n    if (!this.data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    }\n    this.container.classList.add(\"squigglyAnnotation\");\n    return this.container;\n  }\n}\nclass StrikeOutAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    super(parameters, {\n      isRenderable: true,\n      ignoreBorder: true,\n      createQuadrilaterals: true\n    });\n  }\n  render() {\n    if (!this.data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    }\n    this.container.classList.add(\"strikeoutAnnotation\");\n    return this.container;\n  }\n}\nclass StampAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    super(parameters, {\n      isRenderable: true,\n      ignoreBorder: true\n    });\n    this.annotationEditorType = AnnotationEditorType.STAMP;\n  }\n  render() {\n    this.container.classList.add(\"stampAnnotation\");\n    this.container.setAttribute(\"role\", \"img\");\n    if (!this.data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    }\n    this._editOnDoubleClick();\n    return this.container;\n  }\n}\nvar _trigger = /*#__PURE__*/_classPrivateFieldLooseKey(\"trigger\");\nvar _download = /*#__PURE__*/_classPrivateFieldLooseKey(\"download\");\nclass FileAttachmentAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    var _this$linkService$eve1;\n    super(parameters, {\n      isRenderable: true\n    });\n    Object.defineProperty(this, _download, {\n      value: _download2\n    });\n    Object.defineProperty(this, _trigger, {\n      writable: true,\n      value: null\n    });\n    const file = this.data.file;\n    this.filename = file.filename;\n    this.content = file.content;\n    (_this$linkService$eve1 = this.linkService.eventBus) === null || _this$linkService$eve1 === void 0 ? void 0 : _this$linkService$eve1.dispatch(\"fileattachmentannotation\", _objectSpread({\n      source: this\n    }, file));\n  }\n  render() {\n    this.container.classList.add(\"fileAttachmentAnnotation\");\n    const container = this.container,\n      data = this.data;\n    let trigger;\n    if (data.hasAppearance || data.fillAlpha === 0) {\n      trigger = document.createElement(\"div\");\n    } else {\n      trigger = document.createElement(\"img\");\n      trigger.src = `${this.imageResourcesPath}annotation-${/paperclip/i.test(data.name) ? \"paperclip\" : \"pushpin\"}.svg`;\n      if (data.fillAlpha && data.fillAlpha < 1) {\n        trigger.style = `filter: opacity(${Math.round(data.fillAlpha * 100)}%);`;\n      }\n    }\n    trigger.addEventListener(\"dblclick\", _classPrivateFieldLooseBase(this, _download)[_download].bind(this));\n    _classPrivateFieldLooseBase(this, _trigger)[_trigger] = trigger;\n    const isMac = util_FeatureTest.platform.isMac;\n    container.addEventListener(\"keydown\", evt => {\n      if (evt.key === \"Enter\" && (isMac ? evt.metaKey : evt.ctrlKey)) {\n        _classPrivateFieldLooseBase(this, _download)[_download]();\n      }\n    });\n    if (!data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    } else {\n      trigger.classList.add(\"popupTriggerArea\");\n    }\n    container.append(trigger);\n    return container;\n  }\n  getElementsToTriggerPopup() {\n    return _classPrivateFieldLooseBase(this, _trigger)[_trigger];\n  }\n  addHighlightArea() {\n    this.container.classList.add(\"highlightArea\");\n  }\n}\nfunction _download2() {\n  var _this$downloadManager2;\n  (_this$downloadManager2 = this.downloadManager) === null || _this$downloadManager2 === void 0 ? void 0 : _this$downloadManager2.openOrDownloadData(this.content, this.filename);\n}\nvar _accessibilityManager = /*#__PURE__*/_classPrivateFieldLooseKey(\"accessibilityManager\");\nvar _annotationCanvasMap = /*#__PURE__*/_classPrivateFieldLooseKey(\"annotationCanvasMap\");\nvar _editableAnnotations = /*#__PURE__*/_classPrivateFieldLooseKey(\"editableAnnotations\");\nvar _structTreeLayer = /*#__PURE__*/_classPrivateFieldLooseKey(\"structTreeLayer\");\nvar _appendElement = /*#__PURE__*/_classPrivateFieldLooseKey(\"appendElement\");\nvar _setAnnotationCanvasMap = /*#__PURE__*/_classPrivateFieldLooseKey(\"setAnnotationCanvasMap\");\nclass AnnotationLayer {\n  constructor(_ref137) {\n    let div = _ref137.div,\n      accessibilityManager = _ref137.accessibilityManager,\n      annotationCanvasMap = _ref137.annotationCanvasMap,\n      annotationEditorUIManager = _ref137.annotationEditorUIManager,\n      page = _ref137.page,\n      viewport = _ref137.viewport,\n      structTreeLayer = _ref137.structTreeLayer;\n    Object.defineProperty(this, _setAnnotationCanvasMap, {\n      value: _setAnnotationCanvasMap2\n    });\n    Object.defineProperty(this, _appendElement, {\n      value: _appendElement2\n    });\n    Object.defineProperty(this, _accessibilityManager, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _annotationCanvasMap, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _editableAnnotations, {\n      writable: true,\n      value: new Map()\n    });\n    Object.defineProperty(this, _structTreeLayer, {\n      writable: true,\n      value: null\n    });\n    this.div = div;\n    _classPrivateFieldLooseBase(this, _accessibilityManager)[_accessibilityManager] = accessibilityManager;\n    _classPrivateFieldLooseBase(this, _annotationCanvasMap)[_annotationCanvasMap] = annotationCanvasMap;\n    _classPrivateFieldLooseBase(this, _structTreeLayer)[_structTreeLayer] = structTreeLayer || null;\n    this.page = page;\n    this.viewport = viewport;\n    this.zIndex = 0;\n    this._annotationEditorUIManager = annotationEditorUIManager;\n  }\n  hasEditableAnnotations() {\n    return _classPrivateFieldLooseBase(this, _editableAnnotations)[_editableAnnotations].size > 0;\n  }\n  async render(params) {\n    const annotations = params.annotations;\n    const layer = this.div;\n    setLayerDimensions(layer, this.viewport);\n    const popupToElements = new Map();\n    const elementParams = {\n      data: null,\n      layer,\n      linkService: params.linkService,\n      downloadManager: params.downloadManager,\n      imageResourcesPath: params.imageResourcesPath || \"\",\n      renderForms: params.renderForms !== false,\n      svgFactory: new DOMSVGFactory(),\n      annotationStorage: params.annotationStorage || new AnnotationStorage(),\n      enableScripting: params.enableScripting === true,\n      hasJSActions: params.hasJSActions,\n      fieldObjects: params.fieldObjects,\n      parent: this,\n      elements: null\n    };\n    for (const data of annotations) {\n      if (data.noHTML) {\n        continue;\n      }\n      const isPopupAnnotation = data.annotationType === AnnotationType.POPUP;\n      if (!isPopupAnnotation) {\n        const _getRectDims8 = getRectDims(data.rect),\n          width = _getRectDims8.width,\n          height = _getRectDims8.height;\n        if (width <= 0 || height <= 0) {\n          continue;\n        }\n      } else {\n        const elements = popupToElements.get(data.id);\n        if (!elements) {\n          continue;\n        }\n        elementParams.elements = elements;\n      }\n      elementParams.data = data;\n      const element = AnnotationElementFactory.create(elementParams);\n      if (!element.isRenderable) {\n        continue;\n      }\n      if (!isPopupAnnotation && data.popupRef) {\n        const elements = popupToElements.get(data.popupRef);\n        if (!elements) {\n          popupToElements.set(data.popupRef, [element]);\n        } else {\n          elements.push(element);\n        }\n      }\n      const rendered = element.render();\n      if (data.hidden) {\n        rendered.style.visibility = \"hidden\";\n      }\n      await _classPrivateFieldLooseBase(this, _appendElement)[_appendElement](rendered, data.id);\n      if (element._isEditable) {\n        var _this$_annotationEdit;\n        _classPrivateFieldLooseBase(this, _editableAnnotations)[_editableAnnotations].set(element.data.id, element);\n        (_this$_annotationEdit = this._annotationEditorUIManager) === null || _this$_annotationEdit === void 0 ? void 0 : _this$_annotationEdit.renderAnnotationElement(element);\n      }\n    }\n    _classPrivateFieldLooseBase(this, _setAnnotationCanvasMap)[_setAnnotationCanvasMap]();\n  }\n  update(_ref138) {\n    let viewport = _ref138.viewport;\n    const layer = this.div;\n    this.viewport = viewport;\n    setLayerDimensions(layer, {\n      rotation: viewport.rotation\n    });\n    _classPrivateFieldLooseBase(this, _setAnnotationCanvasMap)[_setAnnotationCanvasMap]();\n    layer.hidden = false;\n  }\n  getEditableAnnotations() {\n    return Array.from(_classPrivateFieldLooseBase(this, _editableAnnotations)[_editableAnnotations].values());\n  }\n  getEditableAnnotation(id) {\n    return _classPrivateFieldLooseBase(this, _editableAnnotations)[_editableAnnotations].get(id);\n  }\n}\nasync function _appendElement2(element, id) {\n  var _classPrivateFieldLoo153, _classPrivateFieldLoo154;\n  const contentElement = element.firstChild || element;\n  const annotationId = contentElement.id = `${AnnotationPrefix}${id}`;\n  const ariaAttributes = await ((_classPrivateFieldLoo153 = _classPrivateFieldLooseBase(this, _structTreeLayer)[_structTreeLayer]) === null || _classPrivateFieldLoo153 === void 0 ? void 0 : _classPrivateFieldLoo153.getAriaAttributes(annotationId));\n  if (ariaAttributes) {\n    for (const _ref165 of ariaAttributes) {\n      var _ref166 = _slicedToArray(_ref165, 2);\n      const key = _ref166[0];\n      const value = _ref166[1];\n      contentElement.setAttribute(key, value);\n    }\n  }\n  this.div.append(element);\n  (_classPrivateFieldLoo154 = _classPrivateFieldLooseBase(this, _accessibilityManager)[_accessibilityManager]) === null || _classPrivateFieldLoo154 === void 0 ? void 0 : _classPrivateFieldLoo154.moveElementInDOM(this.div, element, contentElement, false);\n}\nfunction _setAnnotationCanvasMap2() {\n  if (!_classPrivateFieldLooseBase(this, _annotationCanvasMap)[_annotationCanvasMap]) {\n    return;\n  }\n  const layer = this.div;\n  for (const _ref167 of _classPrivateFieldLooseBase(this, _annotationCanvasMap)[_annotationCanvasMap]) {\n    var _ref168 = _slicedToArray(_ref167, 2);\n    const id = _ref168[0];\n    const canvas = _ref168[1];\n    const element = layer.querySelector(`[data-annotation-id=\"${id}\"]`);\n    if (!element) {\n      continue;\n    }\n    canvas.className = \"annotationContent\";\n    const firstChild = element.firstChild;\n    if (!firstChild) {\n      element.append(canvas);\n    } else if (firstChild.nodeName === \"CANVAS\") {\n      firstChild.replaceWith(canvas);\n    } else if (!firstChild.classList.contains(\"annotationContent\")) {\n      firstChild.before(canvas);\n    } else {\n      firstChild.after(canvas);\n    }\n  }\n  _classPrivateFieldLooseBase(this, _annotationCanvasMap)[_annotationCanvasMap].clear();\n}\n; // ./src/display/editor/freetext.js\n\nconst EOL_PATTERN = /\\r\\n?|\\n/g;\nvar _color2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"color\");\nvar _content = /*#__PURE__*/_classPrivateFieldLooseKey(\"content\");\nvar _editorDivId = /*#__PURE__*/_classPrivateFieldLooseKey(\"editorDivId\");\nvar _editModeAC = /*#__PURE__*/_classPrivateFieldLooseKey(\"editModeAC\");\nvar _fontSize2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"fontSize\");\nvar _updateFontSize = /*#__PURE__*/_classPrivateFieldLooseKey(\"updateFontSize\");\nvar _updateColor = /*#__PURE__*/_classPrivateFieldLooseKey(\"updateColor\");\nvar _extractText = /*#__PURE__*/_classPrivateFieldLooseKey(\"extractText\");\nvar _setEditorDimensions = /*#__PURE__*/_classPrivateFieldLooseKey(\"setEditorDimensions\");\nvar _getNodeContent = /*#__PURE__*/_classPrivateFieldLooseKey(\"getNodeContent\");\nvar _setContent = /*#__PURE__*/_classPrivateFieldLooseKey(\"setContent\");\nvar _serializeContent = /*#__PURE__*/_classPrivateFieldLooseKey(\"serializeContent\");\nvar _deserializeContent = /*#__PURE__*/_classPrivateFieldLooseKey(\"deserializeContent\");\nvar _hasElementChanged = /*#__PURE__*/_classPrivateFieldLooseKey(\"hasElementChanged\");\nclass FreeTextEditor extends AnnotationEditor {\n  static get _keyboardManager() {\n    const proto = FreeTextEditor.prototype;\n    const arrowChecker = self => self.isEmpty();\n    const small = AnnotationEditorUIManager.TRANSLATE_SMALL;\n    const big = AnnotationEditorUIManager.TRANSLATE_BIG;\n    return shadow(this, \"_keyboardManager\", new KeyboardManager([[[\"ctrl+s\", \"mac+meta+s\", \"ctrl+p\", \"mac+meta+p\"], proto.commitOrRemove, {\n      bubbles: true\n    }], [[\"ctrl+Enter\", \"mac+meta+Enter\", \"Escape\", \"mac+Escape\"], proto.commitOrRemove], [[\"ArrowLeft\", \"mac+ArrowLeft\"], proto._translateEmpty, {\n      args: [-small, 0],\n      checker: arrowChecker\n    }], [[\"ctrl+ArrowLeft\", \"mac+shift+ArrowLeft\"], proto._translateEmpty, {\n      args: [-big, 0],\n      checker: arrowChecker\n    }], [[\"ArrowRight\", \"mac+ArrowRight\"], proto._translateEmpty, {\n      args: [small, 0],\n      checker: arrowChecker\n    }], [[\"ctrl+ArrowRight\", \"mac+shift+ArrowRight\"], proto._translateEmpty, {\n      args: [big, 0],\n      checker: arrowChecker\n    }], [[\"ArrowUp\", \"mac+ArrowUp\"], proto._translateEmpty, {\n      args: [0, -small],\n      checker: arrowChecker\n    }], [[\"ctrl+ArrowUp\", \"mac+shift+ArrowUp\"], proto._translateEmpty, {\n      args: [0, -big],\n      checker: arrowChecker\n    }], [[\"ArrowDown\", \"mac+ArrowDown\"], proto._translateEmpty, {\n      args: [0, small],\n      checker: arrowChecker\n    }], [[\"ctrl+ArrowDown\", \"mac+shift+ArrowDown\"], proto._translateEmpty, {\n      args: [0, big],\n      checker: arrowChecker\n    }]]));\n  }\n  constructor(params) {\n    super(_objectSpread(_objectSpread({}, params), {}, {\n      name: \"freeTextEditor\"\n    }));\n    Object.defineProperty(this, _hasElementChanged, {\n      value: _hasElementChanged2\n    });\n    Object.defineProperty(this, _serializeContent, {\n      value: _serializeContent2\n    });\n    Object.defineProperty(this, _setContent, {\n      value: _setContent2\n    });\n    Object.defineProperty(this, _setEditorDimensions, {\n      value: _setEditorDimensions2\n    });\n    Object.defineProperty(this, _extractText, {\n      value: _extractText2\n    });\n    Object.defineProperty(this, _updateColor, {\n      value: _updateColor2\n    });\n    Object.defineProperty(this, _updateFontSize, {\n      value: _updateFontSize2\n    });\n    Object.defineProperty(this, _color2, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _content, {\n      writable: true,\n      value: \"\"\n    });\n    Object.defineProperty(this, _editorDivId, {\n      writable: true,\n      value: `${this.id}-editor`\n    });\n    Object.defineProperty(this, _editModeAC, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _fontSize2, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldLooseBase(this, _color2)[_color2] = params.color || FreeTextEditor._defaultColor || AnnotationEditor._defaultLineColor;\n    _classPrivateFieldLooseBase(this, _fontSize2)[_fontSize2] = params.fontSize || FreeTextEditor._defaultFontSize;\n  }\n  static initialize(l10n, uiManager) {\n    AnnotationEditor.initialize(l10n, uiManager);\n    const style = getComputedStyle(document.documentElement);\n    this._internalPadding = parseFloat(style.getPropertyValue(\"--freetext-padding\"));\n  }\n  static updateDefaultParams(type, value) {\n    switch (type) {\n      case AnnotationEditorParamsType.FREETEXT_SIZE:\n        FreeTextEditor._defaultFontSize = value;\n        break;\n      case AnnotationEditorParamsType.FREETEXT_COLOR:\n        FreeTextEditor._defaultColor = value;\n        break;\n    }\n  }\n  updateParams(type, value) {\n    switch (type) {\n      case AnnotationEditorParamsType.FREETEXT_SIZE:\n        _classPrivateFieldLooseBase(this, _updateFontSize)[_updateFontSize](value);\n        break;\n      case AnnotationEditorParamsType.FREETEXT_COLOR:\n        _classPrivateFieldLooseBase(this, _updateColor)[_updateColor](value);\n        break;\n    }\n  }\n  static get defaultPropertiesToUpdate() {\n    return [[AnnotationEditorParamsType.FREETEXT_SIZE, FreeTextEditor._defaultFontSize], [AnnotationEditorParamsType.FREETEXT_COLOR, FreeTextEditor._defaultColor || AnnotationEditor._defaultLineColor]];\n  }\n  get propertiesToUpdate() {\n    return [[AnnotationEditorParamsType.FREETEXT_SIZE, _classPrivateFieldLooseBase(this, _fontSize2)[_fontSize2]], [AnnotationEditorParamsType.FREETEXT_COLOR, _classPrivateFieldLooseBase(this, _color2)[_color2]]];\n  }\n  _translateEmpty(x, y) {\n    this._uiManager.translateSelectedEditors(x, y, true);\n  }\n  getInitialTranslation() {\n    const scale = this.parentScale;\n    return [-FreeTextEditor._internalPadding * scale, -(FreeTextEditor._internalPadding + _classPrivateFieldLooseBase(this, _fontSize2)[_fontSize2]) * scale];\n  }\n  rebuild() {\n    if (!this.parent) {\n      return;\n    }\n    super.rebuild();\n    if (this.div === null) {\n      return;\n    }\n    if (!this.isAttachedToDOM) {\n      this.parent.add(this);\n    }\n  }\n  enableEditMode() {\n    if (this.isInEditMode()) {\n      return;\n    }\n    this.parent.setEditingState(false);\n    this.parent.updateToolbar(AnnotationEditorType.FREETEXT);\n    super.enableEditMode();\n    this.overlayDiv.classList.remove(\"enabled\");\n    this.editorDiv.contentEditable = true;\n    this._isDraggable = false;\n    this.div.removeAttribute(\"aria-activedescendant\");\n    _classPrivateFieldLooseBase(this, _editModeAC)[_editModeAC] = new AbortController();\n    const signal = this._uiManager.combinedSignal(_classPrivateFieldLooseBase(this, _editModeAC)[_editModeAC]);\n    this.editorDiv.addEventListener(\"keydown\", this.editorDivKeydown.bind(this), {\n      signal\n    });\n    this.editorDiv.addEventListener(\"focus\", this.editorDivFocus.bind(this), {\n      signal\n    });\n    this.editorDiv.addEventListener(\"blur\", this.editorDivBlur.bind(this), {\n      signal\n    });\n    this.editorDiv.addEventListener(\"input\", this.editorDivInput.bind(this), {\n      signal\n    });\n    this.editorDiv.addEventListener(\"paste\", this.editorDivPaste.bind(this), {\n      signal\n    });\n  }\n  disableEditMode() {\n    var _classPrivateFieldLoo75;\n    if (!this.isInEditMode()) {\n      return;\n    }\n    this.parent.setEditingState(true);\n    super.disableEditMode();\n    this.overlayDiv.classList.add(\"enabled\");\n    this.editorDiv.contentEditable = false;\n    this.div.setAttribute(\"aria-activedescendant\", _classPrivateFieldLooseBase(this, _editorDivId)[_editorDivId]);\n    this._isDraggable = true;\n    (_classPrivateFieldLoo75 = _classPrivateFieldLooseBase(this, _editModeAC)[_editModeAC]) === null || _classPrivateFieldLoo75 === void 0 ? void 0 : _classPrivateFieldLoo75.abort();\n    _classPrivateFieldLooseBase(this, _editModeAC)[_editModeAC] = null;\n    this.div.focus({\n      preventScroll: true\n    });\n    this.isEditing = false;\n    this.parent.div.classList.add(\"freetextEditing\");\n  }\n  focusin(event) {\n    if (!this._focusEventsAllowed) {\n      return;\n    }\n    super.focusin(event);\n    if (event.target !== this.editorDiv) {\n      this.editorDiv.focus();\n    }\n  }\n  onceAdded() {\n    var _this$_initialOptions;\n    if (this.width) {\n      return;\n    }\n    this.enableEditMode();\n    this.editorDiv.focus();\n    if ((_this$_initialOptions = this._initialOptions) !== null && _this$_initialOptions !== void 0 && _this$_initialOptions.isCentered) {\n      this.center();\n    }\n    this._initialOptions = null;\n  }\n  isEmpty() {\n    return !this.editorDiv || this.editorDiv.innerText.trim() === \"\";\n  }\n  remove() {\n    this.isEditing = false;\n    if (this.parent) {\n      this.parent.setEditingState(true);\n      this.parent.div.classList.add(\"freetextEditing\");\n    }\n    super.remove();\n  }\n  commit() {\n    if (!this.isInEditMode()) {\n      return;\n    }\n    super.commit();\n    this.disableEditMode();\n    const savedText = _classPrivateFieldLooseBase(this, _content)[_content];\n    const newText = _classPrivateFieldLooseBase(this, _content)[_content] = _classPrivateFieldLooseBase(this, _extractText)[_extractText]().trimEnd();\n    if (savedText === newText) {\n      return;\n    }\n    const setText = text => {\n      _classPrivateFieldLooseBase(this, _content)[_content] = text;\n      if (!text) {\n        this.remove();\n        return;\n      }\n      _classPrivateFieldLooseBase(this, _setContent)[_setContent]();\n      this._uiManager.rebuild(this);\n      _classPrivateFieldLooseBase(this, _setEditorDimensions)[_setEditorDimensions]();\n    };\n    this.addCommands({\n      cmd: () => {\n        setText(newText);\n      },\n      undo: () => {\n        setText(savedText);\n      },\n      mustExec: false\n    });\n    _classPrivateFieldLooseBase(this, _setEditorDimensions)[_setEditorDimensions]();\n  }\n  shouldGetKeyboardEvents() {\n    return this.isInEditMode();\n  }\n  enterInEditMode() {\n    this.enableEditMode();\n    this.editorDiv.focus();\n  }\n  dblclick(event) {\n    this.enterInEditMode();\n  }\n  keydown(event) {\n    if (event.target === this.div && event.key === \"Enter\") {\n      this.enterInEditMode();\n      event.preventDefault();\n    }\n  }\n  editorDivKeydown(event) {\n    FreeTextEditor._keyboardManager.exec(this, event);\n  }\n  editorDivFocus(event) {\n    this.isEditing = true;\n  }\n  editorDivBlur(event) {\n    this.isEditing = false;\n  }\n  editorDivInput(event) {\n    this.parent.div.classList.toggle(\"freetextEditing\", this.isEmpty());\n  }\n  disableEditing() {\n    this.editorDiv.setAttribute(\"role\", \"comment\");\n    this.editorDiv.removeAttribute(\"aria-multiline\");\n  }\n  enableEditing() {\n    this.editorDiv.setAttribute(\"role\", \"textbox\");\n    this.editorDiv.setAttribute(\"aria-multiline\", true);\n  }\n  render() {\n    if (this.div) {\n      return this.div;\n    }\n    let baseX, baseY;\n    if (this.width) {\n      baseX = this.x;\n      baseY = this.y;\n    }\n    super.render();\n    this.editorDiv = document.createElement(\"div\");\n    this.editorDiv.className = \"internal\";\n    this.editorDiv.setAttribute(\"id\", _classPrivateFieldLooseBase(this, _editorDivId)[_editorDivId]);\n    this.editorDiv.setAttribute(\"data-l10n-id\", \"pdfjs-free-text2\");\n    this.editorDiv.setAttribute(\"data-l10n-attrs\", \"default-content\");\n    this.enableEditing();\n    this.editorDiv.contentEditable = true;\n    const style = this.editorDiv.style;\n    style.fontSize = `calc(${_classPrivateFieldLooseBase(this, _fontSize2)[_fontSize2]}px * var(--scale-factor))`;\n    style.color = _classPrivateFieldLooseBase(this, _color2)[_color2];\n    this.div.append(this.editorDiv);\n    this.overlayDiv = document.createElement(\"div\");\n    this.overlayDiv.classList.add(\"overlay\", \"enabled\");\n    this.div.append(this.overlayDiv);\n    bindEvents(this, this.div, [\"dblclick\", \"keydown\"]);\n    if (this.width) {\n      const _this$parentDimension8 = _slicedToArray(this.parentDimensions, 2),\n        parentWidth = _this$parentDimension8[0],\n        parentHeight = _this$parentDimension8[1];\n      if (this.annotationElementId) {\n        const position = this._initialData.position;\n        let _this$getInitialTrans3 = this.getInitialTranslation(),\n          _this$getInitialTrans4 = _slicedToArray(_this$getInitialTrans3, 2),\n          tx = _this$getInitialTrans4[0],\n          ty = _this$getInitialTrans4[1];\n        var _this$pageTranslation2 = this.pageTranslationToScreen(tx, ty);\n        var _this$pageTranslation3 = _slicedToArray(_this$pageTranslation2, 2);\n        tx = _this$pageTranslation3[0];\n        ty = _this$pageTranslation3[1];\n        const _this$pageDimensions5 = _slicedToArray(this.pageDimensions, 2),\n          pageWidth = _this$pageDimensions5[0],\n          pageHeight = _this$pageDimensions5[1];\n        const _this$pageTranslation4 = _slicedToArray(this.pageTranslation, 2),\n          pageX = _this$pageTranslation4[0],\n          pageY = _this$pageTranslation4[1];\n        let posX, posY;\n        switch (this.rotation) {\n          case 0:\n            posX = baseX + (position[0] - pageX) / pageWidth;\n            posY = baseY + this.height - (position[1] - pageY) / pageHeight;\n            break;\n          case 90:\n            posX = baseX + (position[0] - pageX) / pageWidth;\n            posY = baseY - (position[1] - pageY) / pageHeight;\n            var _ref139 = [ty, -tx];\n            tx = _ref139[0];\n            ty = _ref139[1];\n            break;\n          case 180:\n            posX = baseX - this.width + (position[0] - pageX) / pageWidth;\n            posY = baseY - (position[1] - pageY) / pageHeight;\n            var _ref140 = [-tx, -ty];\n            tx = _ref140[0];\n            ty = _ref140[1];\n            break;\n          case 270:\n            posX = baseX + (position[0] - pageX - this.height * pageHeight) / pageWidth;\n            posY = baseY + (position[1] - pageY - this.width * pageWidth) / pageHeight;\n            var _ref141 = [-ty, tx];\n            tx = _ref141[0];\n            ty = _ref141[1];\n            break;\n        }\n        this.setAt(posX * parentWidth, posY * parentHeight, tx, ty);\n      } else {\n        this.setAt(baseX * parentWidth, baseY * parentHeight, this.width * parentWidth, this.height * parentHeight);\n      }\n      _classPrivateFieldLooseBase(this, _setContent)[_setContent]();\n      this._isDraggable = true;\n      this.editorDiv.contentEditable = false;\n    } else {\n      this._isDraggable = false;\n      this.editorDiv.contentEditable = true;\n    }\n    return this.div;\n  }\n  editorDivPaste(event) {\n    const clipboardData = event.clipboardData || window.clipboardData;\n    const types = clipboardData.types;\n    if (types.length === 1 && types[0] === \"text/plain\") {\n      return;\n    }\n    event.preventDefault();\n    const paste = _classPrivateFieldLooseBase(FreeTextEditor, _deserializeContent)[_deserializeContent](clipboardData.getData(\"text\") || \"\").replaceAll(EOL_PATTERN, \"\\n\");\n    if (!paste) {\n      return;\n    }\n    const selection = window.getSelection();\n    if (!selection.rangeCount) {\n      return;\n    }\n    this.editorDiv.normalize();\n    selection.deleteFromDocument();\n    const range = selection.getRangeAt(0);\n    if (!paste.includes(\"\\n\")) {\n      range.insertNode(document.createTextNode(paste));\n      this.editorDiv.normalize();\n      selection.collapseToStart();\n      return;\n    }\n    const startContainer = range.startContainer,\n      startOffset = range.startOffset;\n    const bufferBefore = [];\n    const bufferAfter = [];\n    if (startContainer.nodeType === Node.TEXT_NODE) {\n      const parent = startContainer.parentElement;\n      bufferAfter.push(startContainer.nodeValue.slice(startOffset).replaceAll(EOL_PATTERN, \"\"));\n      if (parent !== this.editorDiv) {\n        let buffer = bufferBefore;\n        for (const child of this.editorDiv.childNodes) {\n          if (child === parent) {\n            buffer = bufferAfter;\n            continue;\n          }\n          buffer.push(_classPrivateFieldLooseBase(FreeTextEditor, _getNodeContent)[_getNodeContent](child));\n        }\n      }\n      bufferBefore.push(startContainer.nodeValue.slice(0, startOffset).replaceAll(EOL_PATTERN, \"\"));\n    } else if (startContainer === this.editorDiv) {\n      let buffer = bufferBefore;\n      let i = 0;\n      for (const child of this.editorDiv.childNodes) {\n        if (i++ === startOffset) {\n          buffer = bufferAfter;\n        }\n        buffer.push(_classPrivateFieldLooseBase(FreeTextEditor, _getNodeContent)[_getNodeContent](child));\n      }\n    }\n    _classPrivateFieldLooseBase(this, _content)[_content] = `${bufferBefore.join(\"\\n\")}${paste}${bufferAfter.join(\"\\n\")}`;\n    _classPrivateFieldLooseBase(this, _setContent)[_setContent]();\n    const newRange = new Range();\n    let beforeLength = bufferBefore.reduce((acc, line) => acc + line.length, 0);\n    for (const _ref142 of this.editorDiv.childNodes) {\n      const firstChild = _ref142.firstChild;\n      if (firstChild.nodeType === Node.TEXT_NODE) {\n        const length = firstChild.nodeValue.length;\n        if (beforeLength <= length) {\n          newRange.setStart(firstChild, beforeLength);\n          newRange.setEnd(firstChild, beforeLength);\n          break;\n        }\n        beforeLength -= length;\n      }\n    }\n    selection.removeAllRanges();\n    selection.addRange(newRange);\n  }\n  get contentDiv() {\n    return this.editorDiv;\n  }\n  static async deserialize(data, parent, uiManager) {\n    let initialData = null;\n    if (data instanceof FreeTextAnnotationElement) {\n      const _data3 = data,\n        _data3$data = _data3.data,\n        _data3$data$defaultAp = _data3$data.defaultAppearanceData,\n        fontSize = _data3$data$defaultAp.fontSize,\n        fontColor = _data3$data$defaultAp.fontColor,\n        rect = _data3$data.rect,\n        rotation = _data3$data.rotation,\n        id = _data3$data.id,\n        popupRef = _data3$data.popupRef,\n        textContent = _data3.textContent,\n        textPosition = _data3.textPosition,\n        pageNumber = _data3.parent.page.pageNumber;\n      if (!textContent || textContent.length === 0) {\n        return null;\n      }\n      initialData = data = {\n        annotationType: AnnotationEditorType.FREETEXT,\n        color: Array.from(fontColor),\n        fontSize,\n        value: textContent.join(\"\\n\"),\n        position: textPosition,\n        pageIndex: pageNumber - 1,\n        rect: rect.slice(0),\n        rotation,\n        id,\n        deleted: false,\n        popupRef\n      };\n    }\n    const editor = await super.deserialize(data, parent, uiManager);\n    _classPrivateFieldLooseBase(editor, _fontSize2)[_fontSize2] = data.fontSize;\n    _classPrivateFieldLooseBase(editor, _color2)[_color2] = Util.makeHexColor(...data.color);\n    _classPrivateFieldLooseBase(editor, _content)[_content] = _classPrivateFieldLooseBase(FreeTextEditor, _deserializeContent)[_deserializeContent](data.value);\n    editor.annotationElementId = data.id || null;\n    editor._initialData = initialData;\n    return editor;\n  }\n  serialize() {\n    let isForCopying = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (this.isEmpty()) {\n      return null;\n    }\n    if (this.deleted) {\n      return this.serializeDeleted();\n    }\n    const padding = FreeTextEditor._internalPadding * this.parentScale;\n    const rect = this.getRect(padding, padding);\n    const color = AnnotationEditor._colorManager.convert(this.isAttachedToDOM ? getComputedStyle(this.editorDiv).color : _classPrivateFieldLooseBase(this, _color2)[_color2]);\n    const serialized = {\n      annotationType: AnnotationEditorType.FREETEXT,\n      color,\n      fontSize: _classPrivateFieldLooseBase(this, _fontSize2)[_fontSize2],\n      value: _classPrivateFieldLooseBase(this, _serializeContent)[_serializeContent](),\n      pageIndex: this.pageIndex,\n      rect,\n      rotation: this.rotation,\n      structTreeParentId: this._structTreeParentId\n    };\n    if (isForCopying) {\n      return serialized;\n    }\n    if (this.annotationElementId && !_classPrivateFieldLooseBase(this, _hasElementChanged)[_hasElementChanged](serialized)) {\n      return null;\n    }\n    serialized.id = this.annotationElementId;\n    return serialized;\n  }\n  renderAnnotationElement(annotation) {\n    const content = super.renderAnnotationElement(annotation);\n    if (this.deleted) {\n      return content;\n    }\n    const style = content.style;\n    style.fontSize = `calc(${_classPrivateFieldLooseBase(this, _fontSize2)[_fontSize2]}px * var(--scale-factor))`;\n    style.color = _classPrivateFieldLooseBase(this, _color2)[_color2];\n    content.replaceChildren();\n    for (const line of _classPrivateFieldLooseBase(this, _content)[_content].split(\"\\n\")) {\n      const div = document.createElement(\"div\");\n      div.append(line ? document.createTextNode(line) : document.createElement(\"br\"));\n      content.append(div);\n    }\n    const padding = FreeTextEditor._internalPadding * this.parentScale;\n    annotation.updateEdited({\n      rect: this.getRect(padding, padding),\n      popupContent: _classPrivateFieldLooseBase(this, _content)[_content]\n    });\n    return content;\n  }\n  resetAnnotationElement(annotation) {\n    super.resetAnnotationElement(annotation);\n    annotation.resetEdited();\n  }\n}\n_FreeTextEditor = FreeTextEditor;\nfunction _updateFontSize2(fontSize) {\n  const setFontsize = size => {\n    this.editorDiv.style.fontSize = `calc(${size}px * var(--scale-factor))`;\n    this.translate(0, -(size - _classPrivateFieldLooseBase(this, _fontSize2)[_fontSize2]) * this.parentScale);\n    _classPrivateFieldLooseBase(this, _fontSize2)[_fontSize2] = size;\n    _classPrivateFieldLooseBase(this, _setEditorDimensions)[_setEditorDimensions]();\n  };\n  const savedFontsize = _classPrivateFieldLooseBase(this, _fontSize2)[_fontSize2];\n  this.addCommands({\n    cmd: setFontsize.bind(this, fontSize),\n    undo: setFontsize.bind(this, savedFontsize),\n    post: this._uiManager.updateUI.bind(this._uiManager, this),\n    mustExec: true,\n    type: AnnotationEditorParamsType.FREETEXT_SIZE,\n    overwriteIfSameType: true,\n    keepUndo: true\n  });\n}\nfunction _updateColor2(color) {\n  const setColor = col => {\n    _classPrivateFieldLooseBase(this, _color2)[_color2] = this.editorDiv.style.color = col;\n  };\n  const savedColor = _classPrivateFieldLooseBase(this, _color2)[_color2];\n  this.addCommands({\n    cmd: setColor.bind(this, color),\n    undo: setColor.bind(this, savedColor),\n    post: this._uiManager.updateUI.bind(this._uiManager, this),\n    mustExec: true,\n    type: AnnotationEditorParamsType.FREETEXT_COLOR,\n    overwriteIfSameType: true,\n    keepUndo: true\n  });\n}\nfunction _extractText2() {\n  const buffer = [];\n  this.editorDiv.normalize();\n  let prevChild = null;\n  for (const child of this.editorDiv.childNodes) {\n    var _prevChild;\n    if (((_prevChild = prevChild) === null || _prevChild === void 0 ? void 0 : _prevChild.nodeType) === Node.TEXT_NODE && child.nodeName === \"BR\") {\n      continue;\n    }\n    buffer.push(_classPrivateFieldLooseBase(_FreeTextEditor, _getNodeContent)[_getNodeContent](child));\n    prevChild = child;\n  }\n  return buffer.join(\"\\n\");\n}\nfunction _setEditorDimensions2() {\n  const _this$parentDimension15 = _slicedToArray(this.parentDimensions, 2),\n    parentWidth = _this$parentDimension15[0],\n    parentHeight = _this$parentDimension15[1];\n  let rect;\n  if (this.isAttachedToDOM) {\n    rect = this.div.getBoundingClientRect();\n  } else {\n    const currentLayer = this.currentLayer,\n      div = this.div;\n    const savedDisplay = div.style.display;\n    const savedVisibility = div.classList.contains(\"hidden\");\n    div.classList.remove(\"hidden\");\n    div.style.display = \"hidden\";\n    currentLayer.div.append(this.div);\n    rect = div.getBoundingClientRect();\n    div.remove();\n    div.style.display = savedDisplay;\n    div.classList.toggle(\"hidden\", savedVisibility);\n  }\n  if (this.rotation % 180 === this.parentRotation % 180) {\n    this.width = rect.width / parentWidth;\n    this.height = rect.height / parentHeight;\n  } else {\n    this.width = rect.height / parentWidth;\n    this.height = rect.width / parentHeight;\n  }\n  this.fixAndSetPosition();\n}\nfunction _getNodeContent2(node) {\n  return (node.nodeType === Node.TEXT_NODE ? node.nodeValue : node.innerText).replaceAll(EOL_PATTERN, \"\");\n}\nfunction _setContent2() {\n  this.editorDiv.replaceChildren();\n  if (!_classPrivateFieldLooseBase(this, _content)[_content]) {\n    return;\n  }\n  for (const line of _classPrivateFieldLooseBase(this, _content)[_content].split(\"\\n\")) {\n    const div = document.createElement(\"div\");\n    div.append(line ? document.createTextNode(line) : document.createElement(\"br\"));\n    this.editorDiv.append(div);\n  }\n}\nfunction _serializeContent2() {\n  return _classPrivateFieldLooseBase(this, _content)[_content].replaceAll(\"\\xa0\", \" \");\n}\nfunction _deserializeContent2(content) {\n  return content.replaceAll(\" \", \"\\xa0\");\n}\nfunction _hasElementChanged2(serialized) {\n  const _this$_initialData2 = this._initialData,\n    value = _this$_initialData2.value,\n    fontSize = _this$_initialData2.fontSize,\n    color = _this$_initialData2.color,\n    pageIndex = _this$_initialData2.pageIndex;\n  return this._hasBeenMoved || serialized.value !== value || serialized.fontSize !== fontSize || serialized.color.some((c, i) => c !== color[i]) || serialized.pageIndex !== pageIndex;\n}\nObject.defineProperty(FreeTextEditor, _deserializeContent, {\n  value: _deserializeContent2\n});\nObject.defineProperty(FreeTextEditor, _getNodeContent, {\n  value: _getNodeContent2\n});\nFreeTextEditor._freeTextDefaultContent = \"\";\nFreeTextEditor._internalPadding = 0;\nFreeTextEditor._defaultColor = null;\nFreeTextEditor._defaultFontSize = 10;\nFreeTextEditor._type = \"freetext\";\nFreeTextEditor._editorType = AnnotationEditorType.FREETEXT;\n; // ./src/display/editor/drawers/outline.js\n\nclass Outline {\n  toSVGPath() {\n    unreachable(\"Abstract method `toSVGPath` must be implemented.\");\n  }\n  get box() {\n    unreachable(\"Abstract getter `box` must be implemented.\");\n  }\n  serialize(_bbox, _rotation) {\n    unreachable(\"Abstract method `serialize` must be implemented.\");\n  }\n  get classNamesForDrawing() {\n    unreachable(\"Abstract getter `classNamesForDrawing` must be implemented.\");\n  }\n  get classNamesForOutlining() {\n    unreachable(\"Abstract getter `classNamesForOutlining` must be implemented.\");\n  }\n  get mustRemoveSelfIntersections() {\n    return false;\n  }\n}\n; // ./src/display/editor/drawers/freedraw.js\nvar _box = /*#__PURE__*/_classPrivateFieldLooseKey(\"box\");\nvar _bottom = /*#__PURE__*/_classPrivateFieldLooseKey(\"bottom\");\nvar _innerMargin = /*#__PURE__*/_classPrivateFieldLooseKey(\"innerMargin\");\nvar _isLTR = /*#__PURE__*/_classPrivateFieldLooseKey(\"isLTR\");\nvar _top = /*#__PURE__*/_classPrivateFieldLooseKey(\"top\");\nvar _last = /*#__PURE__*/_classPrivateFieldLooseKey(\"last\");\nvar _lastX = /*#__PURE__*/_classPrivateFieldLooseKey(\"lastX\");\nvar _lastY = /*#__PURE__*/_classPrivateFieldLooseKey(\"lastY\");\nvar _min = /*#__PURE__*/_classPrivateFieldLooseKey(\"min\");\nvar _min_dist = /*#__PURE__*/_classPrivateFieldLooseKey(\"min_dist\");\nvar _scaleFactor = /*#__PURE__*/_classPrivateFieldLooseKey(\"scaleFactor\");\nvar _thickness = /*#__PURE__*/_classPrivateFieldLooseKey(\"thickness\");\nvar _points = /*#__PURE__*/_classPrivateFieldLooseKey(\"points\");\nvar _MIN_DIST = /*#__PURE__*/_classPrivateFieldLooseKey(\"MIN_DIST\");\nvar _MIN_DIFF = /*#__PURE__*/_classPrivateFieldLooseKey(\"MIN_DIFF\");\nvar _MIN = /*#__PURE__*/_classPrivateFieldLooseKey(\"MIN\");\nvar _getLastCoords = /*#__PURE__*/_classPrivateFieldLooseKey(\"getLastCoords\");\nvar _toSVGPathTwoPoints = /*#__PURE__*/_classPrivateFieldLooseKey(\"toSVGPathTwoPoints\");\nvar _toSVGPathStart = /*#__PURE__*/_classPrivateFieldLooseKey(\"toSVGPathStart\");\nvar _toSVGPathEnd = /*#__PURE__*/_classPrivateFieldLooseKey(\"toSVGPathEnd\");\nvar _getOutlineTwoPoints = /*#__PURE__*/_classPrivateFieldLooseKey(\"getOutlineTwoPoints\");\nvar _getOutlineStart = /*#__PURE__*/_classPrivateFieldLooseKey(\"getOutlineStart\");\nvar _getOutlineEnd = /*#__PURE__*/_classPrivateFieldLooseKey(\"getOutlineEnd\");\nclass FreeDrawOutliner {\n  constructor(_ref143, box, scaleFactor, thickness, isLTR) {\n    let _x = _ref143.x,\n      _y = _ref143.y;\n    let innerMargin = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n    Object.defineProperty(this, _getOutlineEnd, {\n      value: _getOutlineEnd2\n    });\n    Object.defineProperty(this, _getOutlineStart, {\n      value: _getOutlineStart2\n    });\n    Object.defineProperty(this, _getOutlineTwoPoints, {\n      value: _getOutlineTwoPoints2\n    });\n    Object.defineProperty(this, _toSVGPathEnd, {\n      value: _toSVGPathEnd2\n    });\n    Object.defineProperty(this, _toSVGPathStart, {\n      value: _toSVGPathStart2\n    });\n    Object.defineProperty(this, _toSVGPathTwoPoints, {\n      value: _toSVGPathTwoPoints2\n    });\n    Object.defineProperty(this, _getLastCoords, {\n      value: _getLastCoords2\n    });\n    Object.defineProperty(this, _box, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _bottom, {\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(this, _innerMargin, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _isLTR, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _top, {\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(this, _last, {\n      writable: true,\n      value: new Float64Array(18)\n    });\n    Object.defineProperty(this, _lastX, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _lastY, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _min, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _min_dist, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _scaleFactor, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _thickness, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _points, {\n      writable: true,\n      value: []\n    });\n    _classPrivateFieldLooseBase(this, _box)[_box] = box;\n    _classPrivateFieldLooseBase(this, _thickness)[_thickness] = thickness * scaleFactor;\n    _classPrivateFieldLooseBase(this, _isLTR)[_isLTR] = isLTR;\n    _classPrivateFieldLooseBase(this, _last)[_last].set([NaN, NaN, NaN, NaN, _x, _y], 6);\n    _classPrivateFieldLooseBase(this, _innerMargin)[_innerMargin] = innerMargin;\n    _classPrivateFieldLooseBase(this, _min_dist)[_min_dist] = _classPrivateFieldLooseBase(FreeDrawOutliner, _MIN_DIST)[_MIN_DIST] * scaleFactor;\n    _classPrivateFieldLooseBase(this, _min)[_min] = _classPrivateFieldLooseBase(FreeDrawOutliner, _MIN)[_MIN] * scaleFactor;\n    _classPrivateFieldLooseBase(this, _scaleFactor)[_scaleFactor] = scaleFactor;\n    _classPrivateFieldLooseBase(this, _points)[_points].push(_x, _y);\n  }\n  isEmpty() {\n    return isNaN(_classPrivateFieldLooseBase(this, _last)[_last][8]);\n  }\n  add(_ref144) {\n    var _classPrivateFieldLoo79;\n    let x = _ref144.x,\n      y = _ref144.y;\n    _classPrivateFieldLooseBase(this, _lastX)[_lastX] = x;\n    _classPrivateFieldLooseBase(this, _lastY)[_lastY] = y;\n    const _classPrivateFieldLoo76 = _slicedToArray(_classPrivateFieldLooseBase(this, _box)[_box], 4),\n      layerX = _classPrivateFieldLoo76[0],\n      layerY = _classPrivateFieldLoo76[1],\n      layerWidth = _classPrivateFieldLoo76[2],\n      layerHeight = _classPrivateFieldLoo76[3];\n    let _classPrivateFieldLoo77 = _classPrivateFieldLooseBase(this, _last)[_last].subarray(8, 12),\n      _classPrivateFieldLoo78 = _slicedToArray(_classPrivateFieldLoo77, 4),\n      x1 = _classPrivateFieldLoo78[0],\n      y1 = _classPrivateFieldLoo78[1],\n      x2 = _classPrivateFieldLoo78[2],\n      y2 = _classPrivateFieldLoo78[3];\n    const diffX = x - x2;\n    const diffY = y - y2;\n    const d = Math.hypot(diffX, diffY);\n    if (d < _classPrivateFieldLooseBase(this, _min)[_min]) {\n      return false;\n    }\n    const diffD = d - _classPrivateFieldLooseBase(this, _min_dist)[_min_dist];\n    const K = diffD / d;\n    const shiftX = K * diffX;\n    const shiftY = K * diffY;\n    let x0 = x1;\n    let y0 = y1;\n    x1 = x2;\n    y1 = y2;\n    x2 += shiftX;\n    y2 += shiftY;\n    (_classPrivateFieldLoo79 = _classPrivateFieldLooseBase(this, _points)[_points]) === null || _classPrivateFieldLoo79 === void 0 ? void 0 : _classPrivateFieldLoo79.push(x, y);\n    const nX = -shiftY / diffD;\n    const nY = shiftX / diffD;\n    const thX = nX * _classPrivateFieldLooseBase(this, _thickness)[_thickness];\n    const thY = nY * _classPrivateFieldLooseBase(this, _thickness)[_thickness];\n    _classPrivateFieldLooseBase(this, _last)[_last].set(_classPrivateFieldLooseBase(this, _last)[_last].subarray(2, 8), 0);\n    _classPrivateFieldLooseBase(this, _last)[_last].set([x2 + thX, y2 + thY], 4);\n    _classPrivateFieldLooseBase(this, _last)[_last].set(_classPrivateFieldLooseBase(this, _last)[_last].subarray(14, 18), 12);\n    _classPrivateFieldLooseBase(this, _last)[_last].set([x2 - thX, y2 - thY], 16);\n    if (isNaN(_classPrivateFieldLooseBase(this, _last)[_last][6])) {\n      if (_classPrivateFieldLooseBase(this, _top)[_top].length === 0) {\n        _classPrivateFieldLooseBase(this, _last)[_last].set([x1 + thX, y1 + thY], 2);\n        _classPrivateFieldLooseBase(this, _top)[_top].push(NaN, NaN, NaN, NaN, (x1 + thX - layerX) / layerWidth, (y1 + thY - layerY) / layerHeight);\n        _classPrivateFieldLooseBase(this, _last)[_last].set([x1 - thX, y1 - thY], 14);\n        _classPrivateFieldLooseBase(this, _bottom)[_bottom].push(NaN, NaN, NaN, NaN, (x1 - thX - layerX) / layerWidth, (y1 - thY - layerY) / layerHeight);\n      }\n      _classPrivateFieldLooseBase(this, _last)[_last].set([x0, y0, x1, y1, x2, y2], 6);\n      return !this.isEmpty();\n    }\n    _classPrivateFieldLooseBase(this, _last)[_last].set([x0, y0, x1, y1, x2, y2], 6);\n    const angle = Math.abs(Math.atan2(y0 - y1, x0 - x1) - Math.atan2(shiftY, shiftX));\n    if (angle < Math.PI / 2) {\n      var _classPrivateFieldLoo80 = _classPrivateFieldLooseBase(this, _last)[_last].subarray(2, 6);\n      var _classPrivateFieldLoo81 = _slicedToArray(_classPrivateFieldLoo80, 4);\n      x1 = _classPrivateFieldLoo81[0];\n      y1 = _classPrivateFieldLoo81[1];\n      x2 = _classPrivateFieldLoo81[2];\n      y2 = _classPrivateFieldLoo81[3];\n      _classPrivateFieldLooseBase(this, _top)[_top].push(NaN, NaN, NaN, NaN, ((x1 + x2) / 2 - layerX) / layerWidth, ((y1 + y2) / 2 - layerY) / layerHeight);\n      var _classPrivateFieldLoo82 = _classPrivateFieldLooseBase(this, _last)[_last].subarray(14, 18);\n      var _classPrivateFieldLoo83 = _slicedToArray(_classPrivateFieldLoo82, 4);\n      x1 = _classPrivateFieldLoo83[0];\n      y1 = _classPrivateFieldLoo83[1];\n      x0 = _classPrivateFieldLoo83[2];\n      y0 = _classPrivateFieldLoo83[3];\n      _classPrivateFieldLooseBase(this, _bottom)[_bottom].push(NaN, NaN, NaN, NaN, ((x0 + x1) / 2 - layerX) / layerWidth, ((y0 + y1) / 2 - layerY) / layerHeight);\n      return true;\n    }\n    var _classPrivateFieldLoo84 = _classPrivateFieldLooseBase(this, _last)[_last].subarray(0, 6);\n    var _classPrivateFieldLoo85 = _slicedToArray(_classPrivateFieldLoo84, 6);\n    x0 = _classPrivateFieldLoo85[0];\n    y0 = _classPrivateFieldLoo85[1];\n    x1 = _classPrivateFieldLoo85[2];\n    y1 = _classPrivateFieldLoo85[3];\n    x2 = _classPrivateFieldLoo85[4];\n    y2 = _classPrivateFieldLoo85[5];\n    _classPrivateFieldLooseBase(this, _top)[_top].push(((x0 + 5 * x1) / 6 - layerX) / layerWidth, ((y0 + 5 * y1) / 6 - layerY) / layerHeight, ((5 * x1 + x2) / 6 - layerX) / layerWidth, ((5 * y1 + y2) / 6 - layerY) / layerHeight, ((x1 + x2) / 2 - layerX) / layerWidth, ((y1 + y2) / 2 - layerY) / layerHeight);\n    var _classPrivateFieldLoo86 = _classPrivateFieldLooseBase(this, _last)[_last].subarray(12, 18);\n    var _classPrivateFieldLoo87 = _slicedToArray(_classPrivateFieldLoo86, 6);\n    x2 = _classPrivateFieldLoo87[0];\n    y2 = _classPrivateFieldLoo87[1];\n    x1 = _classPrivateFieldLoo87[2];\n    y1 = _classPrivateFieldLoo87[3];\n    x0 = _classPrivateFieldLoo87[4];\n    y0 = _classPrivateFieldLoo87[5];\n    _classPrivateFieldLooseBase(this, _bottom)[_bottom].push(((x0 + 5 * x1) / 6 - layerX) / layerWidth, ((y0 + 5 * y1) / 6 - layerY) / layerHeight, ((5 * x1 + x2) / 6 - layerX) / layerWidth, ((5 * y1 + y2) / 6 - layerY) / layerHeight, ((x1 + x2) / 2 - layerX) / layerWidth, ((y1 + y2) / 2 - layerY) / layerHeight);\n    return true;\n  }\n  toSVGPath() {\n    if (this.isEmpty()) {\n      return \"\";\n    }\n    const top = _classPrivateFieldLooseBase(this, _top)[_top];\n    const bottom = _classPrivateFieldLooseBase(this, _bottom)[_bottom];\n    if (isNaN(_classPrivateFieldLooseBase(this, _last)[_last][6]) && !this.isEmpty()) {\n      return _classPrivateFieldLooseBase(this, _toSVGPathTwoPoints)[_toSVGPathTwoPoints]();\n    }\n    const buffer = [];\n    buffer.push(`M${top[4]} ${top[5]}`);\n    for (let i = 6; i < top.length; i += 6) {\n      if (isNaN(top[i])) {\n        buffer.push(`L${top[i + 4]} ${top[i + 5]}`);\n      } else {\n        buffer.push(`C${top[i]} ${top[i + 1]} ${top[i + 2]} ${top[i + 3]} ${top[i + 4]} ${top[i + 5]}`);\n      }\n    }\n    _classPrivateFieldLooseBase(this, _toSVGPathEnd)[_toSVGPathEnd](buffer);\n    for (let i = bottom.length - 6; i >= 6; i -= 6) {\n      if (isNaN(bottom[i])) {\n        buffer.push(`L${bottom[i + 4]} ${bottom[i + 5]}`);\n      } else {\n        buffer.push(`C${bottom[i]} ${bottom[i + 1]} ${bottom[i + 2]} ${bottom[i + 3]} ${bottom[i + 4]} ${bottom[i + 5]}`);\n      }\n    }\n    _classPrivateFieldLooseBase(this, _toSVGPathStart)[_toSVGPathStart](buffer);\n    return buffer.join(\" \");\n  }\n  newFreeDrawOutline(outline, points, box, scaleFactor, innerMargin, isLTR) {\n    return new FreeDrawOutline(outline, points, box, scaleFactor, innerMargin, isLTR);\n  }\n  getOutlines() {\n    var _classPrivateFieldLoo89, _classPrivateFieldLoo90;\n    const top = _classPrivateFieldLooseBase(this, _top)[_top];\n    const bottom = _classPrivateFieldLooseBase(this, _bottom)[_bottom];\n    const last = _classPrivateFieldLooseBase(this, _last)[_last];\n    const _classPrivateFieldLoo88 = _slicedToArray(_classPrivateFieldLooseBase(this, _box)[_box], 4),\n      layerX = _classPrivateFieldLoo88[0],\n      layerY = _classPrivateFieldLoo88[1],\n      layerWidth = _classPrivateFieldLoo88[2],\n      layerHeight = _classPrivateFieldLoo88[3];\n    const points = new Float64Array(((_classPrivateFieldLoo89 = (_classPrivateFieldLoo90 = _classPrivateFieldLooseBase(this, _points)[_points]) === null || _classPrivateFieldLoo90 === void 0 ? void 0 : _classPrivateFieldLoo90.length) !== null && _classPrivateFieldLoo89 !== void 0 ? _classPrivateFieldLoo89 : 0) + 2);\n    for (let i = 0, ii = points.length - 2; i < ii; i += 2) {\n      points[i] = (_classPrivateFieldLooseBase(this, _points)[_points][i] - layerX) / layerWidth;\n      points[i + 1] = (_classPrivateFieldLooseBase(this, _points)[_points][i + 1] - layerY) / layerHeight;\n    }\n    points[points.length - 2] = (_classPrivateFieldLooseBase(this, _lastX)[_lastX] - layerX) / layerWidth;\n    points[points.length - 1] = (_classPrivateFieldLooseBase(this, _lastY)[_lastY] - layerY) / layerHeight;\n    if (isNaN(last[6]) && !this.isEmpty()) {\n      return _classPrivateFieldLooseBase(this, _getOutlineTwoPoints)[_getOutlineTwoPoints](points);\n    }\n    const outline = new Float64Array(_classPrivateFieldLooseBase(this, _top)[_top].length + 24 + _classPrivateFieldLooseBase(this, _bottom)[_bottom].length);\n    let N = top.length;\n    for (let i = 0; i < N; i += 2) {\n      if (isNaN(top[i])) {\n        outline[i] = outline[i + 1] = NaN;\n        continue;\n      }\n      outline[i] = top[i];\n      outline[i + 1] = top[i + 1];\n    }\n    N = _classPrivateFieldLooseBase(this, _getOutlineEnd)[_getOutlineEnd](outline, N);\n    for (let i = bottom.length - 6; i >= 6; i -= 6) {\n      for (let j = 0; j < 6; j += 2) {\n        if (isNaN(bottom[i + j])) {\n          outline[N] = outline[N + 1] = NaN;\n          N += 2;\n          continue;\n        }\n        outline[N] = bottom[i + j];\n        outline[N + 1] = bottom[i + j + 1];\n        N += 2;\n      }\n    }\n    _classPrivateFieldLooseBase(this, _getOutlineStart)[_getOutlineStart](outline, N);\n    return this.newFreeDrawOutline(outline, points, _classPrivateFieldLooseBase(this, _box)[_box], _classPrivateFieldLooseBase(this, _scaleFactor)[_scaleFactor], _classPrivateFieldLooseBase(this, _innerMargin)[_innerMargin], _classPrivateFieldLooseBase(this, _isLTR)[_isLTR]);\n  }\n}\n_FreeDrawOutliner = FreeDrawOutliner;\nfunction _getLastCoords2() {\n  const lastTop = _classPrivateFieldLooseBase(this, _last)[_last].subarray(4, 6);\n  const lastBottom = _classPrivateFieldLooseBase(this, _last)[_last].subarray(16, 18);\n  const _classPrivateFieldLoo155 = _slicedToArray(_classPrivateFieldLooseBase(this, _box)[_box], 4),\n    x = _classPrivateFieldLoo155[0],\n    y = _classPrivateFieldLoo155[1],\n    width = _classPrivateFieldLoo155[2],\n    height = _classPrivateFieldLoo155[3];\n  return [(_classPrivateFieldLooseBase(this, _lastX)[_lastX] + (lastTop[0] - lastBottom[0]) / 2 - x) / width, (_classPrivateFieldLooseBase(this, _lastY)[_lastY] + (lastTop[1] - lastBottom[1]) / 2 - y) / height, (_classPrivateFieldLooseBase(this, _lastX)[_lastX] + (lastBottom[0] - lastTop[0]) / 2 - x) / width, (_classPrivateFieldLooseBase(this, _lastY)[_lastY] + (lastBottom[1] - lastTop[1]) / 2 - y) / height];\n}\nfunction _toSVGPathTwoPoints2() {\n  const _classPrivateFieldLoo156 = _slicedToArray(_classPrivateFieldLooseBase(this, _box)[_box], 4),\n    x = _classPrivateFieldLoo156[0],\n    y = _classPrivateFieldLoo156[1],\n    width = _classPrivateFieldLoo156[2],\n    height = _classPrivateFieldLoo156[3];\n  const _classPrivateFieldLoo157 = _classPrivateFieldLooseBase(this, _getLastCoords)[_getLastCoords](),\n    _classPrivateFieldLoo158 = _slicedToArray(_classPrivateFieldLoo157, 4),\n    lastTopX = _classPrivateFieldLoo158[0],\n    lastTopY = _classPrivateFieldLoo158[1],\n    lastBottomX = _classPrivateFieldLoo158[2],\n    lastBottomY = _classPrivateFieldLoo158[3];\n  return `M${(_classPrivateFieldLooseBase(this, _last)[_last][2] - x) / width} ${(_classPrivateFieldLooseBase(this, _last)[_last][3] - y) / height} L${(_classPrivateFieldLooseBase(this, _last)[_last][4] - x) / width} ${(_classPrivateFieldLooseBase(this, _last)[_last][5] - y) / height} L${lastTopX} ${lastTopY} L${lastBottomX} ${lastBottomY} L${(_classPrivateFieldLooseBase(this, _last)[_last][16] - x) / width} ${(_classPrivateFieldLooseBase(this, _last)[_last][17] - y) / height} L${(_classPrivateFieldLooseBase(this, _last)[_last][14] - x) / width} ${(_classPrivateFieldLooseBase(this, _last)[_last][15] - y) / height} Z`;\n}\nfunction _toSVGPathStart2(buffer) {\n  const bottom = _classPrivateFieldLooseBase(this, _bottom)[_bottom];\n  buffer.push(`L${bottom[4]} ${bottom[5]} Z`);\n}\nfunction _toSVGPathEnd2(buffer) {\n  const _classPrivateFieldLoo159 = _slicedToArray(_classPrivateFieldLooseBase(this, _box)[_box], 4),\n    x = _classPrivateFieldLoo159[0],\n    y = _classPrivateFieldLoo159[1],\n    width = _classPrivateFieldLoo159[2],\n    height = _classPrivateFieldLoo159[3];\n  const lastTop = _classPrivateFieldLooseBase(this, _last)[_last].subarray(4, 6);\n  const lastBottom = _classPrivateFieldLooseBase(this, _last)[_last].subarray(16, 18);\n  const _classPrivateFieldLoo160 = _classPrivateFieldLooseBase(this, _getLastCoords)[_getLastCoords](),\n    _classPrivateFieldLoo161 = _slicedToArray(_classPrivateFieldLoo160, 4),\n    lastTopX = _classPrivateFieldLoo161[0],\n    lastTopY = _classPrivateFieldLoo161[1],\n    lastBottomX = _classPrivateFieldLoo161[2],\n    lastBottomY = _classPrivateFieldLoo161[3];\n  buffer.push(`L${(lastTop[0] - x) / width} ${(lastTop[1] - y) / height} L${lastTopX} ${lastTopY} L${lastBottomX} ${lastBottomY} L${(lastBottom[0] - x) / width} ${(lastBottom[1] - y) / height}`);\n}\nfunction _getOutlineTwoPoints2(points) {\n  const last = _classPrivateFieldLooseBase(this, _last)[_last];\n  const _classPrivateFieldLoo162 = _slicedToArray(_classPrivateFieldLooseBase(this, _box)[_box], 4),\n    layerX = _classPrivateFieldLoo162[0],\n    layerY = _classPrivateFieldLoo162[1],\n    layerWidth = _classPrivateFieldLoo162[2],\n    layerHeight = _classPrivateFieldLoo162[3];\n  const _classPrivateFieldLoo163 = _classPrivateFieldLooseBase(this, _getLastCoords)[_getLastCoords](),\n    _classPrivateFieldLoo164 = _slicedToArray(_classPrivateFieldLoo163, 4),\n    lastTopX = _classPrivateFieldLoo164[0],\n    lastTopY = _classPrivateFieldLoo164[1],\n    lastBottomX = _classPrivateFieldLoo164[2],\n    lastBottomY = _classPrivateFieldLoo164[3];\n  const outline = new Float64Array(36);\n  outline.set([NaN, NaN, NaN, NaN, (last[2] - layerX) / layerWidth, (last[3] - layerY) / layerHeight, NaN, NaN, NaN, NaN, (last[4] - layerX) / layerWidth, (last[5] - layerY) / layerHeight, NaN, NaN, NaN, NaN, lastTopX, lastTopY, NaN, NaN, NaN, NaN, lastBottomX, lastBottomY, NaN, NaN, NaN, NaN, (last[16] - layerX) / layerWidth, (last[17] - layerY) / layerHeight, NaN, NaN, NaN, NaN, (last[14] - layerX) / layerWidth, (last[15] - layerY) / layerHeight], 0);\n  return this.newFreeDrawOutline(outline, points, _classPrivateFieldLooseBase(this, _box)[_box], _classPrivateFieldLooseBase(this, _scaleFactor)[_scaleFactor], _classPrivateFieldLooseBase(this, _innerMargin)[_innerMargin], _classPrivateFieldLooseBase(this, _isLTR)[_isLTR]);\n}\nfunction _getOutlineStart2(outline, pos) {\n  const bottom = _classPrivateFieldLooseBase(this, _bottom)[_bottom];\n  outline.set([NaN, NaN, NaN, NaN, bottom[4], bottom[5]], pos);\n  return pos += 6;\n}\nfunction _getOutlineEnd2(outline, pos) {\n  const lastTop = _classPrivateFieldLooseBase(this, _last)[_last].subarray(4, 6);\n  const lastBottom = _classPrivateFieldLooseBase(this, _last)[_last].subarray(16, 18);\n  const _classPrivateFieldLoo165 = _slicedToArray(_classPrivateFieldLooseBase(this, _box)[_box], 4),\n    layerX = _classPrivateFieldLoo165[0],\n    layerY = _classPrivateFieldLoo165[1],\n    layerWidth = _classPrivateFieldLoo165[2],\n    layerHeight = _classPrivateFieldLoo165[3];\n  const _classPrivateFieldLoo166 = _classPrivateFieldLooseBase(this, _getLastCoords)[_getLastCoords](),\n    _classPrivateFieldLoo167 = _slicedToArray(_classPrivateFieldLoo166, 4),\n    lastTopX = _classPrivateFieldLoo167[0],\n    lastTopY = _classPrivateFieldLoo167[1],\n    lastBottomX = _classPrivateFieldLoo167[2],\n    lastBottomY = _classPrivateFieldLoo167[3];\n  outline.set([NaN, NaN, NaN, NaN, (lastTop[0] - layerX) / layerWidth, (lastTop[1] - layerY) / layerHeight, NaN, NaN, NaN, NaN, lastTopX, lastTopY, NaN, NaN, NaN, NaN, lastBottomX, lastBottomY, NaN, NaN, NaN, NaN, (lastBottom[0] - layerX) / layerWidth, (lastBottom[1] - layerY) / layerHeight], pos);\n  return pos += 24;\n}\nObject.defineProperty(FreeDrawOutliner, _MIN_DIST, {\n  writable: true,\n  value: 8\n});\nObject.defineProperty(FreeDrawOutliner, _MIN_DIFF, {\n  writable: true,\n  value: 2\n});\nObject.defineProperty(FreeDrawOutliner, _MIN, {\n  writable: true,\n  value: _classPrivateFieldLooseBase(_FreeDrawOutliner, _MIN_DIST)[_MIN_DIST] + _classPrivateFieldLooseBase(_FreeDrawOutliner, _MIN_DIFF)[_MIN_DIFF]\n});\nvar _box2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"box\");\nvar _bbox2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"bbox\");\nvar _innerMargin2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"innerMargin\");\nvar _isLTR2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"isLTR\");\nvar _points2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"points\");\nvar _scaleFactor2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"scaleFactor\");\nvar _outline = /*#__PURE__*/_classPrivateFieldLooseKey(\"outline\");\nvar _rescale = /*#__PURE__*/_classPrivateFieldLooseKey(\"rescale\");\nvar _rescaleAndSwap = /*#__PURE__*/_classPrivateFieldLooseKey(\"rescaleAndSwap\");\nvar _computeMinMax = /*#__PURE__*/_classPrivateFieldLooseKey(\"computeMinMax\");\nclass FreeDrawOutline extends Outline {\n  constructor(_outline2, points, box, scaleFactor, innerMargin, _isLTR3) {\n    super();\n    Object.defineProperty(this, _computeMinMax, {\n      value: _computeMinMax2\n    });\n    Object.defineProperty(this, _rescaleAndSwap, {\n      value: _rescaleAndSwap2\n    });\n    Object.defineProperty(this, _rescale, {\n      value: _rescale2\n    });\n    Object.defineProperty(this, _box2, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _bbox2, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _innerMargin2, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _isLTR2, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _points2, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _scaleFactor2, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _outline, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldLooseBase(this, _outline)[_outline] = _outline2;\n    _classPrivateFieldLooseBase(this, _points2)[_points2] = points;\n    _classPrivateFieldLooseBase(this, _box2)[_box2] = box;\n    _classPrivateFieldLooseBase(this, _scaleFactor2)[_scaleFactor2] = scaleFactor;\n    _classPrivateFieldLooseBase(this, _innerMargin2)[_innerMargin2] = innerMargin;\n    _classPrivateFieldLooseBase(this, _isLTR2)[_isLTR2] = _isLTR3;\n    _classPrivateFieldLooseBase(this, _computeMinMax)[_computeMinMax](_isLTR3);\n    const _classPrivateFieldLoo91 = _classPrivateFieldLooseBase(this, _bbox2)[_bbox2],\n      _x2 = _classPrivateFieldLoo91.x,\n      _y2 = _classPrivateFieldLoo91.y,\n      _width2 = _classPrivateFieldLoo91.width,\n      _height2 = _classPrivateFieldLoo91.height;\n    for (let i = 0, ii = _outline2.length; i < ii; i += 2) {\n      _outline2[i] = (_outline2[i] - _x2) / _width2;\n      _outline2[i + 1] = (_outline2[i + 1] - _y2) / _height2;\n    }\n    for (let i = 0, ii = points.length; i < ii; i += 2) {\n      points[i] = (points[i] - _x2) / _width2;\n      points[i + 1] = (points[i + 1] - _y2) / _height2;\n    }\n  }\n  toSVGPath() {\n    const buffer = [`M${_classPrivateFieldLooseBase(this, _outline)[_outline][4]} ${_classPrivateFieldLooseBase(this, _outline)[_outline][5]}`];\n    for (let i = 6, ii = _classPrivateFieldLooseBase(this, _outline)[_outline].length; i < ii; i += 6) {\n      if (isNaN(_classPrivateFieldLooseBase(this, _outline)[_outline][i])) {\n        buffer.push(`L${_classPrivateFieldLooseBase(this, _outline)[_outline][i + 4]} ${_classPrivateFieldLooseBase(this, _outline)[_outline][i + 5]}`);\n        continue;\n      }\n      buffer.push(`C${_classPrivateFieldLooseBase(this, _outline)[_outline][i]} ${_classPrivateFieldLooseBase(this, _outline)[_outline][i + 1]} ${_classPrivateFieldLooseBase(this, _outline)[_outline][i + 2]} ${_classPrivateFieldLooseBase(this, _outline)[_outline][i + 3]} ${_classPrivateFieldLooseBase(this, _outline)[_outline][i + 4]} ${_classPrivateFieldLooseBase(this, _outline)[_outline][i + 5]}`);\n    }\n    buffer.push(\"Z\");\n    return buffer.join(\" \");\n  }\n  serialize(_ref145, rotation) {\n    let _ref146 = _slicedToArray(_ref145, 4),\n      blX = _ref146[0],\n      blY = _ref146[1],\n      trX = _ref146[2],\n      trY = _ref146[3];\n    const width = trX - blX;\n    const height = trY - blY;\n    let outline;\n    let points;\n    switch (rotation) {\n      case 0:\n        outline = _classPrivateFieldLooseBase(this, _rescale)[_rescale](_classPrivateFieldLooseBase(this, _outline)[_outline], blX, trY, width, -height);\n        points = _classPrivateFieldLooseBase(this, _rescale)[_rescale](_classPrivateFieldLooseBase(this, _points2)[_points2], blX, trY, width, -height);\n        break;\n      case 90:\n        outline = _classPrivateFieldLooseBase(this, _rescaleAndSwap)[_rescaleAndSwap](_classPrivateFieldLooseBase(this, _outline)[_outline], blX, blY, width, height);\n        points = _classPrivateFieldLooseBase(this, _rescaleAndSwap)[_rescaleAndSwap](_classPrivateFieldLooseBase(this, _points2)[_points2], blX, blY, width, height);\n        break;\n      case 180:\n        outline = _classPrivateFieldLooseBase(this, _rescale)[_rescale](_classPrivateFieldLooseBase(this, _outline)[_outline], trX, blY, -width, height);\n        points = _classPrivateFieldLooseBase(this, _rescale)[_rescale](_classPrivateFieldLooseBase(this, _points2)[_points2], trX, blY, -width, height);\n        break;\n      case 270:\n        outline = _classPrivateFieldLooseBase(this, _rescaleAndSwap)[_rescaleAndSwap](_classPrivateFieldLooseBase(this, _outline)[_outline], trX, trY, -width, -height);\n        points = _classPrivateFieldLooseBase(this, _rescaleAndSwap)[_rescaleAndSwap](_classPrivateFieldLooseBase(this, _points2)[_points2], trX, trY, -width, -height);\n        break;\n    }\n    return {\n      outline: Array.from(outline),\n      points: [Array.from(points)]\n    };\n  }\n  get box() {\n    return _classPrivateFieldLooseBase(this, _bbox2)[_bbox2];\n  }\n  newOutliner(point, box, scaleFactor, thickness, isLTR) {\n    let innerMargin = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n    return new FreeDrawOutliner(point, box, scaleFactor, thickness, isLTR, innerMargin);\n  }\n  getNewOutline(thickness, innerMargin) {\n    const _classPrivateFieldLoo92 = _classPrivateFieldLooseBase(this, _bbox2)[_bbox2],\n      x = _classPrivateFieldLoo92.x,\n      y = _classPrivateFieldLoo92.y,\n      width = _classPrivateFieldLoo92.width,\n      height = _classPrivateFieldLoo92.height;\n    const _classPrivateFieldLoo93 = _slicedToArray(_classPrivateFieldLooseBase(this, _box2)[_box2], 4),\n      layerX = _classPrivateFieldLoo93[0],\n      layerY = _classPrivateFieldLoo93[1],\n      layerWidth = _classPrivateFieldLoo93[2],\n      layerHeight = _classPrivateFieldLoo93[3];\n    const sx = width * layerWidth;\n    const sy = height * layerHeight;\n    const tx = x * layerWidth + layerX;\n    const ty = y * layerHeight + layerY;\n    const outliner = this.newOutliner({\n      x: _classPrivateFieldLooseBase(this, _points2)[_points2][0] * sx + tx,\n      y: _classPrivateFieldLooseBase(this, _points2)[_points2][1] * sy + ty\n    }, _classPrivateFieldLooseBase(this, _box2)[_box2], _classPrivateFieldLooseBase(this, _scaleFactor2)[_scaleFactor2], thickness, _classPrivateFieldLooseBase(this, _isLTR2)[_isLTR2], innerMargin !== null && innerMargin !== void 0 ? innerMargin : _classPrivateFieldLooseBase(this, _innerMargin2)[_innerMargin2]);\n    for (let i = 2; i < _classPrivateFieldLooseBase(this, _points2)[_points2].length; i += 2) {\n      outliner.add({\n        x: _classPrivateFieldLooseBase(this, _points2)[_points2][i] * sx + tx,\n        y: _classPrivateFieldLooseBase(this, _points2)[_points2][i + 1] * sy + ty\n      });\n    }\n    return outliner.getOutlines();\n  }\n  get mustRemoveSelfIntersections() {\n    return true;\n  }\n}\nfunction _rescale2(src, tx, ty, sx, sy) {\n  const dest = new Float64Array(src.length);\n  for (let i = 0, ii = src.length; i < ii; i += 2) {\n    dest[i] = tx + src[i] * sx;\n    dest[i + 1] = ty + src[i + 1] * sy;\n  }\n  return dest;\n}\nfunction _rescaleAndSwap2(src, tx, ty, sx, sy) {\n  const dest = new Float64Array(src.length);\n  for (let i = 0, ii = src.length; i < ii; i += 2) {\n    dest[i] = tx + src[i + 1] * sx;\n    dest[i + 1] = ty + src[i] * sy;\n  }\n  return dest;\n}\nfunction _computeMinMax2(isLTR) {\n  const outline = _classPrivateFieldLooseBase(this, _outline)[_outline];\n  let lastX = outline[4];\n  let lastY = outline[5];\n  let minX = lastX;\n  let minY = lastY;\n  let maxX = lastX;\n  let maxY = lastY;\n  let lastPointX = lastX;\n  let lastPointY = lastY;\n  const ltrCallback = isLTR ? Math.max : Math.min;\n  for (let i = 6, ii = outline.length; i < ii; i += 6) {\n    if (isNaN(outline[i])) {\n      minX = Math.min(minX, outline[i + 4]);\n      minY = Math.min(minY, outline[i + 5]);\n      maxX = Math.max(maxX, outline[i + 4]);\n      maxY = Math.max(maxY, outline[i + 5]);\n      if (lastPointY < outline[i + 5]) {\n        lastPointX = outline[i + 4];\n        lastPointY = outline[i + 5];\n      } else if (lastPointY === outline[i + 5]) {\n        lastPointX = ltrCallback(lastPointX, outline[i + 4]);\n      }\n    } else {\n      const bbox = Util.bezierBoundingBox(lastX, lastY, ...outline.slice(i, i + 6));\n      minX = Math.min(minX, bbox[0]);\n      minY = Math.min(minY, bbox[1]);\n      maxX = Math.max(maxX, bbox[2]);\n      maxY = Math.max(maxY, bbox[3]);\n      if (lastPointY < bbox[3]) {\n        lastPointX = bbox[2];\n        lastPointY = bbox[3];\n      } else if (lastPointY === bbox[3]) {\n        lastPointX = ltrCallback(lastPointX, bbox[2]);\n      }\n    }\n    lastX = outline[i + 4];\n    lastY = outline[i + 5];\n  }\n  const x = minX - _classPrivateFieldLooseBase(this, _innerMargin2)[_innerMargin2],\n    y = minY - _classPrivateFieldLooseBase(this, _innerMargin2)[_innerMargin2],\n    width = maxX - minX + 2 * _classPrivateFieldLooseBase(this, _innerMargin2)[_innerMargin2],\n    height = maxY - minY + 2 * _classPrivateFieldLooseBase(this, _innerMargin2)[_innerMargin2];\n  _classPrivateFieldLooseBase(this, _bbox2)[_bbox2] = {\n    x,\n    y,\n    width,\n    height,\n    lastPoint: [lastPointX, lastPointY]\n  };\n}\n; // ./src/display/editor/drawers/highlight.js\nvar _box3 = /*#__PURE__*/_classPrivateFieldLooseKey(\"box\");\nvar _verticalEdges = /*#__PURE__*/_classPrivateFieldLooseKey(\"verticalEdges\");\nvar _intervals = /*#__PURE__*/_classPrivateFieldLooseKey(\"intervals\");\nvar _getOutlines = /*#__PURE__*/_classPrivateFieldLooseKey(\"getOutlines\");\nvar _binarySearch = /*#__PURE__*/_classPrivateFieldLooseKey(\"binarySearch\");\nvar _insert = /*#__PURE__*/_classPrivateFieldLooseKey(\"insert\");\nvar _remove = /*#__PURE__*/_classPrivateFieldLooseKey(\"remove\");\nvar _breakEdge = /*#__PURE__*/_classPrivateFieldLooseKey(\"breakEdge\");\nclass HighlightOutliner {\n  constructor(boxes) {\n    let borderWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let innerMargin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let isLTR = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    Object.defineProperty(this, _breakEdge, {\n      value: _breakEdge2\n    });\n    Object.defineProperty(this, _remove, {\n      value: _remove2\n    });\n    Object.defineProperty(this, _insert, {\n      value: _insert2\n    });\n    Object.defineProperty(this, _binarySearch, {\n      value: _binarySearch2\n    });\n    Object.defineProperty(this, _getOutlines, {\n      value: _getOutlines2\n    });\n    Object.defineProperty(this, _box3, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _verticalEdges, {\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(this, _intervals, {\n      writable: true,\n      value: []\n    });\n    let minX = Infinity;\n    let maxX = -Infinity;\n    let minY = Infinity;\n    let maxY = -Infinity;\n    const NUMBER_OF_DIGITS = 4;\n    const EPSILON = 10 ** -NUMBER_OF_DIGITS;\n    for (const _ref147 of boxes) {\n      const x = _ref147.x;\n      const y = _ref147.y;\n      const width = _ref147.width;\n      const height = _ref147.height;\n      const x1 = Math.floor((x - borderWidth) / EPSILON) * EPSILON;\n      const x2 = Math.ceil((x + width + borderWidth) / EPSILON) * EPSILON;\n      const y1 = Math.floor((y - borderWidth) / EPSILON) * EPSILON;\n      const y2 = Math.ceil((y + height + borderWidth) / EPSILON) * EPSILON;\n      const left = [x1, y1, y2, true];\n      const right = [x2, y1, y2, false];\n      _classPrivateFieldLooseBase(this, _verticalEdges)[_verticalEdges].push(left, right);\n      minX = Math.min(minX, x1);\n      maxX = Math.max(maxX, x2);\n      minY = Math.min(minY, y1);\n      maxY = Math.max(maxY, y2);\n    }\n    const bboxWidth = maxX - minX + 2 * innerMargin;\n    const bboxHeight = maxY - minY + 2 * innerMargin;\n    const shiftedMinX = minX - innerMargin;\n    const shiftedMinY = minY - innerMargin;\n    const lastEdge = _classPrivateFieldLooseBase(this, _verticalEdges)[_verticalEdges].at(isLTR ? -1 : -2);\n    const lastPoint = [lastEdge[0], lastEdge[2]];\n    for (const edge of _classPrivateFieldLooseBase(this, _verticalEdges)[_verticalEdges]) {\n      const _edge = _slicedToArray(edge, 3),\n        x = _edge[0],\n        y1 = _edge[1],\n        y2 = _edge[2];\n      edge[0] = (x - shiftedMinX) / bboxWidth;\n      edge[1] = (y1 - shiftedMinY) / bboxHeight;\n      edge[2] = (y2 - shiftedMinY) / bboxHeight;\n    }\n    _classPrivateFieldLooseBase(this, _box3)[_box3] = {\n      x: shiftedMinX,\n      y: shiftedMinY,\n      width: bboxWidth,\n      height: bboxHeight,\n      lastPoint\n    };\n  }\n  getOutlines() {\n    _classPrivateFieldLooseBase(this, _verticalEdges)[_verticalEdges].sort((a, b) => a[0] - b[0] || a[1] - b[1] || a[2] - b[2]);\n    const outlineVerticalEdges = [];\n    for (const edge of _classPrivateFieldLooseBase(this, _verticalEdges)[_verticalEdges]) {\n      if (edge[3]) {\n        outlineVerticalEdges.push(..._classPrivateFieldLooseBase(this, _breakEdge)[_breakEdge](edge));\n        _classPrivateFieldLooseBase(this, _insert)[_insert](edge);\n      } else {\n        _classPrivateFieldLooseBase(this, _remove)[_remove](edge);\n        outlineVerticalEdges.push(..._classPrivateFieldLooseBase(this, _breakEdge)[_breakEdge](edge));\n      }\n    }\n    return _classPrivateFieldLooseBase(this, _getOutlines)[_getOutlines](outlineVerticalEdges);\n  }\n}\nfunction _getOutlines2(outlineVerticalEdges) {\n  const edges = [];\n  const allEdges = new Set();\n  for (const edge of outlineVerticalEdges) {\n    const _edge2 = _slicedToArray(edge, 3),\n      x = _edge2[0],\n      y1 = _edge2[1],\n      y2 = _edge2[2];\n    edges.push([x, y1, edge], [x, y2, edge]);\n  }\n  edges.sort((a, b) => a[1] - b[1] || a[0] - b[0]);\n  for (let i = 0, ii = edges.length; i < ii; i += 2) {\n    const edge1 = edges[i][2];\n    const edge2 = edges[i + 1][2];\n    edge1.push(edge2);\n    edge2.push(edge1);\n    allEdges.add(edge1);\n    allEdges.add(edge2);\n  }\n  const outlines = [];\n  let outline;\n  while (allEdges.size > 0) {\n    const edge = allEdges.values().next().value;\n    let _edge3 = _slicedToArray(edge, 5),\n      x = _edge3[0],\n      y1 = _edge3[1],\n      y2 = _edge3[2],\n      edge1 = _edge3[3],\n      edge2 = _edge3[4];\n    allEdges.delete(edge);\n    let lastPointX = x;\n    let lastPointY = y1;\n    outline = [x, y2];\n    outlines.push(outline);\n    while (true) {\n      let e;\n      if (allEdges.has(edge1)) {\n        e = edge1;\n      } else if (allEdges.has(edge2)) {\n        e = edge2;\n      } else {\n        break;\n      }\n      allEdges.delete(e);\n      var _e = e;\n      var _e2 = _slicedToArray(_e, 5);\n      x = _e2[0];\n      y1 = _e2[1];\n      y2 = _e2[2];\n      edge1 = _e2[3];\n      edge2 = _e2[4];\n      if (lastPointX !== x) {\n        outline.push(lastPointX, lastPointY, x, lastPointY === y1 ? y1 : y2);\n        lastPointX = x;\n      }\n      lastPointY = lastPointY === y1 ? y2 : y1;\n    }\n    outline.push(lastPointX, lastPointY);\n  }\n  return new HighlightOutline(outlines, _classPrivateFieldLooseBase(this, _box3)[_box3]);\n}\nfunction _binarySearch2(y) {\n  const array = _classPrivateFieldLooseBase(this, _intervals)[_intervals];\n  let start = 0;\n  let end = array.length - 1;\n  while (start <= end) {\n    const middle = start + end >> 1;\n    const y1 = array[middle][0];\n    if (y1 === y) {\n      return middle;\n    }\n    if (y1 < y) {\n      start = middle + 1;\n    } else {\n      end = middle - 1;\n    }\n  }\n  return end + 1;\n}\nfunction _insert2(_ref169) {\n  let _ref170 = _slicedToArray(_ref169, 3),\n    y1 = _ref170[1],\n    y2 = _ref170[2];\n  const index = _classPrivateFieldLooseBase(this, _binarySearch)[_binarySearch](y1);\n  _classPrivateFieldLooseBase(this, _intervals)[_intervals].splice(index, 0, [y1, y2]);\n}\nfunction _remove2(_ref171) {\n  let _ref172 = _slicedToArray(_ref171, 3),\n    y1 = _ref172[1],\n    y2 = _ref172[2];\n  const index = _classPrivateFieldLooseBase(this, _binarySearch)[_binarySearch](y1);\n  for (let i = index; i < _classPrivateFieldLooseBase(this, _intervals)[_intervals].length; i++) {\n    const _classPrivateFieldLoo168 = _slicedToArray(_classPrivateFieldLooseBase(this, _intervals)[_intervals][i], 2),\n      start = _classPrivateFieldLoo168[0],\n      end = _classPrivateFieldLoo168[1];\n    if (start !== y1) {\n      break;\n    }\n    if (start === y1 && end === y2) {\n      _classPrivateFieldLooseBase(this, _intervals)[_intervals].splice(i, 1);\n      return;\n    }\n  }\n  for (let i = index - 1; i >= 0; i--) {\n    const _classPrivateFieldLoo169 = _slicedToArray(_classPrivateFieldLooseBase(this, _intervals)[_intervals][i], 2),\n      start = _classPrivateFieldLoo169[0],\n      end = _classPrivateFieldLoo169[1];\n    if (start !== y1) {\n      break;\n    }\n    if (start === y1 && end === y2) {\n      _classPrivateFieldLooseBase(this, _intervals)[_intervals].splice(i, 1);\n      return;\n    }\n  }\n}\nfunction _breakEdge2(edge) {\n  const _edge4 = _slicedToArray(edge, 3),\n    x = _edge4[0],\n    y1 = _edge4[1],\n    y2 = _edge4[2];\n  const results = [[x, y1, y2]];\n  const index = _classPrivateFieldLooseBase(this, _binarySearch)[_binarySearch](y2);\n  for (let i = 0; i < index; i++) {\n    const _classPrivateFieldLoo170 = _slicedToArray(_classPrivateFieldLooseBase(this, _intervals)[_intervals][i], 2),\n      start = _classPrivateFieldLoo170[0],\n      end = _classPrivateFieldLoo170[1];\n    for (let j = 0, jj = results.length; j < jj; j++) {\n      const _results$j = _slicedToArray(results[j], 3),\n        y3 = _results$j[1],\n        y4 = _results$j[2];\n      if (end <= y3 || y4 <= start) {\n        continue;\n      }\n      if (y3 >= start) {\n        if (y4 > end) {\n          results[j][1] = end;\n        } else {\n          if (jj === 1) {\n            return [];\n          }\n          results.splice(j, 1);\n          j--;\n          jj--;\n        }\n        continue;\n      }\n      results[j][2] = start;\n      if (y4 > end) {\n        results.push([x, end, y4]);\n      }\n    }\n  }\n  return results;\n}\nvar _box4 = /*#__PURE__*/_classPrivateFieldLooseKey(\"box\");\nvar _outlines = /*#__PURE__*/_classPrivateFieldLooseKey(\"outlines\");\nclass HighlightOutline extends Outline {\n  constructor(outlines, box) {\n    super();\n    Object.defineProperty(this, _box4, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _outlines, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldLooseBase(this, _outlines)[_outlines] = outlines;\n    _classPrivateFieldLooseBase(this, _box4)[_box4] = box;\n  }\n  toSVGPath() {\n    const buffer = [];\n    for (const polygon of _classPrivateFieldLooseBase(this, _outlines)[_outlines]) {\n      let _polygon = _slicedToArray(polygon, 2),\n        prevX = _polygon[0],\n        prevY = _polygon[1];\n      buffer.push(`M${prevX} ${prevY}`);\n      for (let i = 2; i < polygon.length; i += 2) {\n        const x = polygon[i];\n        const y = polygon[i + 1];\n        if (x === prevX) {\n          buffer.push(`V${y}`);\n          prevY = y;\n        } else if (y === prevY) {\n          buffer.push(`H${x}`);\n          prevX = x;\n        }\n      }\n      buffer.push(\"Z\");\n    }\n    return buffer.join(\" \");\n  }\n  serialize(_ref148, _rotation) {\n    let _ref149 = _slicedToArray(_ref148, 4),\n      blX = _ref149[0],\n      blY = _ref149[1],\n      trX = _ref149[2],\n      trY = _ref149[3];\n    const outlines = [];\n    const width = trX - blX;\n    const height = trY - blY;\n    for (const outline of _classPrivateFieldLooseBase(this, _outlines)[_outlines]) {\n      const points = new Array(outline.length);\n      for (let i = 0; i < outline.length; i += 2) {\n        points[i] = blX + outline[i] * width;\n        points[i + 1] = trY - outline[i + 1] * height;\n      }\n      outlines.push(points);\n    }\n    return outlines;\n  }\n  get box() {\n    return _classPrivateFieldLooseBase(this, _box4)[_box4];\n  }\n  get classNamesForDrawing() {\n    return [\"highlight\"];\n  }\n  get classNamesForOutlining() {\n    return [\"highlightOutline\"];\n  }\n}\nclass FreeHighlightOutliner extends FreeDrawOutliner {\n  newFreeDrawOutline(outline, points, box, scaleFactor, innerMargin, isLTR) {\n    return new FreeHighlightOutline(outline, points, box, scaleFactor, innerMargin, isLTR);\n  }\n  get classNamesForDrawing() {\n    return [\"highlight\", \"free\"];\n  }\n}\nclass FreeHighlightOutline extends FreeDrawOutline {\n  get classNamesForDrawing() {\n    return [\"highlight\", \"free\"];\n  }\n  get classNamesForOutlining() {\n    return [\"highlightOutline\", \"free\"];\n  }\n  newOutliner(point, box, scaleFactor, thickness, isLTR) {\n    let innerMargin = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n    return new FreeHighlightOutliner(point, box, scaleFactor, thickness, isLTR, innerMargin);\n  }\n}\n; // ./src/display/editor/color_picker.js\nvar _button = /*#__PURE__*/_classPrivateFieldLooseKey(\"button\");\nvar _buttonSwatch = /*#__PURE__*/_classPrivateFieldLooseKey(\"buttonSwatch\");\nvar _defaultColor = /*#__PURE__*/_classPrivateFieldLooseKey(\"defaultColor\");\nvar _dropdown = /*#__PURE__*/_classPrivateFieldLooseKey(\"dropdown\");\nvar _dropdownWasFromKeyboard = /*#__PURE__*/_classPrivateFieldLooseKey(\"dropdownWasFromKeyboard\");\nvar _isMainColorPicker = /*#__PURE__*/_classPrivateFieldLooseKey(\"isMainColorPicker\");\nvar _editor3 = /*#__PURE__*/_classPrivateFieldLooseKey(\"editor\");\nvar _eventBus = /*#__PURE__*/_classPrivateFieldLooseKey(\"eventBus\");\nvar _openDropdownAC = /*#__PURE__*/_classPrivateFieldLooseKey(\"openDropdownAC\");\nvar _uiManager3 = /*#__PURE__*/_classPrivateFieldLooseKey(\"uiManager\");\nvar _type2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"type\");\nvar _l10nColor = /*#__PURE__*/_classPrivateFieldLooseKey(\"l10nColor\");\nvar _getDropdownRoot = /*#__PURE__*/_classPrivateFieldLooseKey(\"getDropdownRoot\");\nvar _colorSelect = /*#__PURE__*/_classPrivateFieldLooseKey(\"colorSelect\");\nvar _keyDown3 = /*#__PURE__*/_classPrivateFieldLooseKey(\"keyDown\");\nvar _openDropdown = /*#__PURE__*/_classPrivateFieldLooseKey(\"openDropdown\");\nvar _pointerDown3 = /*#__PURE__*/_classPrivateFieldLooseKey(\"pointerDown\");\nvar _isDropdownVisible = /*#__PURE__*/_classPrivateFieldLooseKey(\"isDropdownVisible\");\nclass ColorPicker {\n  static get _keyboardManager() {\n    return shadow(this, \"_keyboardManager\", new KeyboardManager([[[\"Escape\", \"mac+Escape\"], ColorPicker.prototype._hideDropdownFromKeyboard], [[\" \", \"mac+ \"], ColorPicker.prototype._colorSelectFromKeyboard], [[\"ArrowDown\", \"ArrowRight\", \"mac+ArrowDown\", \"mac+ArrowRight\"], ColorPicker.prototype._moveToNext], [[\"ArrowUp\", \"ArrowLeft\", \"mac+ArrowUp\", \"mac+ArrowLeft\"], ColorPicker.prototype._moveToPrevious], [[\"Home\", \"mac+Home\"], ColorPicker.prototype._moveToBeginning], [[\"End\", \"mac+End\"], ColorPicker.prototype._moveToEnd]]));\n  }\n  constructor(_ref150) {\n    var _classPrivateFieldLoo94, _classPrivateFieldLoo95;\n    let _ref150$editor = _ref150.editor,\n      editor = _ref150$editor === void 0 ? null : _ref150$editor,\n      _ref150$uiManager = _ref150.uiManager,\n      uiManager = _ref150$uiManager === void 0 ? null : _ref150$uiManager;\n    Object.defineProperty(this, _isDropdownVisible, {\n      get: _get_isDropdownVisible,\n      set: void 0\n    });\n    Object.defineProperty(this, _pointerDown3, {\n      value: _pointerDown4\n    });\n    Object.defineProperty(this, _openDropdown, {\n      value: _openDropdown2\n    });\n    Object.defineProperty(this, _keyDown3, {\n      value: _keyDown4\n    });\n    Object.defineProperty(this, _colorSelect, {\n      value: _colorSelect2\n    });\n    Object.defineProperty(this, _getDropdownRoot, {\n      value: _getDropdownRoot2\n    });\n    Object.defineProperty(this, _button, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _buttonSwatch, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _defaultColor, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _dropdown, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _dropdownWasFromKeyboard, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _isMainColorPicker, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _editor3, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _eventBus, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _openDropdownAC, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _uiManager3, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _type2, {\n      writable: true,\n      value: void 0\n    });\n    if (editor) {\n      _classPrivateFieldLooseBase(this, _isMainColorPicker)[_isMainColorPicker] = false;\n      _classPrivateFieldLooseBase(this, _type2)[_type2] = AnnotationEditorParamsType.HIGHLIGHT_COLOR;\n      _classPrivateFieldLooseBase(this, _editor3)[_editor3] = editor;\n    } else {\n      _classPrivateFieldLooseBase(this, _isMainColorPicker)[_isMainColorPicker] = true;\n      _classPrivateFieldLooseBase(this, _type2)[_type2] = AnnotationEditorParamsType.HIGHLIGHT_DEFAULT_COLOR;\n    }\n    _classPrivateFieldLooseBase(this, _uiManager3)[_uiManager3] = (editor === null || editor === void 0 ? void 0 : editor._uiManager) || uiManager;\n    _classPrivateFieldLooseBase(this, _eventBus)[_eventBus] = _classPrivateFieldLooseBase(this, _uiManager3)[_uiManager3]._eventBus;\n    _classPrivateFieldLooseBase(this, _defaultColor)[_defaultColor] = (editor === null || editor === void 0 ? void 0 : editor.color) || ((_classPrivateFieldLoo94 = _classPrivateFieldLooseBase(this, _uiManager3)[_uiManager3]) === null || _classPrivateFieldLoo94 === void 0 ? void 0 : _classPrivateFieldLoo94.highlightColors.values().next().value) || \"#FFFF98\";\n    (_classPrivateFieldLoo95 = _classPrivateFieldLooseBase(ColorPicker, _l10nColor))[_l10nColor] || (_classPrivateFieldLoo95[_l10nColor] = Object.freeze({\n      blue: \"pdfjs-editor-colorpicker-blue\",\n      green: \"pdfjs-editor-colorpicker-green\",\n      pink: \"pdfjs-editor-colorpicker-pink\",\n      red: \"pdfjs-editor-colorpicker-red\",\n      yellow: \"pdfjs-editor-colorpicker-yellow\"\n    }));\n  }\n  renderButton() {\n    const button = _classPrivateFieldLooseBase(this, _button)[_button] = document.createElement(\"button\");\n    button.className = \"colorPicker\";\n    button.tabIndex = \"0\";\n    button.setAttribute(\"data-l10n-id\", \"pdfjs-editor-colorpicker-button\");\n    button.setAttribute(\"aria-haspopup\", true);\n    const signal = _classPrivateFieldLooseBase(this, _uiManager3)[_uiManager3]._signal;\n    button.addEventListener(\"click\", _classPrivateFieldLooseBase(this, _openDropdown)[_openDropdown].bind(this), {\n      signal\n    });\n    button.addEventListener(\"keydown\", _classPrivateFieldLooseBase(this, _keyDown3)[_keyDown3].bind(this), {\n      signal\n    });\n    const swatch = _classPrivateFieldLooseBase(this, _buttonSwatch)[_buttonSwatch] = document.createElement(\"span\");\n    swatch.className = \"swatch\";\n    swatch.setAttribute(\"aria-hidden\", true);\n    swatch.style.backgroundColor = _classPrivateFieldLooseBase(this, _defaultColor)[_defaultColor];\n    button.append(swatch);\n    return button;\n  }\n  renderMainDropdown() {\n    const dropdown = _classPrivateFieldLooseBase(this, _dropdown)[_dropdown] = _classPrivateFieldLooseBase(this, _getDropdownRoot)[_getDropdownRoot]();\n    dropdown.setAttribute(\"aria-orientation\", \"horizontal\");\n    dropdown.setAttribute(\"aria-labelledby\", \"highlightColorPickerLabel\");\n    return dropdown;\n  }\n  _colorSelectFromKeyboard(event) {\n    if (event.target === _classPrivateFieldLooseBase(this, _button)[_button]) {\n      _classPrivateFieldLooseBase(this, _openDropdown)[_openDropdown](event);\n      return;\n    }\n    const color = event.target.getAttribute(\"data-color\");\n    if (!color) {\n      return;\n    }\n    _classPrivateFieldLooseBase(this, _colorSelect)[_colorSelect](color, event);\n  }\n  _moveToNext(event) {\n    var _event$target$nextSib;\n    if (!_classPrivateFieldLooseBase(this, _isDropdownVisible)[_isDropdownVisible]) {\n      _classPrivateFieldLooseBase(this, _openDropdown)[_openDropdown](event);\n      return;\n    }\n    if (event.target === _classPrivateFieldLooseBase(this, _button)[_button]) {\n      var _classPrivateFieldLoo96;\n      (_classPrivateFieldLoo96 = _classPrivateFieldLooseBase(this, _dropdown)[_dropdown].firstChild) === null || _classPrivateFieldLoo96 === void 0 ? void 0 : _classPrivateFieldLoo96.focus();\n      return;\n    }\n    (_event$target$nextSib = event.target.nextSibling) === null || _event$target$nextSib === void 0 ? void 0 : _event$target$nextSib.focus();\n  }\n  _moveToPrevious(event) {\n    var _classPrivateFieldLoo97, _event$target$previou;\n    if (event.target === ((_classPrivateFieldLoo97 = _classPrivateFieldLooseBase(this, _dropdown)[_dropdown]) === null || _classPrivateFieldLoo97 === void 0 ? void 0 : _classPrivateFieldLoo97.firstChild) || event.target === _classPrivateFieldLooseBase(this, _button)[_button]) {\n      if (_classPrivateFieldLooseBase(this, _isDropdownVisible)[_isDropdownVisible]) {\n        this._hideDropdownFromKeyboard();\n      }\n      return;\n    }\n    if (!_classPrivateFieldLooseBase(this, _isDropdownVisible)[_isDropdownVisible]) {\n      _classPrivateFieldLooseBase(this, _openDropdown)[_openDropdown](event);\n    }\n    (_event$target$previou = event.target.previousSibling) === null || _event$target$previou === void 0 ? void 0 : _event$target$previou.focus();\n  }\n  _moveToBeginning(event) {\n    var _classPrivateFieldLoo98;\n    if (!_classPrivateFieldLooseBase(this, _isDropdownVisible)[_isDropdownVisible]) {\n      _classPrivateFieldLooseBase(this, _openDropdown)[_openDropdown](event);\n      return;\n    }\n    (_classPrivateFieldLoo98 = _classPrivateFieldLooseBase(this, _dropdown)[_dropdown].firstChild) === null || _classPrivateFieldLoo98 === void 0 ? void 0 : _classPrivateFieldLoo98.focus();\n  }\n  _moveToEnd(event) {\n    var _classPrivateFieldLoo99;\n    if (!_classPrivateFieldLooseBase(this, _isDropdownVisible)[_isDropdownVisible]) {\n      _classPrivateFieldLooseBase(this, _openDropdown)[_openDropdown](event);\n      return;\n    }\n    (_classPrivateFieldLoo99 = _classPrivateFieldLooseBase(this, _dropdown)[_dropdown].lastChild) === null || _classPrivateFieldLoo99 === void 0 ? void 0 : _classPrivateFieldLoo99.focus();\n  }\n  hideDropdown() {\n    var _classPrivateFieldLoo100, _classPrivateFieldLoo101;\n    (_classPrivateFieldLoo100 = _classPrivateFieldLooseBase(this, _dropdown)[_dropdown]) === null || _classPrivateFieldLoo100 === void 0 ? void 0 : _classPrivateFieldLoo100.classList.add(\"hidden\");\n    (_classPrivateFieldLoo101 = _classPrivateFieldLooseBase(this, _openDropdownAC)[_openDropdownAC]) === null || _classPrivateFieldLoo101 === void 0 ? void 0 : _classPrivateFieldLoo101.abort();\n    _classPrivateFieldLooseBase(this, _openDropdownAC)[_openDropdownAC] = null;\n  }\n  _hideDropdownFromKeyboard() {\n    if (_classPrivateFieldLooseBase(this, _isMainColorPicker)[_isMainColorPicker]) {\n      return;\n    }\n    if (!_classPrivateFieldLooseBase(this, _isDropdownVisible)[_isDropdownVisible]) {\n      var _classPrivateFieldLoo102;\n      (_classPrivateFieldLoo102 = _classPrivateFieldLooseBase(this, _editor3)[_editor3]) === null || _classPrivateFieldLoo102 === void 0 ? void 0 : _classPrivateFieldLoo102.unselect();\n      return;\n    }\n    this.hideDropdown();\n    _classPrivateFieldLooseBase(this, _button)[_button].focus({\n      preventScroll: true,\n      focusVisible: _classPrivateFieldLooseBase(this, _dropdownWasFromKeyboard)[_dropdownWasFromKeyboard]\n    });\n  }\n  updateColor(color) {\n    if (_classPrivateFieldLooseBase(this, _buttonSwatch)[_buttonSwatch]) {\n      _classPrivateFieldLooseBase(this, _buttonSwatch)[_buttonSwatch].style.backgroundColor = color;\n    }\n    if (!_classPrivateFieldLooseBase(this, _dropdown)[_dropdown]) {\n      return;\n    }\n    const i = _classPrivateFieldLooseBase(this, _uiManager3)[_uiManager3].highlightColors.values();\n    for (const child of _classPrivateFieldLooseBase(this, _dropdown)[_dropdown].children) {\n      child.setAttribute(\"aria-selected\", i.next().value === color);\n    }\n  }\n  destroy() {\n    var _classPrivateFieldLoo103, _classPrivateFieldLoo104;\n    (_classPrivateFieldLoo103 = _classPrivateFieldLooseBase(this, _button)[_button]) === null || _classPrivateFieldLoo103 === void 0 ? void 0 : _classPrivateFieldLoo103.remove();\n    _classPrivateFieldLooseBase(this, _button)[_button] = null;\n    _classPrivateFieldLooseBase(this, _buttonSwatch)[_buttonSwatch] = null;\n    (_classPrivateFieldLoo104 = _classPrivateFieldLooseBase(this, _dropdown)[_dropdown]) === null || _classPrivateFieldLoo104 === void 0 ? void 0 : _classPrivateFieldLoo104.remove();\n    _classPrivateFieldLooseBase(this, _dropdown)[_dropdown] = null;\n  }\n}\n_ColorPicker = ColorPicker;\nfunction _getDropdownRoot2() {\n  const div = document.createElement(\"div\");\n  const signal = _classPrivateFieldLooseBase(this, _uiManager3)[_uiManager3]._signal;\n  div.addEventListener(\"contextmenu\", noContextMenu, {\n    signal\n  });\n  div.className = \"dropdown\";\n  div.role = \"listbox\";\n  div.setAttribute(\"aria-multiselectable\", false);\n  div.setAttribute(\"aria-orientation\", \"vertical\");\n  div.setAttribute(\"data-l10n-id\", \"pdfjs-editor-colorpicker-dropdown\");\n  for (const _ref173 of _classPrivateFieldLooseBase(this, _uiManager3)[_uiManager3].highlightColors) {\n    var _ref174 = _slicedToArray(_ref173, 2);\n    const name = _ref174[0];\n    const color = _ref174[1];\n    const button = document.createElement(\"button\");\n    button.tabIndex = \"0\";\n    button.role = \"option\";\n    button.setAttribute(\"data-color\", color);\n    button.title = name;\n    button.setAttribute(\"data-l10n-id\", _classPrivateFieldLooseBase(_ColorPicker, _l10nColor)[_l10nColor][name]);\n    const swatch = document.createElement(\"span\");\n    button.append(swatch);\n    swatch.className = \"swatch\";\n    swatch.style.backgroundColor = color;\n    button.setAttribute(\"aria-selected\", color === _classPrivateFieldLooseBase(this, _defaultColor)[_defaultColor]);\n    button.addEventListener(\"click\", _classPrivateFieldLooseBase(this, _colorSelect)[_colorSelect].bind(this, color), {\n      signal\n    });\n    div.append(button);\n  }\n  div.addEventListener(\"keydown\", _classPrivateFieldLooseBase(this, _keyDown3)[_keyDown3].bind(this), {\n    signal\n  });\n  return div;\n}\nfunction _colorSelect2(color, event) {\n  event.stopPropagation();\n  _classPrivateFieldLooseBase(this, _eventBus)[_eventBus].dispatch(\"switchannotationeditorparams\", {\n    source: this,\n    type: _classPrivateFieldLooseBase(this, _type2)[_type2],\n    value: color\n  });\n}\nfunction _keyDown4(event) {\n  _ColorPicker._keyboardManager.exec(this, event);\n}\nfunction _openDropdown2(event) {\n  if (_classPrivateFieldLooseBase(this, _isDropdownVisible)[_isDropdownVisible]) {\n    this.hideDropdown();\n    return;\n  }\n  _classPrivateFieldLooseBase(this, _dropdownWasFromKeyboard)[_dropdownWasFromKeyboard] = event.detail === 0;\n  if (!_classPrivateFieldLooseBase(this, _openDropdownAC)[_openDropdownAC]) {\n    _classPrivateFieldLooseBase(this, _openDropdownAC)[_openDropdownAC] = new AbortController();\n    window.addEventListener(\"pointerdown\", _classPrivateFieldLooseBase(this, _pointerDown3)[_pointerDown3].bind(this), {\n      signal: _classPrivateFieldLooseBase(this, _uiManager3)[_uiManager3].combinedSignal(_classPrivateFieldLooseBase(this, _openDropdownAC)[_openDropdownAC])\n    });\n  }\n  if (_classPrivateFieldLooseBase(this, _dropdown)[_dropdown]) {\n    _classPrivateFieldLooseBase(this, _dropdown)[_dropdown].classList.remove(\"hidden\");\n    return;\n  }\n  const root = _classPrivateFieldLooseBase(this, _dropdown)[_dropdown] = _classPrivateFieldLooseBase(this, _getDropdownRoot)[_getDropdownRoot]();\n  _classPrivateFieldLooseBase(this, _button)[_button].append(root);\n}\nfunction _pointerDown4(event) {\n  var _classPrivateFieldLoo171;\n  if ((_classPrivateFieldLoo171 = _classPrivateFieldLooseBase(this, _dropdown)[_dropdown]) !== null && _classPrivateFieldLoo171 !== void 0 && _classPrivateFieldLoo171.contains(event.target)) {\n    return;\n  }\n  this.hideDropdown();\n}\nfunction _get_isDropdownVisible() {\n  return _classPrivateFieldLooseBase(this, _dropdown)[_dropdown] && !_classPrivateFieldLooseBase(this, _dropdown)[_dropdown].classList.contains(\"hidden\");\n}\nObject.defineProperty(ColorPicker, _l10nColor, {\n  writable: true,\n  value: null\n});\n; // ./src/display/editor/highlight.js\nvar _anchorNode = /*#__PURE__*/_classPrivateFieldLooseKey(\"anchorNode\");\nvar _anchorOffset = /*#__PURE__*/_classPrivateFieldLooseKey(\"anchorOffset\");\nvar _boxes = /*#__PURE__*/_classPrivateFieldLooseKey(\"boxes\");\nvar _clipPathId = /*#__PURE__*/_classPrivateFieldLooseKey(\"clipPathId\");\nvar _colorPicker2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"colorPicker\");\nvar _focusOutlines = /*#__PURE__*/_classPrivateFieldLooseKey(\"focusOutlines\");\nvar _focusNode = /*#__PURE__*/_classPrivateFieldLooseKey(\"focusNode\");\nvar _focusOffset = /*#__PURE__*/_classPrivateFieldLooseKey(\"focusOffset\");\nvar _highlightDiv = /*#__PURE__*/_classPrivateFieldLooseKey(\"highlightDiv\");\nvar _highlightOutlines = /*#__PURE__*/_classPrivateFieldLooseKey(\"highlightOutlines\");\nvar _id4 = /*#__PURE__*/_classPrivateFieldLooseKey(\"id\");\nvar _isFreeHighlight = /*#__PURE__*/_classPrivateFieldLooseKey(\"isFreeHighlight\");\nvar _lastPoint = /*#__PURE__*/_classPrivateFieldLooseKey(\"lastPoint\");\nvar _opacity = /*#__PURE__*/_classPrivateFieldLooseKey(\"opacity\");\nvar _outlineId = /*#__PURE__*/_classPrivateFieldLooseKey(\"outlineId\");\nvar _text = /*#__PURE__*/_classPrivateFieldLooseKey(\"text\");\nvar _thickness2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"thickness\");\nvar _methodOfCreation = /*#__PURE__*/_classPrivateFieldLooseKey(\"methodOfCreation\");\nvar _createOutlines = /*#__PURE__*/_classPrivateFieldLooseKey(\"createOutlines\");\nvar _createFreeOutlines = /*#__PURE__*/_classPrivateFieldLooseKey(\"createFreeOutlines\");\nvar _updateColor3 = /*#__PURE__*/_classPrivateFieldLooseKey(\"updateColor\");\nvar _updateThickness = /*#__PURE__*/_classPrivateFieldLooseKey(\"updateThickness\");\nvar _changeThickness = /*#__PURE__*/_classPrivateFieldLooseKey(\"changeThickness\");\nvar _cleanDrawLayer = /*#__PURE__*/_classPrivateFieldLooseKey(\"cleanDrawLayer\");\nvar _addToDrawLayer = /*#__PURE__*/_classPrivateFieldLooseKey(\"addToDrawLayer\");\nvar _rotateBbox = /*#__PURE__*/_classPrivateFieldLooseKey(\"rotateBbox\");\nvar _keydown = /*#__PURE__*/_classPrivateFieldLooseKey(\"keydown\");\nvar _setCaret = /*#__PURE__*/_classPrivateFieldLooseKey(\"setCaret\");\nvar _getRotation = /*#__PURE__*/_classPrivateFieldLooseKey(\"getRotation\");\nvar _serializeBoxes = /*#__PURE__*/_classPrivateFieldLooseKey(\"serializeBoxes\");\nvar _serializeOutlines = /*#__PURE__*/_classPrivateFieldLooseKey(\"serializeOutlines\");\nvar _highlightMove = /*#__PURE__*/_classPrivateFieldLooseKey(\"highlightMove\");\nvar _endHighlight = /*#__PURE__*/_classPrivateFieldLooseKey(\"endHighlight\");\nvar _hasElementChanged3 = /*#__PURE__*/_classPrivateFieldLooseKey(\"hasElementChanged\");\nclass HighlightEditor extends AnnotationEditor {\n  static get _keyboardManager() {\n    const proto = HighlightEditor.prototype;\n    return shadow(this, \"_keyboardManager\", new KeyboardManager([[[\"ArrowLeft\", \"mac+ArrowLeft\"], proto._moveCaret, {\n      args: [0]\n    }], [[\"ArrowRight\", \"mac+ArrowRight\"], proto._moveCaret, {\n      args: [1]\n    }], [[\"ArrowUp\", \"mac+ArrowUp\"], proto._moveCaret, {\n      args: [2]\n    }], [[\"ArrowDown\", \"mac+ArrowDown\"], proto._moveCaret, {\n      args: [3]\n    }]]));\n  }\n  constructor(params) {\n    super(_objectSpread(_objectSpread({}, params), {}, {\n      name: \"highlightEditor\"\n    }));\n    Object.defineProperty(this, _hasElementChanged3, {\n      value: _hasElementChanged4\n    });\n    Object.defineProperty(this, _serializeOutlines, {\n      value: _serializeOutlines2\n    });\n    Object.defineProperty(this, _serializeBoxes, {\n      value: _serializeBoxes2\n    });\n    Object.defineProperty(this, _getRotation, {\n      value: _getRotation2\n    });\n    Object.defineProperty(this, _setCaret, {\n      value: _setCaret2\n    });\n    Object.defineProperty(this, _keydown, {\n      value: _keydown2\n    });\n    Object.defineProperty(this, _addToDrawLayer, {\n      value: _addToDrawLayer2\n    });\n    Object.defineProperty(this, _cleanDrawLayer, {\n      value: _cleanDrawLayer2\n    });\n    Object.defineProperty(this, _changeThickness, {\n      value: _changeThickness2\n    });\n    Object.defineProperty(this, _updateThickness, {\n      value: _updateThickness2\n    });\n    Object.defineProperty(this, _updateColor3, {\n      value: _updateColor4\n    });\n    Object.defineProperty(this, _createFreeOutlines, {\n      value: _createFreeOutlines2\n    });\n    Object.defineProperty(this, _createOutlines, {\n      value: _createOutlines2\n    });\n    Object.defineProperty(this, _anchorNode, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _anchorOffset, {\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, _boxes, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _clipPathId, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _colorPicker2, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _focusOutlines, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _focusNode, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _focusOffset, {\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, _highlightDiv, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _highlightOutlines, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _id4, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _isFreeHighlight, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _lastPoint, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _opacity, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _outlineId, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _text, {\n      writable: true,\n      value: \"\"\n    });\n    Object.defineProperty(this, _thickness2, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _methodOfCreation, {\n      writable: true,\n      value: \"\"\n    });\n    this.color = params.color || HighlightEditor._defaultColor;\n    _classPrivateFieldLooseBase(this, _thickness2)[_thickness2] = params.thickness || HighlightEditor._defaultThickness;\n    _classPrivateFieldLooseBase(this, _opacity)[_opacity] = params.opacity || HighlightEditor._defaultOpacity;\n    _classPrivateFieldLooseBase(this, _boxes)[_boxes] = params.boxes || null;\n    _classPrivateFieldLooseBase(this, _methodOfCreation)[_methodOfCreation] = params.methodOfCreation || \"\";\n    _classPrivateFieldLooseBase(this, _text)[_text] = params.text || \"\";\n    this._isDraggable = false;\n    if (params.highlightId > -1) {\n      _classPrivateFieldLooseBase(this, _isFreeHighlight)[_isFreeHighlight] = true;\n      _classPrivateFieldLooseBase(this, _createFreeOutlines)[_createFreeOutlines](params);\n      _classPrivateFieldLooseBase(this, _addToDrawLayer)[_addToDrawLayer]();\n    } else if (_classPrivateFieldLooseBase(this, _boxes)[_boxes]) {\n      _classPrivateFieldLooseBase(this, _anchorNode)[_anchorNode] = params.anchorNode;\n      _classPrivateFieldLooseBase(this, _anchorOffset)[_anchorOffset] = params.anchorOffset;\n      _classPrivateFieldLooseBase(this, _focusNode)[_focusNode] = params.focusNode;\n      _classPrivateFieldLooseBase(this, _focusOffset)[_focusOffset] = params.focusOffset;\n      _classPrivateFieldLooseBase(this, _createOutlines)[_createOutlines]();\n      _classPrivateFieldLooseBase(this, _addToDrawLayer)[_addToDrawLayer]();\n      this.rotate(this.rotation);\n    }\n  }\n  get telemetryInitialData() {\n    return {\n      action: \"added\",\n      type: _classPrivateFieldLooseBase(this, _isFreeHighlight)[_isFreeHighlight] ? \"free_highlight\" : \"highlight\",\n      color: this._uiManager.highlightColorNames.get(this.color),\n      thickness: _classPrivateFieldLooseBase(this, _thickness2)[_thickness2],\n      methodOfCreation: _classPrivateFieldLooseBase(this, _methodOfCreation)[_methodOfCreation]\n    };\n  }\n  get telemetryFinalData() {\n    return {\n      type: \"highlight\",\n      color: this._uiManager.highlightColorNames.get(this.color)\n    };\n  }\n  static computeTelemetryFinalData(data) {\n    return {\n      numberOfColors: data.get(\"color\").size\n    };\n  }\n  static initialize(l10n, uiManager) {\n    var _uiManager$highlightC;\n    AnnotationEditor.initialize(l10n, uiManager);\n    HighlightEditor._defaultColor || (HighlightEditor._defaultColor = ((_uiManager$highlightC = uiManager.highlightColors) === null || _uiManager$highlightC === void 0 ? void 0 : _uiManager$highlightC.values().next().value) || \"#fff066\");\n  }\n  static updateDefaultParams(type, value) {\n    switch (type) {\n      case AnnotationEditorParamsType.HIGHLIGHT_DEFAULT_COLOR:\n        HighlightEditor._defaultColor = value;\n        break;\n      case AnnotationEditorParamsType.HIGHLIGHT_THICKNESS:\n        HighlightEditor._defaultThickness = value;\n        break;\n    }\n  }\n  translateInPage(x, y) {}\n  get toolbarPosition() {\n    return _classPrivateFieldLooseBase(this, _lastPoint)[_lastPoint];\n  }\n  updateParams(type, value) {\n    switch (type) {\n      case AnnotationEditorParamsType.HIGHLIGHT_COLOR:\n        _classPrivateFieldLooseBase(this, _updateColor3)[_updateColor3](value);\n        break;\n      case AnnotationEditorParamsType.HIGHLIGHT_THICKNESS:\n        _classPrivateFieldLooseBase(this, _updateThickness)[_updateThickness](value);\n        break;\n    }\n  }\n  static get defaultPropertiesToUpdate() {\n    return [[AnnotationEditorParamsType.HIGHLIGHT_DEFAULT_COLOR, HighlightEditor._defaultColor], [AnnotationEditorParamsType.HIGHLIGHT_THICKNESS, HighlightEditor._defaultThickness]];\n  }\n  get propertiesToUpdate() {\n    return [[AnnotationEditorParamsType.HIGHLIGHT_COLOR, this.color || HighlightEditor._defaultColor], [AnnotationEditorParamsType.HIGHLIGHT_THICKNESS, _classPrivateFieldLooseBase(this, _thickness2)[_thickness2] || HighlightEditor._defaultThickness], [AnnotationEditorParamsType.HIGHLIGHT_FREE, _classPrivateFieldLooseBase(this, _isFreeHighlight)[_isFreeHighlight]]];\n  }\n  async addEditToolbar() {\n    const toolbar = await super.addEditToolbar();\n    if (!toolbar) {\n      return null;\n    }\n    if (this._uiManager.highlightColors) {\n      _classPrivateFieldLooseBase(this, _colorPicker2)[_colorPicker2] = new ColorPicker({\n        editor: this\n      });\n      toolbar.addColorPicker(_classPrivateFieldLooseBase(this, _colorPicker2)[_colorPicker2]);\n    }\n    return toolbar;\n  }\n  disableEditing() {\n    super.disableEditing();\n    this.div.classList.toggle(\"disabled\", true);\n  }\n  enableEditing() {\n    super.enableEditing();\n    this.div.classList.toggle(\"disabled\", false);\n  }\n  fixAndSetPosition() {\n    return super.fixAndSetPosition(_classPrivateFieldLooseBase(this, _getRotation)[_getRotation]());\n  }\n  getBaseTranslation() {\n    return [0, 0];\n  }\n  getRect(tx, ty) {\n    return super.getRect(tx, ty, _classPrivateFieldLooseBase(this, _getRotation)[_getRotation]());\n  }\n  onceAdded() {\n    if (!this.annotationElementId) {\n      this.parent.addUndoableEditor(this);\n    }\n    this.div.focus();\n  }\n  remove() {\n    _classPrivateFieldLooseBase(this, _cleanDrawLayer)[_cleanDrawLayer]();\n    this._reportTelemetry({\n      action: \"deleted\"\n    });\n    super.remove();\n  }\n  rebuild() {\n    if (!this.parent) {\n      return;\n    }\n    super.rebuild();\n    if (this.div === null) {\n      return;\n    }\n    _classPrivateFieldLooseBase(this, _addToDrawLayer)[_addToDrawLayer]();\n    if (!this.isAttachedToDOM) {\n      this.parent.add(this);\n    }\n  }\n  setParent(parent) {\n    let mustBeSelected = false;\n    if (this.parent && !parent) {\n      _classPrivateFieldLooseBase(this, _cleanDrawLayer)[_cleanDrawLayer]();\n    } else if (parent) {\n      var _this$div6;\n      _classPrivateFieldLooseBase(this, _addToDrawLayer)[_addToDrawLayer](parent);\n      mustBeSelected = !this.parent && ((_this$div6 = this.div) === null || _this$div6 === void 0 ? void 0 : _this$div6.classList.contains(\"selectedEditor\"));\n    }\n    super.setParent(parent);\n    this.show(this._isVisible);\n    if (mustBeSelected) {\n      this.select();\n    }\n  }\n  rotate(angle) {\n    const drawLayer = this.parent.drawLayer;\n    let box;\n    if (_classPrivateFieldLooseBase(this, _isFreeHighlight)[_isFreeHighlight]) {\n      angle = (angle - this.rotation + 360) % 360;\n      box = _classPrivateFieldLooseBase(HighlightEditor, _rotateBbox)[_rotateBbox](_classPrivateFieldLooseBase(this, _highlightOutlines)[_highlightOutlines].box, angle);\n    } else {\n      box = _classPrivateFieldLooseBase(HighlightEditor, _rotateBbox)[_rotateBbox](this, angle);\n    }\n    drawLayer.rotate(_classPrivateFieldLooseBase(this, _id4)[_id4], angle);\n    drawLayer.rotate(_classPrivateFieldLooseBase(this, _outlineId)[_outlineId], angle);\n    drawLayer.updateBox(_classPrivateFieldLooseBase(this, _id4)[_id4], box);\n    drawLayer.updateBox(_classPrivateFieldLooseBase(this, _outlineId)[_outlineId], _classPrivateFieldLooseBase(HighlightEditor, _rotateBbox)[_rotateBbox](_classPrivateFieldLooseBase(this, _focusOutlines)[_focusOutlines].box, angle));\n  }\n  render() {\n    if (this.div) {\n      return this.div;\n    }\n    const div = super.render();\n    if (_classPrivateFieldLooseBase(this, _text)[_text]) {\n      div.setAttribute(\"aria-label\", _classPrivateFieldLooseBase(this, _text)[_text]);\n      div.setAttribute(\"role\", \"mark\");\n    }\n    if (_classPrivateFieldLooseBase(this, _isFreeHighlight)[_isFreeHighlight]) {\n      div.classList.add(\"free\");\n    } else {\n      this.div.addEventListener(\"keydown\", _classPrivateFieldLooseBase(this, _keydown)[_keydown].bind(this), {\n        signal: this._uiManager._signal\n      });\n    }\n    const highlightDiv = _classPrivateFieldLooseBase(this, _highlightDiv)[_highlightDiv] = document.createElement(\"div\");\n    div.append(highlightDiv);\n    highlightDiv.setAttribute(\"aria-hidden\", \"true\");\n    highlightDiv.className = \"internal\";\n    highlightDiv.style.clipPath = _classPrivateFieldLooseBase(this, _clipPathId)[_clipPathId];\n    const _this$parentDimension9 = _slicedToArray(this.parentDimensions, 2),\n      parentWidth = _this$parentDimension9[0],\n      parentHeight = _this$parentDimension9[1];\n    this.setDims(this.width * parentWidth, this.height * parentHeight);\n    bindEvents(this, _classPrivateFieldLooseBase(this, _highlightDiv)[_highlightDiv], [\"pointerover\", \"pointerleave\"]);\n    this.enableEditing();\n    return div;\n  }\n  pointerover() {\n    if (!this.isSelected) {\n      this.parent.drawLayer.addClass(_classPrivateFieldLooseBase(this, _outlineId)[_outlineId], \"hovered\");\n    }\n  }\n  pointerleave() {\n    if (!this.isSelected) {\n      this.parent.drawLayer.removeClass(_classPrivateFieldLooseBase(this, _outlineId)[_outlineId], \"hovered\");\n    }\n  }\n  _moveCaret(direction) {\n    this.parent.unselect(this);\n    switch (direction) {\n      case 0:\n      case 2:\n        _classPrivateFieldLooseBase(this, _setCaret)[_setCaret](true);\n        break;\n      case 1:\n      case 3:\n        _classPrivateFieldLooseBase(this, _setCaret)[_setCaret](false);\n        break;\n    }\n  }\n  select() {\n    var _this$parent4, _this$parent5;\n    super.select();\n    if (!_classPrivateFieldLooseBase(this, _outlineId)[_outlineId]) {\n      return;\n    }\n    (_this$parent4 = this.parent) === null || _this$parent4 === void 0 ? void 0 : _this$parent4.drawLayer.removeClass(_classPrivateFieldLooseBase(this, _outlineId)[_outlineId], \"hovered\");\n    (_this$parent5 = this.parent) === null || _this$parent5 === void 0 ? void 0 : _this$parent5.drawLayer.addClass(_classPrivateFieldLooseBase(this, _outlineId)[_outlineId], \"selected\");\n  }\n  unselect() {\n    var _this$parent6;\n    super.unselect();\n    if (!_classPrivateFieldLooseBase(this, _outlineId)[_outlineId]) {\n      return;\n    }\n    (_this$parent6 = this.parent) === null || _this$parent6 === void 0 ? void 0 : _this$parent6.drawLayer.removeClass(_classPrivateFieldLooseBase(this, _outlineId)[_outlineId], \"selected\");\n    if (!_classPrivateFieldLooseBase(this, _isFreeHighlight)[_isFreeHighlight]) {\n      _classPrivateFieldLooseBase(this, _setCaret)[_setCaret](false);\n    }\n  }\n  get _mustFixPosition() {\n    return !_classPrivateFieldLooseBase(this, _isFreeHighlight)[_isFreeHighlight];\n  }\n  show() {\n    let visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._isVisible;\n    super.show(visible);\n    if (this.parent) {\n      this.parent.drawLayer.show(_classPrivateFieldLooseBase(this, _id4)[_id4], visible);\n      this.parent.drawLayer.show(_classPrivateFieldLooseBase(this, _outlineId)[_outlineId], visible);\n    }\n  }\n  static startHighlighting(parent, isLTR, _ref151) {\n    let textLayer = _ref151.target,\n      x = _ref151.x,\n      y = _ref151.y;\n    const _textLayer$getBoundin2 = textLayer.getBoundingClientRect(),\n      layerX = _textLayer$getBoundin2.x,\n      layerY = _textLayer$getBoundin2.y,\n      parentWidth = _textLayer$getBoundin2.width,\n      parentHeight = _textLayer$getBoundin2.height;\n    const ac = new AbortController();\n    const signal = parent.combinedSignal(ac);\n    const pointerDown = e => {\n      e.preventDefault();\n      e.stopPropagation();\n    };\n    const pointerUpCallback = e => {\n      ac.abort();\n      _classPrivateFieldLooseBase(this, _endHighlight)[_endHighlight](parent, e);\n    };\n    window.addEventListener(\"blur\", pointerUpCallback, {\n      signal\n    });\n    window.addEventListener(\"pointerup\", pointerUpCallback, {\n      signal\n    });\n    window.addEventListener(\"pointerdown\", pointerDown, {\n      capture: true,\n      passive: false,\n      signal\n    });\n    window.addEventListener(\"contextmenu\", noContextMenu, {\n      signal\n    });\n    textLayer.addEventListener(\"pointermove\", _classPrivateFieldLooseBase(this, _highlightMove)[_highlightMove].bind(this, parent), {\n      signal\n    });\n    this._freeHighlight = new FreeHighlightOutliner({\n      x,\n      y\n    }, [layerX, layerY, parentWidth, parentHeight], parent.scale, this._defaultThickness / 2, isLTR, 0.001);\n    var _parent$drawLayer$dra = parent.drawLayer.draw(this._freeHighlight, this._defaultColor, this._defaultOpacity, true);\n    this._freeHighlightId = _parent$drawLayer$dra.id;\n    this._freeHighlightClipId = _parent$drawLayer$dra.clipPathId;\n  }\n  static async deserialize(data, parent, uiManager) {\n    let initialData = null;\n    if (data instanceof HighlightAnnotationElement) {\n      const _data4 = data,\n        _data4$data = _data4.data,\n        quadPoints = _data4$data.quadPoints,\n        rect = _data4$data.rect,\n        rotation = _data4$data.rotation,\n        id = _data4$data.id,\n        color = _data4$data.color,\n        opacity = _data4$data.opacity,\n        popupRef = _data4$data.popupRef,\n        pageNumber = _data4.parent.page.pageNumber;\n      initialData = data = {\n        annotationType: AnnotationEditorType.HIGHLIGHT,\n        color: Array.from(color),\n        opacity,\n        quadPoints,\n        boxes: null,\n        pageIndex: pageNumber - 1,\n        rect: rect.slice(0),\n        rotation,\n        id,\n        deleted: false,\n        popupRef\n      };\n    } else if (data instanceof InkAnnotationElement) {\n      const _data5 = data,\n        _data5$data = _data5.data,\n        inkLists = _data5$data.inkLists,\n        rect = _data5$data.rect,\n        rotation = _data5$data.rotation,\n        id = _data5$data.id,\n        color = _data5$data.color,\n        thickness = _data5$data.borderStyle.rawWidth,\n        popupRef = _data5$data.popupRef,\n        pageNumber = _data5.parent.page.pageNumber;\n      initialData = data = {\n        annotationType: AnnotationEditorType.HIGHLIGHT,\n        color: Array.from(color),\n        thickness,\n        inkLists,\n        boxes: null,\n        pageIndex: pageNumber - 1,\n        rect: rect.slice(0),\n        rotation,\n        id,\n        deleted: false,\n        popupRef\n      };\n    }\n    const _data6 = data,\n      color = _data6.color,\n      quadPoints = _data6.quadPoints,\n      inkLists = _data6.inkLists,\n      opacity = _data6.opacity;\n    const editor = await super.deserialize(data, parent, uiManager);\n    editor.color = Util.makeHexColor(...color);\n    _classPrivateFieldLooseBase(editor, _opacity)[_opacity] = opacity || 1;\n    if (inkLists) {\n      _classPrivateFieldLooseBase(editor, _thickness2)[_thickness2] = data.thickness;\n    }\n    editor.annotationElementId = data.id || null;\n    editor._initialData = initialData;\n    const _editor$pageDimension2 = _slicedToArray(editor.pageDimensions, 2),\n      pageWidth = _editor$pageDimension2[0],\n      pageHeight = _editor$pageDimension2[1];\n    const _editor$pageTranslati = _slicedToArray(editor.pageTranslation, 2),\n      pageX = _editor$pageTranslati[0],\n      pageY = _editor$pageTranslati[1];\n    if (quadPoints) {\n      const boxes = _classPrivateFieldLooseBase(editor, _boxes)[_boxes] = [];\n      for (let i = 0; i < quadPoints.length; i += 8) {\n        boxes.push({\n          x: (quadPoints[i] - pageX) / pageWidth,\n          y: 1 - (quadPoints[i + 1] - pageY) / pageHeight,\n          width: (quadPoints[i + 2] - quadPoints[i]) / pageWidth,\n          height: (quadPoints[i + 1] - quadPoints[i + 5]) / pageHeight\n        });\n      }\n      _classPrivateFieldLooseBase(editor, _createOutlines)[_createOutlines]();\n      _classPrivateFieldLooseBase(editor, _addToDrawLayer)[_addToDrawLayer]();\n      editor.rotate(editor.rotation);\n    } else if (inkLists) {\n      _classPrivateFieldLooseBase(editor, _isFreeHighlight)[_isFreeHighlight] = true;\n      const points = inkLists[0];\n      const point = {\n        x: points[0] - pageX,\n        y: pageHeight - (points[1] - pageY)\n      };\n      const outliner = new FreeHighlightOutliner(point, [0, 0, pageWidth, pageHeight], 1, _classPrivateFieldLooseBase(editor, _thickness2)[_thickness2] / 2, true, 0.001);\n      for (let i = 0, ii = points.length; i < ii; i += 2) {\n        point.x = points[i] - pageX;\n        point.y = pageHeight - (points[i + 1] - pageY);\n        outliner.add(point);\n      }\n      const _parent$drawLayer$dra2 = parent.drawLayer.draw(outliner, editor.color, editor._defaultOpacity, true),\n        id = _parent$drawLayer$dra2.id,\n        clipPathId = _parent$drawLayer$dra2.clipPathId;\n      _classPrivateFieldLooseBase(editor, _createFreeOutlines)[_createFreeOutlines]({\n        highlightOutlines: outliner.getOutlines(),\n        highlightId: id,\n        clipPathId\n      });\n      _classPrivateFieldLooseBase(editor, _addToDrawLayer)[_addToDrawLayer]();\n    }\n    return editor;\n  }\n  serialize() {\n    let isForCopying = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (this.isEmpty() || isForCopying) {\n      return null;\n    }\n    if (this.deleted) {\n      return this.serializeDeleted();\n    }\n    const rect = this.getRect(0, 0);\n    const color = AnnotationEditor._colorManager.convert(this.color);\n    const serialized = {\n      annotationType: AnnotationEditorType.HIGHLIGHT,\n      color,\n      opacity: _classPrivateFieldLooseBase(this, _opacity)[_opacity],\n      thickness: _classPrivateFieldLooseBase(this, _thickness2)[_thickness2],\n      quadPoints: _classPrivateFieldLooseBase(this, _serializeBoxes)[_serializeBoxes](),\n      outlines: _classPrivateFieldLooseBase(this, _serializeOutlines)[_serializeOutlines](rect),\n      pageIndex: this.pageIndex,\n      rect,\n      rotation: _classPrivateFieldLooseBase(this, _getRotation)[_getRotation](),\n      structTreeParentId: this._structTreeParentId\n    };\n    if (this.annotationElementId && !_classPrivateFieldLooseBase(this, _hasElementChanged3)[_hasElementChanged3](serialized)) {\n      return null;\n    }\n    serialized.id = this.annotationElementId;\n    return serialized;\n  }\n  renderAnnotationElement(annotation) {\n    annotation.updateEdited({\n      rect: this.getRect(0, 0)\n    });\n    return null;\n  }\n  static canCreateNewEmptyEditor() {\n    return false;\n  }\n}\n_HighlightEditor = HighlightEditor;\nfunction _createOutlines2() {\n  const outliner = new HighlightOutliner(_classPrivateFieldLooseBase(this, _boxes)[_boxes], 0.001);\n  _classPrivateFieldLooseBase(this, _highlightOutlines)[_highlightOutlines] = outliner.getOutlines();\n  var _classPrivateFieldLoo172 = _classPrivateFieldLooseBase(this, _highlightOutlines)[_highlightOutlines].box;\n  this.x = _classPrivateFieldLoo172.x;\n  this.y = _classPrivateFieldLoo172.y;\n  this.width = _classPrivateFieldLoo172.width;\n  this.height = _classPrivateFieldLoo172.height;\n  const outlinerForOutline = new HighlightOutliner(_classPrivateFieldLooseBase(this, _boxes)[_boxes], 0.0025, 0.001, this._uiManager.direction === \"ltr\");\n  _classPrivateFieldLooseBase(this, _focusOutlines)[_focusOutlines] = outlinerForOutline.getOutlines();\n  const lastPoint = _classPrivateFieldLooseBase(this, _focusOutlines)[_focusOutlines].box.lastPoint;\n  _classPrivateFieldLooseBase(this, _lastPoint)[_lastPoint] = [(lastPoint[0] - this.x) / this.width, (lastPoint[1] - this.y) / this.height];\n}\nfunction _createFreeOutlines2(_ref175) {\n  let highlightOutlines = _ref175.highlightOutlines,\n    highlightId = _ref175.highlightId,\n    clipPathId = _ref175.clipPathId;\n  _classPrivateFieldLooseBase(this, _highlightOutlines)[_highlightOutlines] = highlightOutlines;\n  const extraThickness = 1.5;\n  _classPrivateFieldLooseBase(this, _focusOutlines)[_focusOutlines] = highlightOutlines.getNewOutline(_classPrivateFieldLooseBase(this, _thickness2)[_thickness2] / 2 + extraThickness, 0.0025);\n  if (highlightId >= 0) {\n    _classPrivateFieldLooseBase(this, _id4)[_id4] = highlightId;\n    _classPrivateFieldLooseBase(this, _clipPathId)[_clipPathId] = clipPathId;\n    this.parent.drawLayer.finalizeLine(highlightId, highlightOutlines);\n    _classPrivateFieldLooseBase(this, _outlineId)[_outlineId] = this.parent.drawLayer.drawOutline(_classPrivateFieldLooseBase(this, _focusOutlines)[_focusOutlines]);\n  } else if (this.parent) {\n    const angle = this.parent.viewport.rotation;\n    this.parent.drawLayer.updateLine(_classPrivateFieldLooseBase(this, _id4)[_id4], highlightOutlines);\n    this.parent.drawLayer.updateBox(_classPrivateFieldLooseBase(this, _id4)[_id4], _classPrivateFieldLooseBase(_HighlightEditor, _rotateBbox)[_rotateBbox](_classPrivateFieldLooseBase(this, _highlightOutlines)[_highlightOutlines].box, (angle - this.rotation + 360) % 360));\n    this.parent.drawLayer.updateLine(_classPrivateFieldLooseBase(this, _outlineId)[_outlineId], _classPrivateFieldLooseBase(this, _focusOutlines)[_focusOutlines]);\n    this.parent.drawLayer.updateBox(_classPrivateFieldLooseBase(this, _outlineId)[_outlineId], _classPrivateFieldLooseBase(_HighlightEditor, _rotateBbox)[_rotateBbox](_classPrivateFieldLooseBase(this, _focusOutlines)[_focusOutlines].box, angle));\n  }\n  const _highlightOutlines$bo = highlightOutlines.box,\n    x = _highlightOutlines$bo.x,\n    y = _highlightOutlines$bo.y,\n    width = _highlightOutlines$bo.width,\n    height = _highlightOutlines$bo.height;\n  switch (this.rotation) {\n    case 0:\n      this.x = x;\n      this.y = y;\n      this.width = width;\n      this.height = height;\n      break;\n    case 90:\n      {\n        const _this$parentDimension16 = _slicedToArray(this.parentDimensions, 2),\n          pageWidth = _this$parentDimension16[0],\n          pageHeight = _this$parentDimension16[1];\n        this.x = y;\n        this.y = 1 - x;\n        this.width = width * pageHeight / pageWidth;\n        this.height = height * pageWidth / pageHeight;\n        break;\n      }\n    case 180:\n      this.x = 1 - x;\n      this.y = 1 - y;\n      this.width = width;\n      this.height = height;\n      break;\n    case 270:\n      {\n        const _this$parentDimension17 = _slicedToArray(this.parentDimensions, 2),\n          pageWidth = _this$parentDimension17[0],\n          pageHeight = _this$parentDimension17[1];\n        this.x = 1 - y;\n        this.y = x;\n        this.width = width * pageHeight / pageWidth;\n        this.height = height * pageWidth / pageHeight;\n        break;\n      }\n  }\n  const lastPoint = _classPrivateFieldLooseBase(this, _focusOutlines)[_focusOutlines].box.lastPoint;\n  _classPrivateFieldLooseBase(this, _lastPoint)[_lastPoint] = [(lastPoint[0] - x) / width, (lastPoint[1] - y) / height];\n}\nfunction _updateColor4(color) {\n  const setColorAndOpacity = (col, opa) => {\n    var _this$parent7, _classPrivateFieldLoo173, _this$parent8;\n    this.color = col;\n    (_this$parent7 = this.parent) === null || _this$parent7 === void 0 ? void 0 : _this$parent7.drawLayer.changeColor(_classPrivateFieldLooseBase(this, _id4)[_id4], col);\n    (_classPrivateFieldLoo173 = _classPrivateFieldLooseBase(this, _colorPicker2)[_colorPicker2]) === null || _classPrivateFieldLoo173 === void 0 ? void 0 : _classPrivateFieldLoo173.updateColor(col);\n    _classPrivateFieldLooseBase(this, _opacity)[_opacity] = opa;\n    (_this$parent8 = this.parent) === null || _this$parent8 === void 0 ? void 0 : _this$parent8.drawLayer.changeOpacity(_classPrivateFieldLooseBase(this, _id4)[_id4], opa);\n  };\n  const savedColor = this.color;\n  const savedOpacity = _classPrivateFieldLooseBase(this, _opacity)[_opacity];\n  this.addCommands({\n    cmd: setColorAndOpacity.bind(this, color, _HighlightEditor._defaultOpacity),\n    undo: setColorAndOpacity.bind(this, savedColor, savedOpacity),\n    post: this._uiManager.updateUI.bind(this._uiManager, this),\n    mustExec: true,\n    type: AnnotationEditorParamsType.HIGHLIGHT_COLOR,\n    overwriteIfSameType: true,\n    keepUndo: true\n  });\n  this._reportTelemetry({\n    action: \"color_changed\",\n    color: this._uiManager.highlightColorNames.get(color)\n  }, true);\n}\nfunction _updateThickness2(thickness) {\n  const savedThickness = _classPrivateFieldLooseBase(this, _thickness2)[_thickness2];\n  const setThickness = th => {\n    _classPrivateFieldLooseBase(this, _thickness2)[_thickness2] = th;\n    _classPrivateFieldLooseBase(this, _changeThickness)[_changeThickness](th);\n  };\n  this.addCommands({\n    cmd: setThickness.bind(this, thickness),\n    undo: setThickness.bind(this, savedThickness),\n    post: this._uiManager.updateUI.bind(this._uiManager, this),\n    mustExec: true,\n    type: AnnotationEditorParamsType.INK_THICKNESS,\n    overwriteIfSameType: true,\n    keepUndo: true\n  });\n  this._reportTelemetry({\n    action: \"thickness_changed\",\n    thickness\n  }, true);\n}\nfunction _changeThickness2(thickness) {\n  if (!_classPrivateFieldLooseBase(this, _isFreeHighlight)[_isFreeHighlight]) {\n    return;\n  }\n  _classPrivateFieldLooseBase(this, _createFreeOutlines)[_createFreeOutlines]({\n    highlightOutlines: _classPrivateFieldLooseBase(this, _highlightOutlines)[_highlightOutlines].getNewOutline(thickness / 2)\n  });\n  this.fixAndSetPosition();\n  const _this$parentDimension18 = _slicedToArray(this.parentDimensions, 2),\n    parentWidth = _this$parentDimension18[0],\n    parentHeight = _this$parentDimension18[1];\n  this.setDims(this.width * parentWidth, this.height * parentHeight);\n}\nfunction _cleanDrawLayer2() {\n  if (_classPrivateFieldLooseBase(this, _id4)[_id4] === null || !this.parent) {\n    return;\n  }\n  this.parent.drawLayer.remove(_classPrivateFieldLooseBase(this, _id4)[_id4]);\n  _classPrivateFieldLooseBase(this, _id4)[_id4] = null;\n  this.parent.drawLayer.remove(_classPrivateFieldLooseBase(this, _outlineId)[_outlineId]);\n  _classPrivateFieldLooseBase(this, _outlineId)[_outlineId] = null;\n}\nfunction _addToDrawLayer2() {\n  let parent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.parent;\n  if (_classPrivateFieldLooseBase(this, _id4)[_id4] !== null) {\n    return;\n  }\n  var _parent$drawLayer$dra3 = parent.drawLayer.draw(_classPrivateFieldLooseBase(this, _highlightOutlines)[_highlightOutlines], this.color, _classPrivateFieldLooseBase(this, _opacity)[_opacity]);\n  _classPrivateFieldLooseBase(this, _id4)[_id4] = _parent$drawLayer$dra3.id;\n  _classPrivateFieldLooseBase(this, _clipPathId)[_clipPathId] = _parent$drawLayer$dra3.clipPathId;\n  _classPrivateFieldLooseBase(this, _outlineId)[_outlineId] = parent.drawLayer.drawOutline(_classPrivateFieldLooseBase(this, _focusOutlines)[_focusOutlines]);\n  if (_classPrivateFieldLooseBase(this, _highlightDiv)[_highlightDiv]) {\n    _classPrivateFieldLooseBase(this, _highlightDiv)[_highlightDiv].style.clipPath = _classPrivateFieldLooseBase(this, _clipPathId)[_clipPathId];\n  }\n}\nfunction _rotateBbox2(_ref176, angle) {\n  let x = _ref176.x,\n    y = _ref176.y,\n    width = _ref176.width,\n    height = _ref176.height;\n  switch (angle) {\n    case 90:\n      return {\n        x: 1 - y - height,\n        y: x,\n        width: height,\n        height: width\n      };\n    case 180:\n      return {\n        x: 1 - x - width,\n        y: 1 - y - height,\n        width,\n        height\n      };\n    case 270:\n      return {\n        x: y,\n        y: 1 - x - width,\n        width: height,\n        height: width\n      };\n  }\n  return {\n    x,\n    y,\n    width,\n    height\n  };\n}\nfunction _keydown2(event) {\n  _HighlightEditor._keyboardManager.exec(this, event);\n}\nfunction _setCaret2(start) {\n  if (!_classPrivateFieldLooseBase(this, _anchorNode)[_anchorNode]) {\n    return;\n  }\n  const selection = window.getSelection();\n  if (start) {\n    selection.setPosition(_classPrivateFieldLooseBase(this, _anchorNode)[_anchorNode], _classPrivateFieldLooseBase(this, _anchorOffset)[_anchorOffset]);\n  } else {\n    selection.setPosition(_classPrivateFieldLooseBase(this, _focusNode)[_focusNode], _classPrivateFieldLooseBase(this, _focusOffset)[_focusOffset]);\n  }\n}\nfunction _getRotation2() {\n  return _classPrivateFieldLooseBase(this, _isFreeHighlight)[_isFreeHighlight] ? this.rotation : 0;\n}\nfunction _serializeBoxes2() {\n  if (_classPrivateFieldLooseBase(this, _isFreeHighlight)[_isFreeHighlight]) {\n    return null;\n  }\n  const _this$pageDimensions8 = _slicedToArray(this.pageDimensions, 2),\n    pageWidth = _this$pageDimensions8[0],\n    pageHeight = _this$pageDimensions8[1];\n  const _this$pageTranslation5 = _slicedToArray(this.pageTranslation, 2),\n    pageX = _this$pageTranslation5[0],\n    pageY = _this$pageTranslation5[1];\n  const boxes = _classPrivateFieldLooseBase(this, _boxes)[_boxes];\n  const quadPoints = new Float32Array(boxes.length * 8);\n  let i = 0;\n  for (const _ref177 of boxes) {\n    const x = _ref177.x;\n    const y = _ref177.y;\n    const width = _ref177.width;\n    const height = _ref177.height;\n    const sx = x * pageWidth + pageX;\n    const sy = (1 - y - height) * pageHeight + pageY;\n    quadPoints[i] = quadPoints[i + 4] = sx;\n    quadPoints[i + 1] = quadPoints[i + 3] = sy;\n    quadPoints[i + 2] = quadPoints[i + 6] = sx + width * pageWidth;\n    quadPoints[i + 5] = quadPoints[i + 7] = sy + height * pageHeight;\n    i += 8;\n  }\n  return quadPoints;\n}\nfunction _serializeOutlines2(rect) {\n  return _classPrivateFieldLooseBase(this, _highlightOutlines)[_highlightOutlines].serialize(rect, _classPrivateFieldLooseBase(this, _getRotation)[_getRotation]());\n}\nfunction _highlightMove2(parent, event) {\n  if (this._freeHighlight.add(event)) {\n    parent.drawLayer.updatePath(this._freeHighlightId, this._freeHighlight);\n  }\n}\nfunction _endHighlight2(parent, event) {\n  if (!this._freeHighlight.isEmpty()) {\n    parent.createAndAddNewEditor(event, false, {\n      highlightId: this._freeHighlightId,\n      highlightOutlines: this._freeHighlight.getOutlines(),\n      clipPathId: this._freeHighlightClipId,\n      methodOfCreation: \"main_toolbar\"\n    });\n  } else {\n    parent.drawLayer.remove(this._freeHighlightId);\n  }\n  this._freeHighlightId = -1;\n  this._freeHighlight = null;\n  this._freeHighlightClipId = \"\";\n}\nfunction _hasElementChanged4(serialized) {\n  const color = this._initialData.color;\n  return serialized.color.some((c, i) => c !== color[i]);\n}\nObject.defineProperty(HighlightEditor, _endHighlight, {\n  value: _endHighlight2\n});\nObject.defineProperty(HighlightEditor, _highlightMove, {\n  value: _highlightMove2\n});\nObject.defineProperty(HighlightEditor, _rotateBbox, {\n  value: _rotateBbox2\n});\nHighlightEditor._defaultColor = null;\nHighlightEditor._defaultOpacity = 1;\nHighlightEditor._defaultThickness = 12;\nHighlightEditor._type = \"highlight\";\nHighlightEditor._editorType = AnnotationEditorType.HIGHLIGHT;\nHighlightEditor._freeHighlightId = -1;\nHighlightEditor._freeHighlight = null;\nHighlightEditor._freeHighlightClipId = \"\";\n; // ./src/display/editor/ink.js\nvar _baseHeight = /*#__PURE__*/_classPrivateFieldLooseKey(\"baseHeight\");\nvar _baseWidth = /*#__PURE__*/_classPrivateFieldLooseKey(\"baseWidth\");\nvar _canvasContextMenuTimeoutId = /*#__PURE__*/_classPrivateFieldLooseKey(\"canvasContextMenuTimeoutId\");\nvar _currentPath2D = /*#__PURE__*/_classPrivateFieldLooseKey(\"currentPath2D\");\nvar _disableEditing = /*#__PURE__*/_classPrivateFieldLooseKey(\"disableEditing\");\nvar _drawingAC = /*#__PURE__*/_classPrivateFieldLooseKey(\"drawingAC\");\nvar _hasSomethingToDraw = /*#__PURE__*/_classPrivateFieldLooseKey(\"hasSomethingToDraw\");\nvar _isCanvasInitialized = /*#__PURE__*/_classPrivateFieldLooseKey(\"isCanvasInitialized\");\nvar _observer = /*#__PURE__*/_classPrivateFieldLooseKey(\"observer\");\nvar _pointerdownAC = /*#__PURE__*/_classPrivateFieldLooseKey(\"pointerdownAC\");\nvar _realWidth = /*#__PURE__*/_classPrivateFieldLooseKey(\"realWidth\");\nvar _realHeight = /*#__PURE__*/_classPrivateFieldLooseKey(\"realHeight\");\nvar _requestFrameCallback = /*#__PURE__*/_classPrivateFieldLooseKey(\"requestFrameCallback\");\nvar _updateThickness3 = /*#__PURE__*/_classPrivateFieldLooseKey(\"updateThickness\");\nvar _updateColor5 = /*#__PURE__*/_classPrivateFieldLooseKey(\"updateColor\");\nvar _updateOpacity = /*#__PURE__*/_classPrivateFieldLooseKey(\"updateOpacity\");\nvar _getInitialBBox = /*#__PURE__*/_classPrivateFieldLooseKey(\"getInitialBBox\");\nvar _setStroke = /*#__PURE__*/_classPrivateFieldLooseKey(\"setStroke\");\nvar _startDrawing = /*#__PURE__*/_classPrivateFieldLooseKey(\"startDrawing\");\nvar _draw = /*#__PURE__*/_classPrivateFieldLooseKey(\"draw\");\nvar _endPath = /*#__PURE__*/_classPrivateFieldLooseKey(\"endPath\");\nvar _stopDrawing = /*#__PURE__*/_classPrivateFieldLooseKey(\"stopDrawing\");\nvar _drawPoints = /*#__PURE__*/_classPrivateFieldLooseKey(\"drawPoints\");\nvar _makeBezierCurve = /*#__PURE__*/_classPrivateFieldLooseKey(\"makeBezierCurve\");\nvar _generateBezierPoints = /*#__PURE__*/_classPrivateFieldLooseKey(\"generateBezierPoints\");\nvar _redraw = /*#__PURE__*/_classPrivateFieldLooseKey(\"redraw\");\nvar _addPointerdownListener = /*#__PURE__*/_classPrivateFieldLooseKey(\"addPointerdownListener\");\nvar _removePointerdownListener = /*#__PURE__*/_classPrivateFieldLooseKey(\"removePointerdownListener\");\nvar _endDrawing = /*#__PURE__*/_classPrivateFieldLooseKey(\"endDrawing\");\nvar _createCanvas = /*#__PURE__*/_classPrivateFieldLooseKey(\"createCanvas\");\nvar _createObserver = /*#__PURE__*/_classPrivateFieldLooseKey(\"createObserver\");\nvar _setCanvasDims = /*#__PURE__*/_classPrivateFieldLooseKey(\"setCanvasDims\");\nvar _setScaleFactor = /*#__PURE__*/_classPrivateFieldLooseKey(\"setScaleFactor\");\nvar _updateTransform = /*#__PURE__*/_classPrivateFieldLooseKey(\"updateTransform\");\nvar _buildPath2D = /*#__PURE__*/_classPrivateFieldLooseKey(\"buildPath2D\");\nvar _toPDFCoordinates = /*#__PURE__*/_classPrivateFieldLooseKey(\"toPDFCoordinates\");\nvar _fromPDFCoordinates = /*#__PURE__*/_classPrivateFieldLooseKey(\"fromPDFCoordinates\");\nvar _serializePaths = /*#__PURE__*/_classPrivateFieldLooseKey(\"serializePaths\");\nvar _getBbox = /*#__PURE__*/_classPrivateFieldLooseKey(\"getBbox\");\nvar _getPadding = /*#__PURE__*/_classPrivateFieldLooseKey(\"getPadding\");\nvar _fitToContent = /*#__PURE__*/_classPrivateFieldLooseKey(\"fitToContent\");\nclass InkEditor extends AnnotationEditor {\n  constructor(params) {\n    super(_objectSpread(_objectSpread({}, params), {}, {\n      name: \"inkEditor\"\n    }));\n    Object.defineProperty(this, _fitToContent, {\n      value: _fitToContent2\n    });\n    Object.defineProperty(this, _getPadding, {\n      value: _getPadding2\n    });\n    Object.defineProperty(this, _getBbox, {\n      value: _getBbox2\n    });\n    Object.defineProperty(this, _serializePaths, {\n      value: _serializePaths2\n    });\n    Object.defineProperty(this, _updateTransform, {\n      value: _updateTransform2\n    });\n    Object.defineProperty(this, _setScaleFactor, {\n      value: _setScaleFactor2\n    });\n    Object.defineProperty(this, _setCanvasDims, {\n      value: _setCanvasDims2\n    });\n    Object.defineProperty(this, _createObserver, {\n      value: _createObserver2\n    });\n    Object.defineProperty(this, _createCanvas, {\n      value: _createCanvas2\n    });\n    Object.defineProperty(this, _endDrawing, {\n      value: _endDrawing2\n    });\n    Object.defineProperty(this, _removePointerdownListener, {\n      value: _removePointerdownListener2\n    });\n    Object.defineProperty(this, _addPointerdownListener, {\n      value: _addPointerdownListener2\n    });\n    Object.defineProperty(this, _redraw, {\n      value: _redraw2\n    });\n    Object.defineProperty(this, _generateBezierPoints, {\n      value: _generateBezierPoints2\n    });\n    Object.defineProperty(this, _makeBezierCurve, {\n      value: _makeBezierCurve2\n    });\n    Object.defineProperty(this, _drawPoints, {\n      value: _drawPoints2\n    });\n    Object.defineProperty(this, _stopDrawing, {\n      value: _stopDrawing2\n    });\n    Object.defineProperty(this, _endPath, {\n      value: _endPath2\n    });\n    Object.defineProperty(this, _draw, {\n      value: _draw2\n    });\n    Object.defineProperty(this, _startDrawing, {\n      value: _startDrawing2\n    });\n    Object.defineProperty(this, _setStroke, {\n      value: _setStroke2\n    });\n    Object.defineProperty(this, _getInitialBBox, {\n      value: _getInitialBBox2\n    });\n    Object.defineProperty(this, _updateOpacity, {\n      value: _updateOpacity2\n    });\n    Object.defineProperty(this, _updateColor5, {\n      value: _updateColor6\n    });\n    Object.defineProperty(this, _updateThickness3, {\n      value: _updateThickness4\n    });\n    Object.defineProperty(this, _baseHeight, {\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, _baseWidth, {\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, _canvasContextMenuTimeoutId, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _currentPath2D, {\n      writable: true,\n      value: new Path2D()\n    });\n    Object.defineProperty(this, _disableEditing, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _drawingAC, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _hasSomethingToDraw, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _isCanvasInitialized, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _observer, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _pointerdownAC, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _realWidth, {\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, _realHeight, {\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, _requestFrameCallback, {\n      writable: true,\n      value: null\n    });\n    this.color = params.color || null;\n    this.thickness = params.thickness || null;\n    this.opacity = params.opacity || null;\n    this.paths = [];\n    this.bezierPath2D = [];\n    this.allRawPaths = [];\n    this.currentPath = [];\n    this.scaleFactor = 1;\n    this.translationX = this.translationY = 0;\n    this.x = 0;\n    this.y = 0;\n    this._willKeepAspectRatio = true;\n  }\n  static initialize(l10n, uiManager) {\n    AnnotationEditor.initialize(l10n, uiManager);\n  }\n  static updateDefaultParams(type, value) {\n    switch (type) {\n      case AnnotationEditorParamsType.INK_THICKNESS:\n        InkEditor._defaultThickness = value;\n        break;\n      case AnnotationEditorParamsType.INK_COLOR:\n        InkEditor._defaultColor = value;\n        break;\n      case AnnotationEditorParamsType.INK_OPACITY:\n        InkEditor._defaultOpacity = value / 100;\n        break;\n    }\n  }\n  updateParams(type, value) {\n    switch (type) {\n      case AnnotationEditorParamsType.INK_THICKNESS:\n        _classPrivateFieldLooseBase(this, _updateThickness3)[_updateThickness3](value);\n        break;\n      case AnnotationEditorParamsType.INK_COLOR:\n        _classPrivateFieldLooseBase(this, _updateColor5)[_updateColor5](value);\n        break;\n      case AnnotationEditorParamsType.INK_OPACITY:\n        _classPrivateFieldLooseBase(this, _updateOpacity)[_updateOpacity](value);\n        break;\n    }\n  }\n  static get defaultPropertiesToUpdate() {\n    return [[AnnotationEditorParamsType.INK_THICKNESS, InkEditor._defaultThickness], [AnnotationEditorParamsType.INK_COLOR, InkEditor._defaultColor || AnnotationEditor._defaultLineColor], [AnnotationEditorParamsType.INK_OPACITY, Math.round(InkEditor._defaultOpacity * 100)]];\n  }\n  get propertiesToUpdate() {\n    var _this$opacity;\n    return [[AnnotationEditorParamsType.INK_THICKNESS, this.thickness || InkEditor._defaultThickness], [AnnotationEditorParamsType.INK_COLOR, this.color || InkEditor._defaultColor || AnnotationEditor._defaultLineColor], [AnnotationEditorParamsType.INK_OPACITY, Math.round(100 * ((_this$opacity = this.opacity) !== null && _this$opacity !== void 0 ? _this$opacity : InkEditor._defaultOpacity))]];\n  }\n  rebuild() {\n    if (!this.parent) {\n      return;\n    }\n    super.rebuild();\n    if (this.div === null) {\n      return;\n    }\n    if (!this.canvas) {\n      _classPrivateFieldLooseBase(this, _createCanvas)[_createCanvas]();\n      _classPrivateFieldLooseBase(this, _createObserver)[_createObserver]();\n    }\n    if (!this.isAttachedToDOM) {\n      this.parent.add(this);\n      _classPrivateFieldLooseBase(this, _setCanvasDims)[_setCanvasDims]();\n    }\n    _classPrivateFieldLooseBase(this, _fitToContent)[_fitToContent]();\n  }\n  remove() {\n    var _classPrivateFieldLoo105;\n    if (this.canvas === null) {\n      return;\n    }\n    if (!this.isEmpty()) {\n      this.commit();\n    }\n    this.canvas.width = this.canvas.height = 0;\n    this.canvas.remove();\n    this.canvas = null;\n    if (_classPrivateFieldLooseBase(this, _canvasContextMenuTimeoutId)[_canvasContextMenuTimeoutId]) {\n      clearTimeout(_classPrivateFieldLooseBase(this, _canvasContextMenuTimeoutId)[_canvasContextMenuTimeoutId]);\n      _classPrivateFieldLooseBase(this, _canvasContextMenuTimeoutId)[_canvasContextMenuTimeoutId] = null;\n    }\n    (_classPrivateFieldLoo105 = _classPrivateFieldLooseBase(this, _observer)[_observer]) === null || _classPrivateFieldLoo105 === void 0 ? void 0 : _classPrivateFieldLoo105.disconnect();\n    _classPrivateFieldLooseBase(this, _observer)[_observer] = null;\n    super.remove();\n  }\n  setParent(parent) {\n    if (!this.parent && parent) {\n      this._uiManager.removeShouldRescale(this);\n    } else if (this.parent && parent === null) {\n      this._uiManager.addShouldRescale(this);\n    }\n    super.setParent(parent);\n  }\n  onScaleChanging() {\n    const _this$parentDimension0 = _slicedToArray(this.parentDimensions, 2),\n      parentWidth = _this$parentDimension0[0],\n      parentHeight = _this$parentDimension0[1];\n    const width = this.width * parentWidth;\n    const height = this.height * parentHeight;\n    this.setDimensions(width, height);\n  }\n  enableEditMode() {\n    if (_classPrivateFieldLooseBase(this, _disableEditing)[_disableEditing] || this.canvas === null) {\n      return;\n    }\n    super.enableEditMode();\n    this._isDraggable = false;\n    _classPrivateFieldLooseBase(this, _addPointerdownListener)[_addPointerdownListener]();\n  }\n  disableEditMode() {\n    if (!this.isInEditMode() || this.canvas === null) {\n      return;\n    }\n    super.disableEditMode();\n    this._isDraggable = !this.isEmpty();\n    this.div.classList.remove(\"editing\");\n    _classPrivateFieldLooseBase(this, _removePointerdownListener)[_removePointerdownListener]();\n  }\n  onceAdded() {\n    this._isDraggable = !this.isEmpty();\n  }\n  isEmpty() {\n    return this.paths.length === 0 || this.paths.length === 1 && this.paths[0].length === 0;\n  }\n  commit() {\n    if (_classPrivateFieldLooseBase(this, _disableEditing)[_disableEditing]) {\n      return;\n    }\n    super.commit();\n    this.isEditing = false;\n    this.disableEditMode();\n    this.setInForeground();\n    _classPrivateFieldLooseBase(this, _disableEditing)[_disableEditing] = true;\n    this.div.classList.add(\"disabled\");\n    _classPrivateFieldLooseBase(this, _fitToContent)[_fitToContent](true);\n    this.select();\n    this.parent.addInkEditorIfNeeded(true);\n    this.moveInDOM();\n    this.div.focus({\n      preventScroll: true\n    });\n  }\n  focusin(event) {\n    if (!this._focusEventsAllowed) {\n      return;\n    }\n    super.focusin(event);\n    this.enableEditMode();\n  }\n  canvasPointerdown(event) {\n    if (event.button !== 0 || !this.isInEditMode() || _classPrivateFieldLooseBase(this, _disableEditing)[_disableEditing]) {\n      return;\n    }\n    this.setInForeground();\n    event.preventDefault();\n    if (!this.div.contains(document.activeElement)) {\n      this.div.focus({\n        preventScroll: true\n      });\n    }\n    _classPrivateFieldLooseBase(this, _startDrawing)[_startDrawing](event.offsetX, event.offsetY);\n  }\n  canvasPointermove(event) {\n    event.preventDefault();\n    _classPrivateFieldLooseBase(this, _draw)[_draw](event.offsetX, event.offsetY);\n  }\n  canvasPointerup(event) {\n    event.preventDefault();\n    _classPrivateFieldLooseBase(this, _endDrawing)[_endDrawing](event);\n  }\n  canvasPointerleave(event) {\n    _classPrivateFieldLooseBase(this, _endDrawing)[_endDrawing](event);\n  }\n  get isResizable() {\n    return !this.isEmpty() && _classPrivateFieldLooseBase(this, _disableEditing)[_disableEditing];\n  }\n  render() {\n    if (this.div) {\n      return this.div;\n    }\n    let baseX, baseY;\n    if (this.width) {\n      baseX = this.x;\n      baseY = this.y;\n    }\n    super.render();\n    this.div.setAttribute(\"data-l10n-id\", \"pdfjs-ink\");\n    const _classPrivateFieldLoo106 = _classPrivateFieldLooseBase(this, _getInitialBBox)[_getInitialBBox](),\n      _classPrivateFieldLoo107 = _slicedToArray(_classPrivateFieldLoo106, 4),\n      x = _classPrivateFieldLoo107[0],\n      y = _classPrivateFieldLoo107[1],\n      w = _classPrivateFieldLoo107[2],\n      h = _classPrivateFieldLoo107[3];\n    this.setAt(x, y, 0, 0);\n    this.setDims(w, h);\n    _classPrivateFieldLooseBase(this, _createCanvas)[_createCanvas]();\n    if (this.width) {\n      const _this$parentDimension1 = _slicedToArray(this.parentDimensions, 2),\n        parentWidth = _this$parentDimension1[0],\n        parentHeight = _this$parentDimension1[1];\n      this.setAspectRatio(this.width * parentWidth, this.height * parentHeight);\n      this.setAt(baseX * parentWidth, baseY * parentHeight, this.width * parentWidth, this.height * parentHeight);\n      _classPrivateFieldLooseBase(this, _isCanvasInitialized)[_isCanvasInitialized] = true;\n      _classPrivateFieldLooseBase(this, _setCanvasDims)[_setCanvasDims]();\n      this.setDims(this.width * parentWidth, this.height * parentHeight);\n      _classPrivateFieldLooseBase(this, _redraw)[_redraw]();\n      this.div.classList.add(\"disabled\");\n    } else {\n      this.div.classList.add(\"editing\");\n      this.enableEditMode();\n    }\n    _classPrivateFieldLooseBase(this, _createObserver)[_createObserver]();\n    return this.div;\n  }\n  setDimensions(width, height) {\n    const roundedWidth = Math.round(width);\n    const roundedHeight = Math.round(height);\n    if (_classPrivateFieldLooseBase(this, _realWidth)[_realWidth] === roundedWidth && _classPrivateFieldLooseBase(this, _realHeight)[_realHeight] === roundedHeight) {\n      return;\n    }\n    _classPrivateFieldLooseBase(this, _realWidth)[_realWidth] = roundedWidth;\n    _classPrivateFieldLooseBase(this, _realHeight)[_realHeight] = roundedHeight;\n    this.canvas.style.visibility = \"hidden\";\n    const _this$parentDimension10 = _slicedToArray(this.parentDimensions, 2),\n      parentWidth = _this$parentDimension10[0],\n      parentHeight = _this$parentDimension10[1];\n    this.width = width / parentWidth;\n    this.height = height / parentHeight;\n    this.fixAndSetPosition();\n    if (_classPrivateFieldLooseBase(this, _disableEditing)[_disableEditing]) {\n      _classPrivateFieldLooseBase(this, _setScaleFactor)[_setScaleFactor](width, height);\n    }\n    _classPrivateFieldLooseBase(this, _setCanvasDims)[_setCanvasDims]();\n    _classPrivateFieldLooseBase(this, _redraw)[_redraw]();\n    this.canvas.style.visibility = \"visible\";\n    this.fixDims();\n  }\n  static async deserialize(data, parent, uiManager) {\n    if (data instanceof InkAnnotationElement) {\n      return null;\n    }\n    const editor = await super.deserialize(data, parent, uiManager);\n    editor.thickness = data.thickness;\n    editor.color = Util.makeHexColor(...data.color);\n    editor.opacity = data.opacity;\n    const _editor$pageDimension3 = _slicedToArray(editor.pageDimensions, 2),\n      pageWidth = _editor$pageDimension3[0],\n      pageHeight = _editor$pageDimension3[1];\n    const width = editor.width * pageWidth;\n    const height = editor.height * pageHeight;\n    const scaleFactor = editor.parentScale;\n    const padding = data.thickness / 2;\n    _classPrivateFieldLooseBase(editor, _disableEditing)[_disableEditing] = true;\n    _classPrivateFieldLooseBase(editor, _realWidth)[_realWidth] = Math.round(width);\n    _classPrivateFieldLooseBase(editor, _realHeight)[_realHeight] = Math.round(height);\n    const paths = data.paths,\n      rect = data.rect,\n      rotation = data.rotation;\n    for (let _ref152 of paths) {\n      let bezier = _ref152.bezier;\n      bezier = _classPrivateFieldLooseBase(InkEditor, _fromPDFCoordinates)[_fromPDFCoordinates](bezier, rect, rotation);\n      const path = [];\n      editor.paths.push(path);\n      let p0 = scaleFactor * (bezier[0] - padding);\n      let p1 = scaleFactor * (bezier[1] - padding);\n      for (let i = 2, ii = bezier.length; i < ii; i += 6) {\n        const p10 = scaleFactor * (bezier[i] - padding);\n        const p11 = scaleFactor * (bezier[i + 1] - padding);\n        const p20 = scaleFactor * (bezier[i + 2] - padding);\n        const p21 = scaleFactor * (bezier[i + 3] - padding);\n        const p30 = scaleFactor * (bezier[i + 4] - padding);\n        const p31 = scaleFactor * (bezier[i + 5] - padding);\n        path.push([[p0, p1], [p10, p11], [p20, p21], [p30, p31]]);\n        p0 = p30;\n        p1 = p31;\n      }\n      const path2D = _classPrivateFieldLooseBase(this, _buildPath2D)[_buildPath2D](path);\n      editor.bezierPath2D.push(path2D);\n    }\n    const bbox = _classPrivateFieldLooseBase(editor, _getBbox)[_getBbox]();\n    _classPrivateFieldLooseBase(editor, _baseWidth)[_baseWidth] = Math.max(AnnotationEditor.MIN_SIZE, bbox[2] - bbox[0]);\n    _classPrivateFieldLooseBase(editor, _baseHeight)[_baseHeight] = Math.max(AnnotationEditor.MIN_SIZE, bbox[3] - bbox[1]);\n    _classPrivateFieldLooseBase(editor, _setScaleFactor)[_setScaleFactor](width, height);\n    return editor;\n  }\n  serialize() {\n    if (this.isEmpty()) {\n      return null;\n    }\n    const rect = this.getRect(0, 0);\n    const color = AnnotationEditor._colorManager.convert(this.ctx.strokeStyle);\n    return {\n      annotationType: AnnotationEditorType.INK,\n      color,\n      thickness: this.thickness,\n      opacity: this.opacity,\n      paths: _classPrivateFieldLooseBase(this, _serializePaths)[_serializePaths](this.scaleFactor / this.parentScale, this.translationX, this.translationY, rect),\n      pageIndex: this.pageIndex,\n      rect,\n      rotation: this.rotation,\n      structTreeParentId: this._structTreeParentId\n    };\n  }\n}\n_InkEditor = InkEditor;\nfunction _updateThickness4(thickness) {\n  const setThickness = th => {\n    this.thickness = th;\n    _classPrivateFieldLooseBase(this, _fitToContent)[_fitToContent]();\n  };\n  const savedThickness = this.thickness;\n  this.addCommands({\n    cmd: setThickness.bind(this, thickness),\n    undo: setThickness.bind(this, savedThickness),\n    post: this._uiManager.updateUI.bind(this._uiManager, this),\n    mustExec: true,\n    type: AnnotationEditorParamsType.INK_THICKNESS,\n    overwriteIfSameType: true,\n    keepUndo: true\n  });\n}\nfunction _updateColor6(color) {\n  const setColor = col => {\n    this.color = col;\n    _classPrivateFieldLooseBase(this, _redraw)[_redraw]();\n  };\n  const savedColor = this.color;\n  this.addCommands({\n    cmd: setColor.bind(this, color),\n    undo: setColor.bind(this, savedColor),\n    post: this._uiManager.updateUI.bind(this._uiManager, this),\n    mustExec: true,\n    type: AnnotationEditorParamsType.INK_COLOR,\n    overwriteIfSameType: true,\n    keepUndo: true\n  });\n}\nfunction _updateOpacity2(opacity) {\n  const setOpacity = op => {\n    this.opacity = op;\n    _classPrivateFieldLooseBase(this, _redraw)[_redraw]();\n  };\n  opacity /= 100;\n  const savedOpacity = this.opacity;\n  this.addCommands({\n    cmd: setOpacity.bind(this, opacity),\n    undo: setOpacity.bind(this, savedOpacity),\n    post: this._uiManager.updateUI.bind(this._uiManager, this),\n    mustExec: true,\n    type: AnnotationEditorParamsType.INK_OPACITY,\n    overwriteIfSameType: true,\n    keepUndo: true\n  });\n}\nfunction _getInitialBBox2() {\n  const parentRotation = this.parentRotation,\n    _this$parentDimension19 = _slicedToArray(this.parentDimensions, 2),\n    width = _this$parentDimension19[0],\n    height = _this$parentDimension19[1];\n  switch (parentRotation) {\n    case 90:\n      return [0, height, height, width];\n    case 180:\n      return [width, height, width, height];\n    case 270:\n      return [width, 0, height, width];\n    default:\n      return [0, 0, width, height];\n  }\n}\nfunction _setStroke2() {\n  const ctx = this.ctx,\n    color = this.color,\n    opacity = this.opacity,\n    thickness = this.thickness,\n    parentScale = this.parentScale,\n    scaleFactor = this.scaleFactor;\n  ctx.lineWidth = thickness * parentScale / scaleFactor;\n  ctx.lineCap = \"round\";\n  ctx.lineJoin = \"round\";\n  ctx.miterLimit = 10;\n  ctx.strokeStyle = `${color}${opacityToHex(opacity)}`;\n}\nfunction _startDrawing2(x, y) {\n  this.canvas.addEventListener(\"contextmenu\", noContextMenu, {\n    signal: this._uiManager._signal\n  });\n  _classPrivateFieldLooseBase(this, _removePointerdownListener)[_removePointerdownListener]();\n  _classPrivateFieldLooseBase(this, _drawingAC)[_drawingAC] = new AbortController();\n  const signal = this._uiManager.combinedSignal(_classPrivateFieldLooseBase(this, _drawingAC)[_drawingAC]);\n  this.canvas.addEventListener(\"pointerleave\", this.canvasPointerleave.bind(this), {\n    signal\n  });\n  this.canvas.addEventListener(\"pointermove\", this.canvasPointermove.bind(this), {\n    signal\n  });\n  this.canvas.addEventListener(\"pointerup\", this.canvasPointerup.bind(this), {\n    signal\n  });\n  this.isEditing = true;\n  if (!_classPrivateFieldLooseBase(this, _isCanvasInitialized)[_isCanvasInitialized]) {\n    var _this$opacity2;\n    _classPrivateFieldLooseBase(this, _isCanvasInitialized)[_isCanvasInitialized] = true;\n    _classPrivateFieldLooseBase(this, _setCanvasDims)[_setCanvasDims]();\n    this.thickness || (this.thickness = _InkEditor._defaultThickness);\n    this.color || (this.color = _InkEditor._defaultColor || AnnotationEditor._defaultLineColor);\n    (_this$opacity2 = this.opacity) !== null && _this$opacity2 !== void 0 ? _this$opacity2 : this.opacity = _InkEditor._defaultOpacity;\n  }\n  this.currentPath.push([x, y]);\n  _classPrivateFieldLooseBase(this, _hasSomethingToDraw)[_hasSomethingToDraw] = false;\n  _classPrivateFieldLooseBase(this, _setStroke)[_setStroke]();\n  _classPrivateFieldLooseBase(this, _requestFrameCallback)[_requestFrameCallback] = () => {\n    _classPrivateFieldLooseBase(this, _drawPoints)[_drawPoints]();\n    if (_classPrivateFieldLooseBase(this, _requestFrameCallback)[_requestFrameCallback]) {\n      window.requestAnimationFrame(_classPrivateFieldLooseBase(this, _requestFrameCallback)[_requestFrameCallback]);\n    }\n  };\n  window.requestAnimationFrame(_classPrivateFieldLooseBase(this, _requestFrameCallback)[_requestFrameCallback]);\n}\nfunction _draw2(x, y) {\n  const _this$currentPath$at = this.currentPath.at(-1),\n    _this$currentPath$at2 = _slicedToArray(_this$currentPath$at, 2),\n    lastX = _this$currentPath$at2[0],\n    lastY = _this$currentPath$at2[1];\n  if (this.currentPath.length > 1 && x === lastX && y === lastY) {\n    return;\n  }\n  const currentPath = this.currentPath;\n  let path2D = _classPrivateFieldLooseBase(this, _currentPath2D)[_currentPath2D];\n  currentPath.push([x, y]);\n  _classPrivateFieldLooseBase(this, _hasSomethingToDraw)[_hasSomethingToDraw] = true;\n  if (currentPath.length <= 2) {\n    path2D.moveTo(...currentPath[0]);\n    path2D.lineTo(x, y);\n    return;\n  }\n  if (currentPath.length === 3) {\n    _classPrivateFieldLooseBase(this, _currentPath2D)[_currentPath2D] = path2D = new Path2D();\n    path2D.moveTo(...currentPath[0]);\n  }\n  _classPrivateFieldLooseBase(this, _makeBezierCurve)[_makeBezierCurve](path2D, ...currentPath.at(-3), ...currentPath.at(-2), x, y);\n}\nfunction _endPath2() {\n  if (this.currentPath.length === 0) {\n    return;\n  }\n  const lastPoint = this.currentPath.at(-1);\n  _classPrivateFieldLooseBase(this, _currentPath2D)[_currentPath2D].lineTo(...lastPoint);\n}\nfunction _stopDrawing2(x, y) {\n  _classPrivateFieldLooseBase(this, _requestFrameCallback)[_requestFrameCallback] = null;\n  x = Math.min(Math.max(x, 0), this.canvas.width);\n  y = Math.min(Math.max(y, 0), this.canvas.height);\n  _classPrivateFieldLooseBase(this, _draw)[_draw](x, y);\n  _classPrivateFieldLooseBase(this, _endPath)[_endPath]();\n  let bezier;\n  if (this.currentPath.length !== 1) {\n    bezier = _classPrivateFieldLooseBase(this, _generateBezierPoints)[_generateBezierPoints]();\n  } else {\n    const xy = [x, y];\n    bezier = [[xy, xy.slice(), xy.slice(), xy]];\n  }\n  const path2D = _classPrivateFieldLooseBase(this, _currentPath2D)[_currentPath2D];\n  const currentPath = this.currentPath;\n  this.currentPath = [];\n  _classPrivateFieldLooseBase(this, _currentPath2D)[_currentPath2D] = new Path2D();\n  const cmd = () => {\n    this.allRawPaths.push(currentPath);\n    this.paths.push(bezier);\n    this.bezierPath2D.push(path2D);\n    this._uiManager.rebuild(this);\n  };\n  const undo = () => {\n    this.allRawPaths.pop();\n    this.paths.pop();\n    this.bezierPath2D.pop();\n    if (this.paths.length === 0) {\n      this.remove();\n    } else {\n      if (!this.canvas) {\n        _classPrivateFieldLooseBase(this, _createCanvas)[_createCanvas]();\n        _classPrivateFieldLooseBase(this, _createObserver)[_createObserver]();\n      }\n      _classPrivateFieldLooseBase(this, _fitToContent)[_fitToContent]();\n    }\n  };\n  this.addCommands({\n    cmd,\n    undo,\n    mustExec: true\n  });\n}\nfunction _drawPoints2() {\n  if (!_classPrivateFieldLooseBase(this, _hasSomethingToDraw)[_hasSomethingToDraw]) {\n    return;\n  }\n  _classPrivateFieldLooseBase(this, _hasSomethingToDraw)[_hasSomethingToDraw] = false;\n  const thickness = Math.ceil(this.thickness * this.parentScale);\n  const lastPoints = this.currentPath.slice(-3);\n  const x = lastPoints.map(xy => xy[0]);\n  const y = lastPoints.map(xy => xy[1]);\n  const xMin = Math.min(...x) - thickness;\n  const xMax = Math.max(...x) + thickness;\n  const yMin = Math.min(...y) - thickness;\n  const yMax = Math.max(...y) + thickness;\n  const ctx = this.ctx;\n  ctx.save();\n  ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  for (const path of this.bezierPath2D) {\n    ctx.stroke(path);\n  }\n  ctx.stroke(_classPrivateFieldLooseBase(this, _currentPath2D)[_currentPath2D]);\n  ctx.restore();\n}\nfunction _makeBezierCurve2(path2D, x0, y0, x1, y1, x2, y2) {\n  const prevX = (x0 + x1) / 2;\n  const prevY = (y0 + y1) / 2;\n  const x3 = (x1 + x2) / 2;\n  const y3 = (y1 + y2) / 2;\n  path2D.bezierCurveTo(prevX + 2 * (x1 - prevX) / 3, prevY + 2 * (y1 - prevY) / 3, x3 + 2 * (x1 - x3) / 3, y3 + 2 * (y1 - y3) / 3, x3, y3);\n}\nfunction _generateBezierPoints2() {\n  const path = this.currentPath;\n  if (path.length <= 2) {\n    return [[path[0], path[0], path.at(-1), path.at(-1)]];\n  }\n  const bezierPoints = [];\n  let i;\n  let _path$ = _slicedToArray(path[0], 2),\n    x0 = _path$[0],\n    y0 = _path$[1];\n  for (i = 1; i < path.length - 2; i++) {\n    const _path$i = _slicedToArray(path[i], 2),\n      x1 = _path$i[0],\n      y1 = _path$i[1];\n    const _path = _slicedToArray(path[i + 1], 2),\n      x2 = _path[0],\n      y2 = _path[1];\n    const x3 = (x1 + x2) / 2;\n    const y3 = (y1 + y2) / 2;\n    const control1 = [x0 + 2 * (x1 - x0) / 3, y0 + 2 * (y1 - y0) / 3];\n    const control2 = [x3 + 2 * (x1 - x3) / 3, y3 + 2 * (y1 - y3) / 3];\n    bezierPoints.push([[x0, y0], control1, control2, [x3, y3]]);\n    x0 = x3;\n    y0 = y3;\n  }\n  const _path$i2 = _slicedToArray(path[i], 2),\n    x1 = _path$i2[0],\n    y1 = _path$i2[1];\n  const _path2 = _slicedToArray(path[i + 1], 2),\n    x2 = _path2[0],\n    y2 = _path2[1];\n  const control1 = [x0 + 2 * (x1 - x0) / 3, y0 + 2 * (y1 - y0) / 3];\n  const control2 = [x2 + 2 * (x1 - x2) / 3, y2 + 2 * (y1 - y2) / 3];\n  bezierPoints.push([[x0, y0], control1, control2, [x2, y2]]);\n  return bezierPoints;\n}\nfunction _redraw2() {\n  if (this.isEmpty()) {\n    _classPrivateFieldLooseBase(this, _updateTransform)[_updateTransform]();\n    return;\n  }\n  _classPrivateFieldLooseBase(this, _setStroke)[_setStroke]();\n  const canvas = this.canvas,\n    ctx = this.ctx;\n  ctx.setTransform(1, 0, 0, 1, 0, 0);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  _classPrivateFieldLooseBase(this, _updateTransform)[_updateTransform]();\n  for (const path of this.bezierPath2D) {\n    ctx.stroke(path);\n  }\n}\nfunction _addPointerdownListener2() {\n  if (_classPrivateFieldLooseBase(this, _pointerdownAC)[_pointerdownAC]) {\n    return;\n  }\n  _classPrivateFieldLooseBase(this, _pointerdownAC)[_pointerdownAC] = new AbortController();\n  const signal = this._uiManager.combinedSignal(_classPrivateFieldLooseBase(this, _pointerdownAC)[_pointerdownAC]);\n  this.canvas.addEventListener(\"pointerdown\", this.canvasPointerdown.bind(this), {\n    signal\n  });\n}\nfunction _removePointerdownListener2() {\n  var _this$pointerdownAC;\n  (_this$pointerdownAC = this.pointerdownAC) === null || _this$pointerdownAC === void 0 ? void 0 : _this$pointerdownAC.abort();\n  this.pointerdownAC = null;\n}\nfunction _endDrawing2(event) {\n  var _classPrivateFieldLoo174;\n  (_classPrivateFieldLoo174 = _classPrivateFieldLooseBase(this, _drawingAC)[_drawingAC]) === null || _classPrivateFieldLoo174 === void 0 ? void 0 : _classPrivateFieldLoo174.abort();\n  _classPrivateFieldLooseBase(this, _drawingAC)[_drawingAC] = null;\n  _classPrivateFieldLooseBase(this, _addPointerdownListener)[_addPointerdownListener]();\n  if (_classPrivateFieldLooseBase(this, _canvasContextMenuTimeoutId)[_canvasContextMenuTimeoutId]) {\n    clearTimeout(_classPrivateFieldLooseBase(this, _canvasContextMenuTimeoutId)[_canvasContextMenuTimeoutId]);\n  }\n  _classPrivateFieldLooseBase(this, _canvasContextMenuTimeoutId)[_canvasContextMenuTimeoutId] = setTimeout(() => {\n    _classPrivateFieldLooseBase(this, _canvasContextMenuTimeoutId)[_canvasContextMenuTimeoutId] = null;\n    this.canvas.removeEventListener(\"contextmenu\", noContextMenu);\n  }, 10);\n  _classPrivateFieldLooseBase(this, _stopDrawing)[_stopDrawing](event.offsetX, event.offsetY);\n  this.addToAnnotationStorage();\n  this.setInBackground();\n}\nfunction _createCanvas2() {\n  this.canvas = document.createElement(\"canvas\");\n  this.canvas.width = this.canvas.height = 0;\n  this.canvas.className = \"inkEditorCanvas\";\n  this.canvas.setAttribute(\"data-l10n-id\", \"pdfjs-ink-canvas\");\n  this.div.append(this.canvas);\n  this.ctx = this.canvas.getContext(\"2d\");\n}\nfunction _createObserver2() {\n  _classPrivateFieldLooseBase(this, _observer)[_observer] = new ResizeObserver(entries => {\n    const rect = entries[0].contentRect;\n    if (rect.width && rect.height) {\n      this.setDimensions(rect.width, rect.height);\n    }\n  });\n  _classPrivateFieldLooseBase(this, _observer)[_observer].observe(this.div);\n  this._uiManager._signal.addEventListener(\"abort\", () => {\n    var _classPrivateFieldLoo175;\n    (_classPrivateFieldLoo175 = _classPrivateFieldLooseBase(this, _observer)[_observer]) === null || _classPrivateFieldLoo175 === void 0 ? void 0 : _classPrivateFieldLoo175.disconnect();\n    _classPrivateFieldLooseBase(this, _observer)[_observer] = null;\n  }, {\n    once: true\n  });\n}\nfunction _setCanvasDims2() {\n  if (!_classPrivateFieldLooseBase(this, _isCanvasInitialized)[_isCanvasInitialized]) {\n    return;\n  }\n  const _this$parentDimension20 = _slicedToArray(this.parentDimensions, 2),\n    parentWidth = _this$parentDimension20[0],\n    parentHeight = _this$parentDimension20[1];\n  this.canvas.width = Math.ceil(this.width * parentWidth);\n  this.canvas.height = Math.ceil(this.height * parentHeight);\n  _classPrivateFieldLooseBase(this, _updateTransform)[_updateTransform]();\n}\nfunction _setScaleFactor2(width, height) {\n  const padding = _classPrivateFieldLooseBase(this, _getPadding)[_getPadding]();\n  const scaleFactorW = (width - padding) / _classPrivateFieldLooseBase(this, _baseWidth)[_baseWidth];\n  const scaleFactorH = (height - padding) / _classPrivateFieldLooseBase(this, _baseHeight)[_baseHeight];\n  this.scaleFactor = Math.min(scaleFactorW, scaleFactorH);\n}\nfunction _updateTransform2() {\n  const padding = _classPrivateFieldLooseBase(this, _getPadding)[_getPadding]() / 2;\n  this.ctx.setTransform(this.scaleFactor, 0, 0, this.scaleFactor, this.translationX * this.scaleFactor + padding, this.translationY * this.scaleFactor + padding);\n}\nfunction _buildPath2D2(bezier) {\n  const path2D = new Path2D();\n  for (let i = 0, ii = bezier.length; i < ii; i++) {\n    const _bezier$i = _slicedToArray(bezier[i], 4),\n      first = _bezier$i[0],\n      control1 = _bezier$i[1],\n      control2 = _bezier$i[2],\n      second = _bezier$i[3];\n    if (i === 0) {\n      path2D.moveTo(...first);\n    }\n    path2D.bezierCurveTo(control1[0], control1[1], control2[0], control2[1], second[0], second[1]);\n  }\n  return path2D;\n}\nfunction _toPDFCoordinates2(points, rect, rotation) {\n  const _rect4 = _slicedToArray(rect, 4),\n    blX = _rect4[0],\n    blY = _rect4[1],\n    trX = _rect4[2],\n    trY = _rect4[3];\n  switch (rotation) {\n    case 0:\n      for (let i = 0, ii = points.length; i < ii; i += 2) {\n        points[i] += blX;\n        points[i + 1] = trY - points[i + 1];\n      }\n      break;\n    case 90:\n      for (let i = 0, ii = points.length; i < ii; i += 2) {\n        const x = points[i];\n        points[i] = points[i + 1] + blX;\n        points[i + 1] = x + blY;\n      }\n      break;\n    case 180:\n      for (let i = 0, ii = points.length; i < ii; i += 2) {\n        points[i] = trX - points[i];\n        points[i + 1] += blY;\n      }\n      break;\n    case 270:\n      for (let i = 0, ii = points.length; i < ii; i += 2) {\n        const x = points[i];\n        points[i] = trX - points[i + 1];\n        points[i + 1] = trY - x;\n      }\n      break;\n    default:\n      throw new Error(\"Invalid rotation\");\n  }\n  return points;\n}\nfunction _fromPDFCoordinates2(points, rect, rotation) {\n  const _rect5 = _slicedToArray(rect, 4),\n    blX = _rect5[0],\n    blY = _rect5[1],\n    trX = _rect5[2],\n    trY = _rect5[3];\n  switch (rotation) {\n    case 0:\n      for (let i = 0, ii = points.length; i < ii; i += 2) {\n        points[i] -= blX;\n        points[i + 1] = trY - points[i + 1];\n      }\n      break;\n    case 90:\n      for (let i = 0, ii = points.length; i < ii; i += 2) {\n        const x = points[i];\n        points[i] = points[i + 1] - blY;\n        points[i + 1] = x - blX;\n      }\n      break;\n    case 180:\n      for (let i = 0, ii = points.length; i < ii; i += 2) {\n        points[i] = trX - points[i];\n        points[i + 1] -= blY;\n      }\n      break;\n    case 270:\n      for (let i = 0, ii = points.length; i < ii; i += 2) {\n        const x = points[i];\n        points[i] = trY - points[i + 1];\n        points[i + 1] = trX - x;\n      }\n      break;\n    default:\n      throw new Error(\"Invalid rotation\");\n  }\n  return points;\n}\nfunction _serializePaths2(s, tx, ty, rect) {\n  const paths = [];\n  const padding = this.thickness / 2;\n  const shiftX = s * tx + padding;\n  const shiftY = s * ty + padding;\n  for (const bezier of this.paths) {\n    const buffer = [];\n    const points = [];\n    for (let j = 0, jj = bezier.length; j < jj; j++) {\n      const _bezier$j = _slicedToArray(bezier[j], 4),\n        first = _bezier$j[0],\n        control1 = _bezier$j[1],\n        control2 = _bezier$j[2],\n        second = _bezier$j[3];\n      if (first[0] === second[0] && first[1] === second[1] && jj === 1) {\n        const p0 = s * first[0] + shiftX;\n        const p1 = s * first[1] + shiftY;\n        buffer.push(p0, p1);\n        points.push(p0, p1);\n        break;\n      }\n      const p10 = s * first[0] + shiftX;\n      const p11 = s * first[1] + shiftY;\n      const p20 = s * control1[0] + shiftX;\n      const p21 = s * control1[1] + shiftY;\n      const p30 = s * control2[0] + shiftX;\n      const p31 = s * control2[1] + shiftY;\n      const p40 = s * second[0] + shiftX;\n      const p41 = s * second[1] + shiftY;\n      if (j === 0) {\n        buffer.push(p10, p11);\n        points.push(p10, p11);\n      }\n      buffer.push(p20, p21, p30, p31, p40, p41);\n      points.push(p20, p21);\n      if (j === jj - 1) {\n        points.push(p40, p41);\n      }\n    }\n    paths.push({\n      bezier: _classPrivateFieldLooseBase(_InkEditor, _toPDFCoordinates)[_toPDFCoordinates](buffer, rect, this.rotation),\n      points: _classPrivateFieldLooseBase(_InkEditor, _toPDFCoordinates)[_toPDFCoordinates](points, rect, this.rotation)\n    });\n  }\n  return paths;\n}\nfunction _getBbox2() {\n  let xMin = Infinity;\n  let xMax = -Infinity;\n  let yMin = Infinity;\n  let yMax = -Infinity;\n  for (const path of this.paths) {\n    for (const _ref178 of path) {\n      var _ref179 = _slicedToArray(_ref178, 4);\n      const first = _ref179[0];\n      const control1 = _ref179[1];\n      const control2 = _ref179[2];\n      const second = _ref179[3];\n      const bbox = Util.bezierBoundingBox(...first, ...control1, ...control2, ...second);\n      xMin = Math.min(xMin, bbox[0]);\n      yMin = Math.min(yMin, bbox[1]);\n      xMax = Math.max(xMax, bbox[2]);\n      yMax = Math.max(yMax, bbox[3]);\n    }\n  }\n  return [xMin, yMin, xMax, yMax];\n}\nfunction _getPadding2() {\n  return _classPrivateFieldLooseBase(this, _disableEditing)[_disableEditing] ? Math.ceil(this.thickness * this.parentScale) : 0;\n}\nfunction _fitToContent2() {\n  let firstTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  if (this.isEmpty()) {\n    return;\n  }\n  if (!_classPrivateFieldLooseBase(this, _disableEditing)[_disableEditing]) {\n    _classPrivateFieldLooseBase(this, _redraw)[_redraw]();\n    return;\n  }\n  const bbox = _classPrivateFieldLooseBase(this, _getBbox)[_getBbox]();\n  const padding = _classPrivateFieldLooseBase(this, _getPadding)[_getPadding]();\n  _classPrivateFieldLooseBase(this, _baseWidth)[_baseWidth] = Math.max(AnnotationEditor.MIN_SIZE, bbox[2] - bbox[0]);\n  _classPrivateFieldLooseBase(this, _baseHeight)[_baseHeight] = Math.max(AnnotationEditor.MIN_SIZE, bbox[3] - bbox[1]);\n  const width = Math.ceil(padding + _classPrivateFieldLooseBase(this, _baseWidth)[_baseWidth] * this.scaleFactor);\n  const height = Math.ceil(padding + _classPrivateFieldLooseBase(this, _baseHeight)[_baseHeight] * this.scaleFactor);\n  const _this$parentDimension21 = _slicedToArray(this.parentDimensions, 2),\n    parentWidth = _this$parentDimension21[0],\n    parentHeight = _this$parentDimension21[1];\n  this.width = width / parentWidth;\n  this.height = height / parentHeight;\n  this.setAspectRatio(width, height);\n  const prevTranslationX = this.translationX;\n  const prevTranslationY = this.translationY;\n  this.translationX = -bbox[0];\n  this.translationY = -bbox[1];\n  _classPrivateFieldLooseBase(this, _setCanvasDims)[_setCanvasDims]();\n  _classPrivateFieldLooseBase(this, _redraw)[_redraw]();\n  _classPrivateFieldLooseBase(this, _realWidth)[_realWidth] = width;\n  _classPrivateFieldLooseBase(this, _realHeight)[_realHeight] = height;\n  this.setDims(width, height);\n  const unscaledPadding = firstTime ? padding / this.scaleFactor / 2 : 0;\n  this.translate(prevTranslationX - this.translationX - unscaledPadding, prevTranslationY - this.translationY - unscaledPadding);\n}\nObject.defineProperty(InkEditor, _fromPDFCoordinates, {\n  value: _fromPDFCoordinates2\n});\nObject.defineProperty(InkEditor, _toPDFCoordinates, {\n  value: _toPDFCoordinates2\n});\nObject.defineProperty(InkEditor, _buildPath2D, {\n  value: _buildPath2D2\n});\nInkEditor._defaultColor = null;\nInkEditor._defaultOpacity = 1;\nInkEditor._defaultThickness = 1;\nInkEditor._type = \"ink\";\nInkEditor._editorType = AnnotationEditorType.INK;\n; // ./src/display/editor/stamp.js\nvar _bitmap = /*#__PURE__*/_classPrivateFieldLooseKey(\"bitmap\");\nvar _bitmapId = /*#__PURE__*/_classPrivateFieldLooseKey(\"bitmapId\");\nvar _bitmapPromise = /*#__PURE__*/_classPrivateFieldLooseKey(\"bitmapPromise\");\nvar _bitmapUrl = /*#__PURE__*/_classPrivateFieldLooseKey(\"bitmapUrl\");\nvar _bitmapFile = /*#__PURE__*/_classPrivateFieldLooseKey(\"bitmapFile\");\nvar _bitmapFileName = /*#__PURE__*/_classPrivateFieldLooseKey(\"bitmapFileName\");\nvar _canvas = /*#__PURE__*/_classPrivateFieldLooseKey(\"canvas\");\nvar _observer2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"observer\");\nvar _resizeTimeoutId = /*#__PURE__*/_classPrivateFieldLooseKey(\"resizeTimeoutId\");\nvar _isSvg = /*#__PURE__*/_classPrivateFieldLooseKey(\"isSvg\");\nvar _hasBeenAddedInUndoStack = /*#__PURE__*/_classPrivateFieldLooseKey(\"hasBeenAddedInUndoStack\");\nvar _getBitmapFetched = /*#__PURE__*/_classPrivateFieldLooseKey(\"getBitmapFetched\");\nvar _getBitmapDone = /*#__PURE__*/_classPrivateFieldLooseKey(\"getBitmapDone\");\nvar _getBitmap = /*#__PURE__*/_classPrivateFieldLooseKey(\"getBitmap\");\nvar _createCanvas3 = /*#__PURE__*/_classPrivateFieldLooseKey(\"createCanvas\");\nvar _setDimensions = /*#__PURE__*/_classPrivateFieldLooseKey(\"setDimensions\");\nvar _scaleBitmap = /*#__PURE__*/_classPrivateFieldLooseKey(\"scaleBitmap\");\nvar _drawBitmap = /*#__PURE__*/_classPrivateFieldLooseKey(\"drawBitmap\");\nvar _serializeBitmap = /*#__PURE__*/_classPrivateFieldLooseKey(\"serializeBitmap\");\nvar _createObserver3 = /*#__PURE__*/_classPrivateFieldLooseKey(\"createObserver\");\nvar _hasElementChanged5 = /*#__PURE__*/_classPrivateFieldLooseKey(\"hasElementChanged\");\nclass StampEditor extends AnnotationEditor {\n  constructor(params) {\n    super(_objectSpread(_objectSpread({}, params), {}, {\n      name: \"stampEditor\"\n    }));\n    Object.defineProperty(this, _hasElementChanged5, {\n      value: _hasElementChanged6\n    });\n    Object.defineProperty(this, _createObserver3, {\n      value: _createObserver4\n    });\n    Object.defineProperty(this, _serializeBitmap, {\n      value: _serializeBitmap2\n    });\n    Object.defineProperty(this, _drawBitmap, {\n      value: _drawBitmap2\n    });\n    Object.defineProperty(this, _scaleBitmap, {\n      value: _scaleBitmap2\n    });\n    Object.defineProperty(this, _setDimensions, {\n      value: _setDimensions2\n    });\n    Object.defineProperty(this, _createCanvas3, {\n      value: _createCanvas4\n    });\n    Object.defineProperty(this, _getBitmap, {\n      value: _getBitmap2\n    });\n    Object.defineProperty(this, _getBitmapDone, {\n      value: _getBitmapDone2\n    });\n    Object.defineProperty(this, _getBitmapFetched, {\n      value: _getBitmapFetched2\n    });\n    Object.defineProperty(this, _bitmap, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _bitmapId, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _bitmapPromise, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _bitmapUrl, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _bitmapFile, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _bitmapFileName, {\n      writable: true,\n      value: \"\"\n    });\n    Object.defineProperty(this, _canvas, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _observer2, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _resizeTimeoutId, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _isSvg, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _hasBeenAddedInUndoStack, {\n      writable: true,\n      value: false\n    });\n    _classPrivateFieldLooseBase(this, _bitmapUrl)[_bitmapUrl] = params.bitmapUrl;\n    _classPrivateFieldLooseBase(this, _bitmapFile)[_bitmapFile] = params.bitmapFile;\n  }\n  static initialize(l10n, uiManager) {\n    AnnotationEditor.initialize(l10n, uiManager);\n  }\n  static get supportedTypes() {\n    const types = [\"apng\", \"avif\", \"bmp\", \"gif\", \"jpeg\", \"png\", \"svg+xml\", \"webp\", \"x-icon\"];\n    return shadow(this, \"supportedTypes\", types.map(type => `image/${type}`));\n  }\n  static get supportedTypesStr() {\n    return shadow(this, \"supportedTypesStr\", this.supportedTypes.join(\",\"));\n  }\n  static isHandlingMimeForPasting(mime) {\n    return this.supportedTypes.includes(mime);\n  }\n  static paste(item, parent) {\n    parent.pasteEditor(AnnotationEditorType.STAMP, {\n      bitmapFile: item.getAsFile()\n    });\n  }\n  altTextFinish() {\n    if (this._uiManager.useNewAltTextFlow) {\n      this.div.hidden = false;\n    }\n    super.altTextFinish();\n  }\n  get telemetryFinalData() {\n    var _this$altTextData;\n    return {\n      type: \"stamp\",\n      hasAltText: !!((_this$altTextData = this.altTextData) !== null && _this$altTextData !== void 0 && _this$altTextData.altText)\n    };\n  }\n  static computeTelemetryFinalData(data) {\n    var _hasAltTextStats$get, _hasAltTextStats$get2;\n    const hasAltTextStats = data.get(\"hasAltText\");\n    return {\n      hasAltText: (_hasAltTextStats$get = hasAltTextStats.get(true)) !== null && _hasAltTextStats$get !== void 0 ? _hasAltTextStats$get : 0,\n      hasNoAltText: (_hasAltTextStats$get2 = hasAltTextStats.get(false)) !== null && _hasAltTextStats$get2 !== void 0 ? _hasAltTextStats$get2 : 0\n    };\n  }\n  async mlGuessAltText() {\n    let imageData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let updateAltTextData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (this.hasAltTextData()) {\n      return null;\n    }\n    const mlManager = this._uiManager.mlManager;\n    if (!mlManager) {\n      throw new Error(\"No ML.\");\n    }\n    if (!(await mlManager.isEnabledFor(\"altText\"))) {\n      throw new Error(\"ML isn't enabled for alt text.\");\n    }\n    const _ref153 = imageData || this.copyCanvas(null, null, true).imageData,\n      data = _ref153.data,\n      width = _ref153.width,\n      height = _ref153.height;\n    const response = await mlManager.guess({\n      name: \"altText\",\n      request: {\n        data,\n        width,\n        height,\n        channels: data.length / (width * height)\n      }\n    });\n    if (!response) {\n      throw new Error(\"No response from the AI service.\");\n    }\n    if (response.error) {\n      throw new Error(\"Error from the AI service.\");\n    }\n    if (response.cancel) {\n      return null;\n    }\n    if (!response.output) {\n      throw new Error(\"No valid response from the AI service.\");\n    }\n    const altText = response.output;\n    await this.setGuessedAltText(altText);\n    if (updateAltTextData && !this.hasAltTextData()) {\n      this.altTextData = {\n        alt: altText,\n        decorative: false\n      };\n    }\n    return altText;\n  }\n  remove() {\n    if (_classPrivateFieldLooseBase(this, _bitmapId)[_bitmapId]) {\n      var _classPrivateFieldLoo108, _classPrivateFieldLoo109;\n      _classPrivateFieldLooseBase(this, _bitmap)[_bitmap] = null;\n      this._uiManager.imageManager.deleteId(_classPrivateFieldLooseBase(this, _bitmapId)[_bitmapId]);\n      (_classPrivateFieldLoo108 = _classPrivateFieldLooseBase(this, _canvas)[_canvas]) === null || _classPrivateFieldLoo108 === void 0 ? void 0 : _classPrivateFieldLoo108.remove();\n      _classPrivateFieldLooseBase(this, _canvas)[_canvas] = null;\n      (_classPrivateFieldLoo109 = _classPrivateFieldLooseBase(this, _observer2)[_observer2]) === null || _classPrivateFieldLoo109 === void 0 ? void 0 : _classPrivateFieldLoo109.disconnect();\n      _classPrivateFieldLooseBase(this, _observer2)[_observer2] = null;\n      if (_classPrivateFieldLooseBase(this, _resizeTimeoutId)[_resizeTimeoutId]) {\n        clearTimeout(_classPrivateFieldLooseBase(this, _resizeTimeoutId)[_resizeTimeoutId]);\n        _classPrivateFieldLooseBase(this, _resizeTimeoutId)[_resizeTimeoutId] = null;\n      }\n    }\n    super.remove();\n  }\n  rebuild() {\n    if (!this.parent) {\n      if (_classPrivateFieldLooseBase(this, _bitmapId)[_bitmapId]) {\n        _classPrivateFieldLooseBase(this, _getBitmap)[_getBitmap]();\n      }\n      return;\n    }\n    super.rebuild();\n    if (this.div === null) {\n      return;\n    }\n    if (_classPrivateFieldLooseBase(this, _bitmapId)[_bitmapId] && _classPrivateFieldLooseBase(this, _canvas)[_canvas] === null) {\n      _classPrivateFieldLooseBase(this, _getBitmap)[_getBitmap]();\n    }\n    if (!this.isAttachedToDOM) {\n      this.parent.add(this);\n    }\n  }\n  onceAdded() {\n    this._isDraggable = true;\n    this.div.focus();\n  }\n  isEmpty() {\n    return !(_classPrivateFieldLooseBase(this, _bitmapPromise)[_bitmapPromise] || _classPrivateFieldLooseBase(this, _bitmap)[_bitmap] || _classPrivateFieldLooseBase(this, _bitmapUrl)[_bitmapUrl] || _classPrivateFieldLooseBase(this, _bitmapFile)[_bitmapFile] || _classPrivateFieldLooseBase(this, _bitmapId)[_bitmapId]);\n  }\n  get isResizable() {\n    return true;\n  }\n  render() {\n    if (this.div) {\n      return this.div;\n    }\n    let baseX, baseY;\n    if (this.width) {\n      baseX = this.x;\n      baseY = this.y;\n    }\n    super.render();\n    this.div.hidden = true;\n    this.div.setAttribute(\"role\", \"figure\");\n    this.addAltTextButton();\n    if (_classPrivateFieldLooseBase(this, _bitmap)[_bitmap]) {\n      _classPrivateFieldLooseBase(this, _createCanvas3)[_createCanvas3]();\n    } else {\n      _classPrivateFieldLooseBase(this, _getBitmap)[_getBitmap]();\n    }\n    if (this.width && !this.annotationElementId) {\n      const _this$parentDimension11 = _slicedToArray(this.parentDimensions, 2),\n        parentWidth = _this$parentDimension11[0],\n        parentHeight = _this$parentDimension11[1];\n      this.setAt(baseX * parentWidth, baseY * parentHeight, this.width * parentWidth, this.height * parentHeight);\n    }\n    return this.div;\n  }\n  copyCanvas(maxDataDimension, maxPreviewDimension) {\n    let createImageData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (!maxDataDimension) {\n      maxDataDimension = 224;\n    }\n    const _classPrivateFieldLoo110 = _classPrivateFieldLooseBase(this, _bitmap)[_bitmap],\n      bitmapWidth = _classPrivateFieldLoo110.width,\n      bitmapHeight = _classPrivateFieldLoo110.height;\n    const outputScale = new OutputScale();\n    let bitmap = _classPrivateFieldLooseBase(this, _bitmap)[_bitmap];\n    let width = bitmapWidth,\n      height = bitmapHeight;\n    let canvas = null;\n    if (maxPreviewDimension) {\n      var _window$matchMedia, _window2;\n      if (bitmapWidth > maxPreviewDimension || bitmapHeight > maxPreviewDimension) {\n        const ratio = Math.min(maxPreviewDimension / bitmapWidth, maxPreviewDimension / bitmapHeight);\n        width = Math.floor(bitmapWidth * ratio);\n        height = Math.floor(bitmapHeight * ratio);\n      }\n      canvas = document.createElement(\"canvas\");\n      const scaledWidth = canvas.width = Math.ceil(width * outputScale.sx);\n      const scaledHeight = canvas.height = Math.ceil(height * outputScale.sy);\n      if (!_classPrivateFieldLooseBase(this, _isSvg)[_isSvg]) {\n        bitmap = _classPrivateFieldLooseBase(this, _scaleBitmap)[_scaleBitmap](scaledWidth, scaledHeight);\n      }\n      const ctx = canvas.getContext(\"2d\");\n      ctx.filter = this._uiManager.hcmFilter;\n      let white = \"white\",\n        black = \"#cfcfd8\";\n      if (this._uiManager.hcmFilter !== \"none\") {\n        black = \"black\";\n      } else if ((_window$matchMedia = (_window2 = window).matchMedia) !== null && _window$matchMedia !== void 0 && _window$matchMedia.call(_window2, \"(prefers-color-scheme: dark)\").matches) {\n        white = \"#8f8f9d\";\n        black = \"#42414d\";\n      }\n      const boxDim = 15;\n      const boxDimWidth = boxDim * outputScale.sx;\n      const boxDimHeight = boxDim * outputScale.sy;\n      const pattern = new OffscreenCanvas(boxDimWidth * 2, boxDimHeight * 2);\n      const patternCtx = pattern.getContext(\"2d\");\n      patternCtx.fillStyle = white;\n      patternCtx.fillRect(0, 0, boxDimWidth * 2, boxDimHeight * 2);\n      patternCtx.fillStyle = black;\n      patternCtx.fillRect(0, 0, boxDimWidth, boxDimHeight);\n      patternCtx.fillRect(boxDimWidth, boxDimHeight, boxDimWidth, boxDimHeight);\n      ctx.fillStyle = ctx.createPattern(pattern, \"repeat\");\n      ctx.fillRect(0, 0, scaledWidth, scaledHeight);\n      ctx.drawImage(bitmap, 0, 0, bitmap.width, bitmap.height, 0, 0, scaledWidth, scaledHeight);\n    }\n    let imageData = null;\n    if (createImageData) {\n      let dataWidth, dataHeight;\n      if (outputScale.symmetric && bitmap.width < maxDataDimension && bitmap.height < maxDataDimension) {\n        dataWidth = bitmap.width;\n        dataHeight = bitmap.height;\n      } else {\n        bitmap = _classPrivateFieldLooseBase(this, _bitmap)[_bitmap];\n        if (bitmapWidth > maxDataDimension || bitmapHeight > maxDataDimension) {\n          const ratio = Math.min(maxDataDimension / bitmapWidth, maxDataDimension / bitmapHeight);\n          dataWidth = Math.floor(bitmapWidth * ratio);\n          dataHeight = Math.floor(bitmapHeight * ratio);\n          if (!_classPrivateFieldLooseBase(this, _isSvg)[_isSvg]) {\n            bitmap = _classPrivateFieldLooseBase(this, _scaleBitmap)[_scaleBitmap](dataWidth, dataHeight);\n          }\n        }\n      }\n      const offscreen = new OffscreenCanvas(dataWidth, dataHeight);\n      const offscreenCtx = offscreen.getContext(\"2d\", {\n        willReadFrequently: true\n      });\n      offscreenCtx.drawImage(bitmap, 0, 0, bitmap.width, bitmap.height, 0, 0, dataWidth, dataHeight);\n      imageData = {\n        width: dataWidth,\n        height: dataHeight,\n        data: offscreenCtx.getImageData(0, 0, dataWidth, dataHeight).data\n      };\n    }\n    return {\n      canvas,\n      width,\n      height,\n      imageData\n    };\n  }\n  getImageForAltText() {\n    return _classPrivateFieldLooseBase(this, _canvas)[_canvas];\n  }\n  static async deserialize(data, parent, uiManager) {\n    let initialData = null;\n    if (data instanceof StampAnnotationElement) {\n      var _await$parent$_struct;\n      const _data7 = data,\n        _data7$data = _data7.data,\n        rect = _data7$data.rect,\n        rotation = _data7$data.rotation,\n        id = _data7$data.id,\n        structParent = _data7$data.structParent,\n        popupRef = _data7$data.popupRef,\n        container = _data7.container,\n        pageNumber = _data7.parent.page.pageNumber;\n      const canvas = container.querySelector(\"canvas\");\n      const imageData = uiManager.imageManager.getFromCanvas(container.id, canvas);\n      canvas.remove();\n      const altText = ((_await$parent$_struct = await parent._structTree.getAriaAttributes(`${AnnotationPrefix}${id}`)) === null || _await$parent$_struct === void 0 ? void 0 : _await$parent$_struct.get(\"aria-label\")) || \"\";\n      initialData = data = {\n        annotationType: AnnotationEditorType.STAMP,\n        bitmapId: imageData.id,\n        bitmap: imageData.bitmap,\n        pageIndex: pageNumber - 1,\n        rect: rect.slice(0),\n        rotation,\n        id,\n        deleted: false,\n        accessibilityData: {\n          decorative: false,\n          altText\n        },\n        isSvg: false,\n        structParent,\n        popupRef\n      };\n    }\n    const editor = await super.deserialize(data, parent, uiManager);\n    const _data8 = data,\n      rect = _data8.rect,\n      bitmap = _data8.bitmap,\n      bitmapUrl = _data8.bitmapUrl,\n      bitmapId = _data8.bitmapId,\n      isSvg = _data8.isSvg,\n      accessibilityData = _data8.accessibilityData;\n    if (bitmapId && uiManager.imageManager.isValidId(bitmapId)) {\n      _classPrivateFieldLooseBase(editor, _bitmapId)[_bitmapId] = bitmapId;\n      if (bitmap) {\n        _classPrivateFieldLooseBase(editor, _bitmap)[_bitmap] = bitmap;\n      }\n    } else {\n      _classPrivateFieldLooseBase(editor, _bitmapUrl)[_bitmapUrl] = bitmapUrl;\n    }\n    _classPrivateFieldLooseBase(editor, _isSvg)[_isSvg] = isSvg;\n    const _editor$pageDimension4 = _slicedToArray(editor.pageDimensions, 2),\n      parentWidth = _editor$pageDimension4[0],\n      parentHeight = _editor$pageDimension4[1];\n    editor.width = (rect[2] - rect[0]) / parentWidth;\n    editor.height = (rect[3] - rect[1]) / parentHeight;\n    editor.annotationElementId = data.id || null;\n    if (accessibilityData) {\n      editor.altTextData = accessibilityData;\n    }\n    editor._initialData = initialData;\n    _classPrivateFieldLooseBase(editor, _hasBeenAddedInUndoStack)[_hasBeenAddedInUndoStack] = !!initialData;\n    return editor;\n  }\n  serialize() {\n    let isForCopying = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    if (this.isEmpty()) {\n      return null;\n    }\n    if (this.deleted) {\n      return this.serializeDeleted();\n    }\n    const serialized = {\n      annotationType: AnnotationEditorType.STAMP,\n      bitmapId: _classPrivateFieldLooseBase(this, _bitmapId)[_bitmapId],\n      pageIndex: this.pageIndex,\n      rect: this.getRect(0, 0),\n      rotation: this.rotation,\n      isSvg: _classPrivateFieldLooseBase(this, _isSvg)[_isSvg],\n      structTreeParentId: this._structTreeParentId\n    };\n    if (isForCopying) {\n      serialized.bitmapUrl = _classPrivateFieldLooseBase(this, _serializeBitmap)[_serializeBitmap](true);\n      serialized.accessibilityData = this.serializeAltText(true);\n      return serialized;\n    }\n    const _this$serializeAltTex = this.serializeAltText(false),\n      decorative = _this$serializeAltTex.decorative,\n      altText = _this$serializeAltTex.altText;\n    if (!decorative && altText) {\n      serialized.accessibilityData = {\n        type: \"Figure\",\n        alt: altText\n      };\n    }\n    if (this.annotationElementId) {\n      const changes = _classPrivateFieldLooseBase(this, _hasElementChanged5)[_hasElementChanged5](serialized);\n      if (changes.isSame) {\n        return null;\n      }\n      if (changes.isSameAltText) {\n        delete serialized.accessibilityData;\n      } else {\n        var _this$_initialData$st;\n        serialized.accessibilityData.structParent = (_this$_initialData$st = this._initialData.structParent) !== null && _this$_initialData$st !== void 0 ? _this$_initialData$st : -1;\n      }\n    }\n    serialized.id = this.annotationElementId;\n    if (context === null) {\n      return serialized;\n    }\n    context.stamps || (context.stamps = new Map());\n    const area = _classPrivateFieldLooseBase(this, _isSvg)[_isSvg] ? (serialized.rect[2] - serialized.rect[0]) * (serialized.rect[3] - serialized.rect[1]) : null;\n    if (!context.stamps.has(_classPrivateFieldLooseBase(this, _bitmapId)[_bitmapId])) {\n      context.stamps.set(_classPrivateFieldLooseBase(this, _bitmapId)[_bitmapId], {\n        area,\n        serialized\n      });\n      serialized.bitmap = _classPrivateFieldLooseBase(this, _serializeBitmap)[_serializeBitmap](false);\n    } else if (_classPrivateFieldLooseBase(this, _isSvg)[_isSvg]) {\n      const prevData = context.stamps.get(_classPrivateFieldLooseBase(this, _bitmapId)[_bitmapId]);\n      if (area > prevData.area) {\n        prevData.area = area;\n        prevData.serialized.bitmap.close();\n        prevData.serialized.bitmap = _classPrivateFieldLooseBase(this, _serializeBitmap)[_serializeBitmap](false);\n      }\n    }\n    return serialized;\n  }\n  renderAnnotationElement(annotation) {\n    annotation.updateEdited({\n      rect: this.getRect(0, 0)\n    });\n    return null;\n  }\n}\n_StampEditor = StampEditor;\nfunction _getBitmapFetched2(data) {\n  let fromId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (!data) {\n    this.remove();\n    return;\n  }\n  _classPrivateFieldLooseBase(this, _bitmap)[_bitmap] = data.bitmap;\n  if (!fromId) {\n    _classPrivateFieldLooseBase(this, _bitmapId)[_bitmapId] = data.id;\n    _classPrivateFieldLooseBase(this, _isSvg)[_isSvg] = data.isSvg;\n  }\n  if (data.file) {\n    _classPrivateFieldLooseBase(this, _bitmapFileName)[_bitmapFileName] = data.file.name;\n  }\n  _classPrivateFieldLooseBase(this, _createCanvas3)[_createCanvas3]();\n}\nfunction _getBitmapDone2() {\n  _classPrivateFieldLooseBase(this, _bitmapPromise)[_bitmapPromise] = null;\n  this._uiManager.enableWaiting(false);\n  if (!_classPrivateFieldLooseBase(this, _canvas)[_canvas]) {\n    return;\n  }\n  if (this._uiManager.useNewAltTextWhenAddingImage && this._uiManager.useNewAltTextFlow && _classPrivateFieldLooseBase(this, _bitmap)[_bitmap]) {\n    this._editToolbar.hide();\n    this._uiManager.editAltText(this, true);\n    return;\n  }\n  if (!this._uiManager.useNewAltTextWhenAddingImage && this._uiManager.useNewAltTextFlow && _classPrivateFieldLooseBase(this, _bitmap)[_bitmap]) {\n    this._reportTelemetry({\n      action: \"pdfjs.image.image_added\",\n      data: {\n        alt_text_modal: false,\n        alt_text_type: \"empty\"\n      }\n    });\n    try {\n      this.mlGuessAltText();\n    } catch {}\n  }\n  this.div.focus();\n}\nfunction _getBitmap2() {\n  if (_classPrivateFieldLooseBase(this, _bitmapId)[_bitmapId]) {\n    this._uiManager.enableWaiting(true);\n    this._uiManager.imageManager.getFromId(_classPrivateFieldLooseBase(this, _bitmapId)[_bitmapId]).then(data => _classPrivateFieldLooseBase(this, _getBitmapFetched)[_getBitmapFetched](data, true)).finally(() => _classPrivateFieldLooseBase(this, _getBitmapDone)[_getBitmapDone]());\n    return;\n  }\n  if (_classPrivateFieldLooseBase(this, _bitmapUrl)[_bitmapUrl]) {\n    const url = _classPrivateFieldLooseBase(this, _bitmapUrl)[_bitmapUrl];\n    _classPrivateFieldLooseBase(this, _bitmapUrl)[_bitmapUrl] = null;\n    this._uiManager.enableWaiting(true);\n    _classPrivateFieldLooseBase(this, _bitmapPromise)[_bitmapPromise] = this._uiManager.imageManager.getFromUrl(url).then(data => _classPrivateFieldLooseBase(this, _getBitmapFetched)[_getBitmapFetched](data)).finally(() => _classPrivateFieldLooseBase(this, _getBitmapDone)[_getBitmapDone]());\n    return;\n  }\n  if (_classPrivateFieldLooseBase(this, _bitmapFile)[_bitmapFile]) {\n    const file = _classPrivateFieldLooseBase(this, _bitmapFile)[_bitmapFile];\n    _classPrivateFieldLooseBase(this, _bitmapFile)[_bitmapFile] = null;\n    this._uiManager.enableWaiting(true);\n    _classPrivateFieldLooseBase(this, _bitmapPromise)[_bitmapPromise] = this._uiManager.imageManager.getFromFile(file).then(data => _classPrivateFieldLooseBase(this, _getBitmapFetched)[_getBitmapFetched](data)).finally(() => _classPrivateFieldLooseBase(this, _getBitmapDone)[_getBitmapDone]());\n    return;\n  }\n  const input = document.createElement(\"input\");\n  input.type = \"file\";\n  input.accept = _StampEditor.supportedTypesStr;\n  const signal = this._uiManager._signal;\n  _classPrivateFieldLooseBase(this, _bitmapPromise)[_bitmapPromise] = new Promise(resolve => {\n    input.addEventListener(\"change\", async () => {\n      if (!input.files || input.files.length === 0) {\n        this.remove();\n      } else {\n        this._uiManager.enableWaiting(true);\n        const data = await this._uiManager.imageManager.getFromFile(input.files[0]);\n        this._reportTelemetry({\n          action: \"pdfjs.image.image_selected\",\n          data: {\n            alt_text_modal: this._uiManager.useNewAltTextFlow\n          }\n        });\n        _classPrivateFieldLooseBase(this, _getBitmapFetched)[_getBitmapFetched](data);\n      }\n      resolve();\n    }, {\n      signal\n    });\n    input.addEventListener(\"cancel\", () => {\n      this.remove();\n      resolve();\n    }, {\n      signal\n    });\n  }).finally(() => _classPrivateFieldLooseBase(this, _getBitmapDone)[_getBitmapDone]());\n  input.click();\n}\nfunction _createCanvas4() {\n  const div = this.div;\n  let _classPrivateFieldLoo176 = _classPrivateFieldLooseBase(this, _bitmap)[_bitmap],\n    width = _classPrivateFieldLoo176.width,\n    height = _classPrivateFieldLoo176.height;\n  const _this$pageDimensions9 = _slicedToArray(this.pageDimensions, 2),\n    pageWidth = _this$pageDimensions9[0],\n    pageHeight = _this$pageDimensions9[1];\n  const MAX_RATIO = 0.75;\n  if (this.width) {\n    width = this.width * pageWidth;\n    height = this.height * pageHeight;\n  } else if (width > MAX_RATIO * pageWidth || height > MAX_RATIO * pageHeight) {\n    const factor = Math.min(MAX_RATIO * pageWidth / width, MAX_RATIO * pageHeight / height);\n    width *= factor;\n    height *= factor;\n  }\n  const _this$parentDimension22 = _slicedToArray(this.parentDimensions, 2),\n    parentWidth = _this$parentDimension22[0],\n    parentHeight = _this$parentDimension22[1];\n  this.setDims(width * parentWidth / pageWidth, height * parentHeight / pageHeight);\n  this._uiManager.enableWaiting(false);\n  const canvas = _classPrivateFieldLooseBase(this, _canvas)[_canvas] = document.createElement(\"canvas\");\n  canvas.setAttribute(\"role\", \"img\");\n  this.addContainer(canvas);\n  if (!this._uiManager.useNewAltTextWhenAddingImage || !this._uiManager.useNewAltTextFlow || this.annotationElementId) {\n    div.hidden = false;\n  }\n  _classPrivateFieldLooseBase(this, _drawBitmap)[_drawBitmap](width, height);\n  _classPrivateFieldLooseBase(this, _createObserver3)[_createObserver3]();\n  if (!_classPrivateFieldLooseBase(this, _hasBeenAddedInUndoStack)[_hasBeenAddedInUndoStack]) {\n    this.parent.addUndoableEditor(this);\n    _classPrivateFieldLooseBase(this, _hasBeenAddedInUndoStack)[_hasBeenAddedInUndoStack] = true;\n  }\n  this._reportTelemetry({\n    action: \"inserted_image\"\n  });\n  if (_classPrivateFieldLooseBase(this, _bitmapFileName)[_bitmapFileName]) {\n    canvas.setAttribute(\"aria-label\", _classPrivateFieldLooseBase(this, _bitmapFileName)[_bitmapFileName]);\n  }\n}\nfunction _setDimensions2(width, height) {\n  var _this$_initialOptions2;\n  const _this$parentDimension23 = _slicedToArray(this.parentDimensions, 2),\n    parentWidth = _this$parentDimension23[0],\n    parentHeight = _this$parentDimension23[1];\n  this.width = width / parentWidth;\n  this.height = height / parentHeight;\n  if ((_this$_initialOptions2 = this._initialOptions) !== null && _this$_initialOptions2 !== void 0 && _this$_initialOptions2.isCentered) {\n    this.center();\n  } else {\n    this.fixAndSetPosition();\n  }\n  this._initialOptions = null;\n  if (_classPrivateFieldLooseBase(this, _resizeTimeoutId)[_resizeTimeoutId] !== null) {\n    clearTimeout(_classPrivateFieldLooseBase(this, _resizeTimeoutId)[_resizeTimeoutId]);\n  }\n  const TIME_TO_WAIT = 200;\n  _classPrivateFieldLooseBase(this, _resizeTimeoutId)[_resizeTimeoutId] = setTimeout(() => {\n    _classPrivateFieldLooseBase(this, _resizeTimeoutId)[_resizeTimeoutId] = null;\n    _classPrivateFieldLooseBase(this, _drawBitmap)[_drawBitmap](width, height);\n  }, TIME_TO_WAIT);\n}\nfunction _scaleBitmap2(width, height) {\n  const _classPrivateFieldLoo177 = _classPrivateFieldLooseBase(this, _bitmap)[_bitmap],\n    bitmapWidth = _classPrivateFieldLoo177.width,\n    bitmapHeight = _classPrivateFieldLoo177.height;\n  let newWidth = bitmapWidth;\n  let newHeight = bitmapHeight;\n  let bitmap = _classPrivateFieldLooseBase(this, _bitmap)[_bitmap];\n  while (newWidth > 2 * width || newHeight > 2 * height) {\n    const prevWidth = newWidth;\n    const prevHeight = newHeight;\n    if (newWidth > 2 * width) {\n      newWidth = newWidth >= 16384 ? Math.floor(newWidth / 2) - 1 : Math.ceil(newWidth / 2);\n    }\n    if (newHeight > 2 * height) {\n      newHeight = newHeight >= 16384 ? Math.floor(newHeight / 2) - 1 : Math.ceil(newHeight / 2);\n    }\n    const offscreen = new OffscreenCanvas(newWidth, newHeight);\n    const ctx = offscreen.getContext(\"2d\");\n    ctx.drawImage(bitmap, 0, 0, prevWidth, prevHeight, 0, 0, newWidth, newHeight);\n    bitmap = offscreen.transferToImageBitmap();\n  }\n  return bitmap;\n}\nfunction _drawBitmap2(width, height) {\n  const outputScale = new OutputScale();\n  const scaledWidth = Math.ceil(width * outputScale.sx);\n  const scaledHeight = Math.ceil(height * outputScale.sy);\n  const canvas = _classPrivateFieldLooseBase(this, _canvas)[_canvas];\n  if (!canvas || canvas.width === scaledWidth && canvas.height === scaledHeight) {\n    return;\n  }\n  canvas.width = scaledWidth;\n  canvas.height = scaledHeight;\n  const bitmap = _classPrivateFieldLooseBase(this, _isSvg)[_isSvg] ? _classPrivateFieldLooseBase(this, _bitmap)[_bitmap] : _classPrivateFieldLooseBase(this, _scaleBitmap)[_scaleBitmap](scaledWidth, scaledHeight);\n  const ctx = canvas.getContext(\"2d\");\n  ctx.filter = this._uiManager.hcmFilter;\n  ctx.drawImage(bitmap, 0, 0, bitmap.width, bitmap.height, 0, 0, scaledWidth, scaledHeight);\n}\nfunction _serializeBitmap2(toUrl) {\n  if (toUrl) {\n    if (_classPrivateFieldLooseBase(this, _isSvg)[_isSvg]) {\n      const url = this._uiManager.imageManager.getSvgUrl(_classPrivateFieldLooseBase(this, _bitmapId)[_bitmapId]);\n      if (url) {\n        return url;\n      }\n    }\n    const canvas = document.createElement(\"canvas\");\n    var _classPrivateFieldLoo178 = _classPrivateFieldLooseBase(this, _bitmap)[_bitmap];\n    canvas.width = _classPrivateFieldLoo178.width;\n    canvas.height = _classPrivateFieldLoo178.height;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.drawImage(_classPrivateFieldLooseBase(this, _bitmap)[_bitmap], 0, 0);\n    return canvas.toDataURL();\n  }\n  if (_classPrivateFieldLooseBase(this, _isSvg)[_isSvg]) {\n    const _this$pageDimensions0 = _slicedToArray(this.pageDimensions, 2),\n      pageWidth = _this$pageDimensions0[0],\n      pageHeight = _this$pageDimensions0[1];\n    const width = Math.round(this.width * pageWidth * PixelsPerInch.PDF_TO_CSS_UNITS);\n    const height = Math.round(this.height * pageHeight * PixelsPerInch.PDF_TO_CSS_UNITS);\n    const offscreen = new OffscreenCanvas(width, height);\n    const ctx = offscreen.getContext(\"2d\");\n    ctx.drawImage(_classPrivateFieldLooseBase(this, _bitmap)[_bitmap], 0, 0, _classPrivateFieldLooseBase(this, _bitmap)[_bitmap].width, _classPrivateFieldLooseBase(this, _bitmap)[_bitmap].height, 0, 0, width, height);\n    return offscreen.transferToImageBitmap();\n  }\n  return structuredClone(_classPrivateFieldLooseBase(this, _bitmap)[_bitmap]);\n}\nfunction _createObserver4() {\n  if (!this._uiManager._signal) {\n    return;\n  }\n  _classPrivateFieldLooseBase(this, _observer2)[_observer2] = new ResizeObserver(entries => {\n    const rect = entries[0].contentRect;\n    if (rect.width && rect.height) {\n      _classPrivateFieldLooseBase(this, _setDimensions)[_setDimensions](rect.width, rect.height);\n    }\n  });\n  _classPrivateFieldLooseBase(this, _observer2)[_observer2].observe(this.div);\n  this._uiManager._signal.addEventListener(\"abort\", () => {\n    var _classPrivateFieldLoo179;\n    (_classPrivateFieldLoo179 = _classPrivateFieldLooseBase(this, _observer2)[_observer2]) === null || _classPrivateFieldLoo179 === void 0 ? void 0 : _classPrivateFieldLoo179.disconnect();\n    _classPrivateFieldLooseBase(this, _observer2)[_observer2] = null;\n  }, {\n    once: true\n  });\n}\nfunction _hasElementChanged6(serialized) {\n  var _serialized$accessibi;\n  const _this$_initialData3 = this._initialData,\n    rect = _this$_initialData3.rect,\n    pageIndex = _this$_initialData3.pageIndex,\n    altText = _this$_initialData3.accessibilityData.altText;\n  const isSameRect = serialized.rect.every((x, i) => Math.abs(x - rect[i]) < 1);\n  const isSamePageIndex = serialized.pageIndex === pageIndex;\n  const isSameAltText = (((_serialized$accessibi = serialized.accessibilityData) === null || _serialized$accessibi === void 0 ? void 0 : _serialized$accessibi.alt) || \"\") === altText;\n  return {\n    isSame: isSameRect && isSamePageIndex && isSameAltText,\n    isSameAltText\n  };\n}\nStampEditor._type = \"stamp\";\nStampEditor._editorType = AnnotationEditorType.STAMP;\n; // ./src/display/editor/annotation_editor_layer.js\nvar _accessibilityManager2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"accessibilityManager\");\nvar _allowClick = /*#__PURE__*/_classPrivateFieldLooseKey(\"allowClick\");\nvar _annotationLayer = /*#__PURE__*/_classPrivateFieldLooseKey(\"annotationLayer\");\nvar _clickAC = /*#__PURE__*/_classPrivateFieldLooseKey(\"clickAC\");\nvar _editorFocusTimeoutId = /*#__PURE__*/_classPrivateFieldLooseKey(\"editorFocusTimeoutId\");\nvar _editors = /*#__PURE__*/_classPrivateFieldLooseKey(\"editors\");\nvar _hadPointerDown = /*#__PURE__*/_classPrivateFieldLooseKey(\"hadPointerDown\");\nvar _isCleaningUp = /*#__PURE__*/_classPrivateFieldLooseKey(\"isCleaningUp\");\nvar _isDisabling = /*#__PURE__*/_classPrivateFieldLooseKey(\"isDisabling\");\nvar _textLayer = /*#__PURE__*/_classPrivateFieldLooseKey(\"textLayer\");\nvar _textSelectionAC = /*#__PURE__*/_classPrivateFieldLooseKey(\"textSelectionAC\");\nvar _uiManager4 = /*#__PURE__*/_classPrivateFieldLooseKey(\"uiManager\");\nvar _editorTypes2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"editorTypes\");\nvar _textLayerPointerDown = /*#__PURE__*/_classPrivateFieldLooseKey(\"textLayerPointerDown\");\nvar _currentEditorType = /*#__PURE__*/_classPrivateFieldLooseKey(\"currentEditorType\");\nvar _createNewEditor = /*#__PURE__*/_classPrivateFieldLooseKey(\"createNewEditor\");\nvar _getCenterPoint = /*#__PURE__*/_classPrivateFieldLooseKey(\"getCenterPoint\");\nvar _cleanup = /*#__PURE__*/_classPrivateFieldLooseKey(\"cleanup\");\nclass AnnotationEditorLayer {\n  constructor(_ref154) {\n    let uiManager = _ref154.uiManager,\n      pageIndex = _ref154.pageIndex,\n      div = _ref154.div,\n      structTreeLayer = _ref154.structTreeLayer,\n      accessibilityManager = _ref154.accessibilityManager,\n      annotationLayer = _ref154.annotationLayer,\n      drawLayer = _ref154.drawLayer,\n      textLayer = _ref154.textLayer,\n      viewport = _ref154.viewport,\n      l10n = _ref154.l10n;\n    Object.defineProperty(this, _cleanup, {\n      value: _cleanup2\n    });\n    Object.defineProperty(this, _getCenterPoint, {\n      value: _getCenterPoint2\n    });\n    Object.defineProperty(this, _createNewEditor, {\n      value: _createNewEditor2\n    });\n    Object.defineProperty(this, _currentEditorType, {\n      get: _get_currentEditorType,\n      set: void 0\n    });\n    Object.defineProperty(this, _textLayerPointerDown, {\n      value: _textLayerPointerDown2\n    });\n    Object.defineProperty(this, _accessibilityManager2, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _allowClick, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _annotationLayer, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _clickAC, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _editorFocusTimeoutId, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _editors, {\n      writable: true,\n      value: new Map()\n    });\n    Object.defineProperty(this, _hadPointerDown, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _isCleaningUp, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _isDisabling, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _textLayer, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _textSelectionAC, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _uiManager4, {\n      writable: true,\n      value: void 0\n    });\n    const editorTypes = [..._classPrivateFieldLooseBase(AnnotationEditorLayer, _editorTypes2)[_editorTypes2].values()];\n    if (!AnnotationEditorLayer._initialized) {\n      AnnotationEditorLayer._initialized = true;\n      for (const editorType of editorTypes) {\n        editorType.initialize(l10n, uiManager);\n      }\n    }\n    uiManager.registerEditorTypes(editorTypes);\n    _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4] = uiManager;\n    this.pageIndex = pageIndex;\n    this.div = div;\n    _classPrivateFieldLooseBase(this, _accessibilityManager2)[_accessibilityManager2] = accessibilityManager;\n    _classPrivateFieldLooseBase(this, _annotationLayer)[_annotationLayer] = annotationLayer;\n    this.viewport = viewport;\n    _classPrivateFieldLooseBase(this, _textLayer)[_textLayer] = textLayer;\n    this.drawLayer = drawLayer;\n    this._structTree = structTreeLayer;\n    _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].addLayer(this);\n  }\n  get isEmpty() {\n    return _classPrivateFieldLooseBase(this, _editors)[_editors].size === 0;\n  }\n  get isInvisible() {\n    return this.isEmpty && _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].getMode() === AnnotationEditorType.NONE;\n  }\n  updateToolbar(mode) {\n    _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].updateToolbar(mode);\n  }\n  updateMode() {\n    let mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].getMode();\n    _classPrivateFieldLooseBase(this, _cleanup)[_cleanup]();\n    switch (mode) {\n      case AnnotationEditorType.NONE:\n        this.disableTextSelection();\n        this.togglePointerEvents(false);\n        this.toggleAnnotationLayerPointerEvents(true);\n        this.disableClick();\n        return;\n      case AnnotationEditorType.INK:\n        this.addInkEditorIfNeeded(false);\n        this.disableTextSelection();\n        this.togglePointerEvents(true);\n        this.disableClick();\n        break;\n      case AnnotationEditorType.HIGHLIGHT:\n        this.enableTextSelection();\n        this.togglePointerEvents(false);\n        this.disableClick();\n        break;\n      default:\n        this.disableTextSelection();\n        this.togglePointerEvents(true);\n        this.enableClick();\n    }\n    this.toggleAnnotationLayerPointerEvents(false);\n    const classList = this.div.classList;\n    for (const editorType of _classPrivateFieldLooseBase(AnnotationEditorLayer, _editorTypes2)[_editorTypes2].values()) {\n      classList.toggle(`${editorType._type}Editing`, mode === editorType._editorType);\n    }\n    this.div.hidden = false;\n  }\n  hasTextLayer(textLayer) {\n    var _classPrivateFieldLoo111;\n    return textLayer === ((_classPrivateFieldLoo111 = _classPrivateFieldLooseBase(this, _textLayer)[_textLayer]) === null || _classPrivateFieldLoo111 === void 0 ? void 0 : _classPrivateFieldLoo111.div);\n  }\n  addInkEditorIfNeeded(isCommitting) {\n    if (_classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].getMode() !== AnnotationEditorType.INK) {\n      return;\n    }\n    if (!isCommitting) {\n      for (const editor of _classPrivateFieldLooseBase(this, _editors)[_editors].values()) {\n        if (editor.isEmpty()) {\n          editor.setInBackground();\n          return;\n        }\n      }\n    }\n    const editor = this.createAndAddNewEditor({\n      offsetX: 0,\n      offsetY: 0\n    }, false);\n    editor.setInBackground();\n  }\n  setEditingState(isEditing) {\n    _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].setEditingState(isEditing);\n  }\n  addCommands(params) {\n    _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].addCommands(params);\n  }\n  toggleDrawing() {\n    let enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this.div.classList.toggle(\"drawing\", !enabled);\n  }\n  togglePointerEvents() {\n    let enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this.div.classList.toggle(\"disabled\", !enabled);\n  }\n  toggleAnnotationLayerPointerEvents() {\n    var _classPrivateFieldLoo112;\n    let enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    (_classPrivateFieldLoo112 = _classPrivateFieldLooseBase(this, _annotationLayer)[_annotationLayer]) === null || _classPrivateFieldLoo112 === void 0 ? void 0 : _classPrivateFieldLoo112.div.classList.toggle(\"disabled\", !enabled);\n  }\n  async enable() {\n    this.div.tabIndex = 0;\n    this.togglePointerEvents(true);\n    const annotationElementIds = new Set();\n    for (const editor of _classPrivateFieldLooseBase(this, _editors)[_editors].values()) {\n      editor.enableEditing();\n      editor.show(true);\n      if (editor.annotationElementId) {\n        _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].removeChangedExistingAnnotation(editor);\n        annotationElementIds.add(editor.annotationElementId);\n      }\n    }\n    if (!_classPrivateFieldLooseBase(this, _annotationLayer)[_annotationLayer]) {\n      return;\n    }\n    const editables = _classPrivateFieldLooseBase(this, _annotationLayer)[_annotationLayer].getEditableAnnotations();\n    for (const editable of editables) {\n      editable.hide();\n      if (_classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].isDeletedAnnotationElement(editable.data.id)) {\n        continue;\n      }\n      if (annotationElementIds.has(editable.data.id)) {\n        continue;\n      }\n      const editor = await this.deserialize(editable);\n      if (!editor) {\n        continue;\n      }\n      this.addOrRebuild(editor);\n      editor.enableEditing();\n    }\n  }\n  disable() {\n    _classPrivateFieldLooseBase(this, _isDisabling)[_isDisabling] = true;\n    this.div.tabIndex = -1;\n    this.togglePointerEvents(false);\n    const changedAnnotations = new Map();\n    const resetAnnotations = new Map();\n    for (const editor of _classPrivateFieldLooseBase(this, _editors)[_editors].values()) {\n      var _this$getEditableAnno;\n      editor.disableEditing();\n      if (!editor.annotationElementId) {\n        continue;\n      }\n      if (editor.serialize() !== null) {\n        changedAnnotations.set(editor.annotationElementId, editor);\n        continue;\n      } else {\n        resetAnnotations.set(editor.annotationElementId, editor);\n      }\n      (_this$getEditableAnno = this.getEditableAnnotation(editor.annotationElementId)) === null || _this$getEditableAnno === void 0 ? void 0 : _this$getEditableAnno.show();\n      editor.remove();\n    }\n    if (_classPrivateFieldLooseBase(this, _annotationLayer)[_annotationLayer]) {\n      const editables = _classPrivateFieldLooseBase(this, _annotationLayer)[_annotationLayer].getEditableAnnotations();\n      for (const editable of editables) {\n        const id = editable.data.id;\n        if (_classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].isDeletedAnnotationElement(id)) {\n          continue;\n        }\n        let editor = resetAnnotations.get(id);\n        if (editor) {\n          editor.resetAnnotationElement(editable);\n          editor.show(false);\n          editable.show();\n          continue;\n        }\n        editor = changedAnnotations.get(id);\n        if (editor) {\n          _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].addChangedExistingAnnotation(editor);\n          if (editor.renderAnnotationElement(editable)) {\n            editor.show(false);\n          }\n        }\n        editable.show();\n      }\n    }\n    _classPrivateFieldLooseBase(this, _cleanup)[_cleanup]();\n    if (this.isEmpty) {\n      this.div.hidden = true;\n    }\n    const classList = this.div.classList;\n    for (const editorType of _classPrivateFieldLooseBase(AnnotationEditorLayer, _editorTypes2)[_editorTypes2].values()) {\n      classList.remove(`${editorType._type}Editing`);\n    }\n    this.disableTextSelection();\n    this.toggleAnnotationLayerPointerEvents(true);\n    _classPrivateFieldLooseBase(this, _isDisabling)[_isDisabling] = false;\n  }\n  getEditableAnnotation(id) {\n    var _classPrivateFieldLoo113;\n    return ((_classPrivateFieldLoo113 = _classPrivateFieldLooseBase(this, _annotationLayer)[_annotationLayer]) === null || _classPrivateFieldLoo113 === void 0 ? void 0 : _classPrivateFieldLoo113.getEditableAnnotation(id)) || null;\n  }\n  setActiveEditor(editor) {\n    const currentActive = _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].getActive();\n    if (currentActive === editor) {\n      return;\n    }\n    _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].setActiveEditor(editor);\n  }\n  enableTextSelection() {\n    var _classPrivateFieldLoo114;\n    this.div.tabIndex = -1;\n    if ((_classPrivateFieldLoo114 = _classPrivateFieldLooseBase(this, _textLayer)[_textLayer]) !== null && _classPrivateFieldLoo114 !== void 0 && _classPrivateFieldLoo114.div && !_classPrivateFieldLooseBase(this, _textSelectionAC)[_textSelectionAC]) {\n      _classPrivateFieldLooseBase(this, _textSelectionAC)[_textSelectionAC] = new AbortController();\n      const signal = _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].combinedSignal(_classPrivateFieldLooseBase(this, _textSelectionAC)[_textSelectionAC]);\n      _classPrivateFieldLooseBase(this, _textLayer)[_textLayer].div.addEventListener(\"pointerdown\", _classPrivateFieldLooseBase(this, _textLayerPointerDown)[_textLayerPointerDown].bind(this), {\n        signal\n      });\n      _classPrivateFieldLooseBase(this, _textLayer)[_textLayer].div.classList.add(\"highlighting\");\n    }\n  }\n  disableTextSelection() {\n    var _classPrivateFieldLoo115;\n    this.div.tabIndex = 0;\n    if ((_classPrivateFieldLoo115 = _classPrivateFieldLooseBase(this, _textLayer)[_textLayer]) !== null && _classPrivateFieldLoo115 !== void 0 && _classPrivateFieldLoo115.div && _classPrivateFieldLooseBase(this, _textSelectionAC)[_textSelectionAC]) {\n      _classPrivateFieldLooseBase(this, _textSelectionAC)[_textSelectionAC].abort();\n      _classPrivateFieldLooseBase(this, _textSelectionAC)[_textSelectionAC] = null;\n      _classPrivateFieldLooseBase(this, _textLayer)[_textLayer].div.classList.remove(\"highlighting\");\n    }\n  }\n  enableClick() {\n    if (_classPrivateFieldLooseBase(this, _clickAC)[_clickAC]) {\n      return;\n    }\n    _classPrivateFieldLooseBase(this, _clickAC)[_clickAC] = new AbortController();\n    const signal = _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].combinedSignal(_classPrivateFieldLooseBase(this, _clickAC)[_clickAC]);\n    this.div.addEventListener(\"pointerdown\", this.pointerdown.bind(this), {\n      signal\n    });\n    this.div.addEventListener(\"pointerup\", this.pointerup.bind(this), {\n      signal\n    });\n  }\n  disableClick() {\n    var _classPrivateFieldLoo116;\n    (_classPrivateFieldLoo116 = _classPrivateFieldLooseBase(this, _clickAC)[_clickAC]) === null || _classPrivateFieldLoo116 === void 0 ? void 0 : _classPrivateFieldLoo116.abort();\n    _classPrivateFieldLooseBase(this, _clickAC)[_clickAC] = null;\n  }\n  attach(editor) {\n    _classPrivateFieldLooseBase(this, _editors)[_editors].set(editor.id, editor);\n    const annotationElementId = editor.annotationElementId;\n    if (annotationElementId && _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].isDeletedAnnotationElement(annotationElementId)) {\n      _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].removeDeletedAnnotationElement(editor);\n    }\n  }\n  detach(editor) {\n    var _classPrivateFieldLoo117;\n    _classPrivateFieldLooseBase(this, _editors)[_editors].delete(editor.id);\n    (_classPrivateFieldLoo117 = _classPrivateFieldLooseBase(this, _accessibilityManager2)[_accessibilityManager2]) === null || _classPrivateFieldLoo117 === void 0 ? void 0 : _classPrivateFieldLoo117.removePointerInTextLayer(editor.contentDiv);\n    if (!_classPrivateFieldLooseBase(this, _isDisabling)[_isDisabling] && editor.annotationElementId) {\n      _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].addDeletedAnnotationElement(editor);\n    }\n  }\n  remove(editor) {\n    this.detach(editor);\n    _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].removeEditor(editor);\n    editor.div.remove();\n    editor.isAttachedToDOM = false;\n    if (!_classPrivateFieldLooseBase(this, _isCleaningUp)[_isCleaningUp]) {\n      this.addInkEditorIfNeeded(false);\n    }\n  }\n  changeParent(editor) {\n    var _editor$parent;\n    if (editor.parent === this) {\n      return;\n    }\n    if (editor.parent && editor.annotationElementId) {\n      _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].addDeletedAnnotationElement(editor.annotationElementId);\n      AnnotationEditor.deleteAnnotationElement(editor);\n      editor.annotationElementId = null;\n    }\n    this.attach(editor);\n    (_editor$parent = editor.parent) === null || _editor$parent === void 0 ? void 0 : _editor$parent.detach(editor);\n    editor.setParent(this);\n    if (editor.div && editor.isAttachedToDOM) {\n      editor.div.remove();\n      this.div.append(editor.div);\n    }\n  }\n  add(editor) {\n    if (editor.parent === this && editor.isAttachedToDOM) {\n      return;\n    }\n    this.changeParent(editor);\n    _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].addEditor(editor);\n    this.attach(editor);\n    if (!editor.isAttachedToDOM) {\n      const div = editor.render();\n      this.div.append(div);\n      editor.isAttachedToDOM = true;\n    }\n    editor.fixAndSetPosition();\n    editor.onceAdded();\n    _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].addToAnnotationStorage(editor);\n    editor._reportTelemetry(editor.telemetryInitialData);\n  }\n  moveEditorInDOM(editor) {\n    var _classPrivateFieldLoo118;\n    if (!editor.isAttachedToDOM) {\n      return;\n    }\n    const _document3 = document,\n      activeElement = _document3.activeElement;\n    if (editor.div.contains(activeElement) && !_classPrivateFieldLooseBase(this, _editorFocusTimeoutId)[_editorFocusTimeoutId]) {\n      editor._focusEventsAllowed = false;\n      _classPrivateFieldLooseBase(this, _editorFocusTimeoutId)[_editorFocusTimeoutId] = setTimeout(() => {\n        _classPrivateFieldLooseBase(this, _editorFocusTimeoutId)[_editorFocusTimeoutId] = null;\n        if (!editor.div.contains(document.activeElement)) {\n          editor.div.addEventListener(\"focusin\", () => {\n            editor._focusEventsAllowed = true;\n          }, {\n            once: true,\n            signal: _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4]._signal\n          });\n          activeElement.focus();\n        } else {\n          editor._focusEventsAllowed = true;\n        }\n      }, 0);\n    }\n    editor._structTreeParentId = (_classPrivateFieldLoo118 = _classPrivateFieldLooseBase(this, _accessibilityManager2)[_accessibilityManager2]) === null || _classPrivateFieldLoo118 === void 0 ? void 0 : _classPrivateFieldLoo118.moveElementInDOM(this.div, editor.div, editor.contentDiv, true);\n  }\n  addOrRebuild(editor) {\n    if (editor.needsToBeRebuilt()) {\n      editor.parent || (editor.parent = this);\n      editor.rebuild();\n      editor.show();\n    } else {\n      this.add(editor);\n    }\n  }\n  addUndoableEditor(editor) {\n    const cmd = () => editor._uiManager.rebuild(editor);\n    const undo = () => {\n      editor.remove();\n    };\n    this.addCommands({\n      cmd,\n      undo,\n      mustExec: false\n    });\n  }\n  getNextId() {\n    return _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].getId();\n  }\n  combinedSignal(ac) {\n    return _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].combinedSignal(ac);\n  }\n  canCreateNewEmptyEditor() {\n    var _classPrivateFieldLoo119;\n    return (_classPrivateFieldLoo119 = _classPrivateFieldLooseBase(this, _currentEditorType)[_currentEditorType]) === null || _classPrivateFieldLoo119 === void 0 ? void 0 : _classPrivateFieldLoo119.canCreateNewEmptyEditor();\n  }\n  pasteEditor(mode, params) {\n    _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].updateToolbar(mode);\n    _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].updateMode(mode);\n    const _classPrivateFieldLoo120 = _classPrivateFieldLooseBase(this, _getCenterPoint)[_getCenterPoint](),\n      offsetX = _classPrivateFieldLoo120.offsetX,\n      offsetY = _classPrivateFieldLoo120.offsetY;\n    const id = this.getNextId();\n    const editor = _classPrivateFieldLooseBase(this, _createNewEditor)[_createNewEditor](_objectSpread({\n      parent: this,\n      id,\n      x: offsetX,\n      y: offsetY,\n      uiManager: _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4],\n      isCentered: true\n    }, params));\n    if (editor) {\n      this.add(editor);\n    }\n  }\n  async deserialize(data) {\n    var _classPrivateFieldLoo121, _data$annotationType;\n    return (await ((_classPrivateFieldLoo121 = _classPrivateFieldLooseBase(AnnotationEditorLayer, _editorTypes2)[_editorTypes2].get((_data$annotationType = data.annotationType) !== null && _data$annotationType !== void 0 ? _data$annotationType : data.annotationEditorType)) === null || _classPrivateFieldLoo121 === void 0 ? void 0 : _classPrivateFieldLoo121.deserialize(data, this, _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4]))) || null;\n  }\n  createAndAddNewEditor(event, isCentered) {\n    let data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const id = this.getNextId();\n    const editor = _classPrivateFieldLooseBase(this, _createNewEditor)[_createNewEditor](_objectSpread({\n      parent: this,\n      id,\n      x: event.offsetX,\n      y: event.offsetY,\n      uiManager: _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4],\n      isCentered\n    }, data));\n    if (editor) {\n      this.add(editor);\n    }\n    return editor;\n  }\n  addNewEditor() {\n    this.createAndAddNewEditor(_classPrivateFieldLooseBase(this, _getCenterPoint)[_getCenterPoint](), true);\n  }\n  setSelected(editor) {\n    _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].setSelected(editor);\n  }\n  toggleSelected(editor) {\n    _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].toggleSelected(editor);\n  }\n  unselect(editor) {\n    _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].unselect(editor);\n  }\n  pointerup(event) {\n    const isMac = util_FeatureTest.platform.isMac;\n    if (event.button !== 0 || event.ctrlKey && isMac) {\n      return;\n    }\n    if (event.target !== this.div) {\n      return;\n    }\n    if (!_classPrivateFieldLooseBase(this, _hadPointerDown)[_hadPointerDown]) {\n      return;\n    }\n    _classPrivateFieldLooseBase(this, _hadPointerDown)[_hadPointerDown] = false;\n    if (!_classPrivateFieldLooseBase(this, _allowClick)[_allowClick]) {\n      _classPrivateFieldLooseBase(this, _allowClick)[_allowClick] = true;\n      return;\n    }\n    if (_classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].getMode() === AnnotationEditorType.STAMP) {\n      _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].unselectAll();\n      return;\n    }\n    this.createAndAddNewEditor(event, false);\n  }\n  pointerdown(event) {\n    if (_classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].getMode() === AnnotationEditorType.HIGHLIGHT) {\n      this.enableTextSelection();\n    }\n    if (_classPrivateFieldLooseBase(this, _hadPointerDown)[_hadPointerDown]) {\n      _classPrivateFieldLooseBase(this, _hadPointerDown)[_hadPointerDown] = false;\n      return;\n    }\n    const isMac = util_FeatureTest.platform.isMac;\n    if (event.button !== 0 || event.ctrlKey && isMac) {\n      return;\n    }\n    if (event.target !== this.div) {\n      return;\n    }\n    _classPrivateFieldLooseBase(this, _hadPointerDown)[_hadPointerDown] = true;\n    const editor = _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].getActive();\n    _classPrivateFieldLooseBase(this, _allowClick)[_allowClick] = !editor || editor.isEmpty();\n  }\n  findNewParent(editor, x, y) {\n    const layer = _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].findParent(x, y);\n    if (layer === null || layer === this) {\n      return false;\n    }\n    layer.changeParent(editor);\n    return true;\n  }\n  destroy() {\n    var _classPrivateFieldLoo122;\n    if (((_classPrivateFieldLoo122 = _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].getActive()) === null || _classPrivateFieldLoo122 === void 0 ? void 0 : _classPrivateFieldLoo122.parent) === this) {\n      _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].commitOrRemove();\n      _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].setActiveEditor(null);\n    }\n    if (_classPrivateFieldLooseBase(this, _editorFocusTimeoutId)[_editorFocusTimeoutId]) {\n      clearTimeout(_classPrivateFieldLooseBase(this, _editorFocusTimeoutId)[_editorFocusTimeoutId]);\n      _classPrivateFieldLooseBase(this, _editorFocusTimeoutId)[_editorFocusTimeoutId] = null;\n    }\n    for (const editor of _classPrivateFieldLooseBase(this, _editors)[_editors].values()) {\n      var _classPrivateFieldLoo123;\n      (_classPrivateFieldLoo123 = _classPrivateFieldLooseBase(this, _accessibilityManager2)[_accessibilityManager2]) === null || _classPrivateFieldLoo123 === void 0 ? void 0 : _classPrivateFieldLoo123.removePointerInTextLayer(editor.contentDiv);\n      editor.setParent(null);\n      editor.isAttachedToDOM = false;\n      editor.div.remove();\n    }\n    this.div = null;\n    _classPrivateFieldLooseBase(this, _editors)[_editors].clear();\n    _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].removeLayer(this);\n  }\n  render(_ref155) {\n    let viewport = _ref155.viewport;\n    this.viewport = viewport;\n    setLayerDimensions(this.div, viewport);\n    for (const editor of _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].getEditors(this.pageIndex)) {\n      this.add(editor);\n      editor.rebuild();\n    }\n    this.updateMode();\n  }\n  update(_ref156) {\n    let viewport = _ref156.viewport;\n    _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].commitOrRemove();\n    _classPrivateFieldLooseBase(this, _cleanup)[_cleanup]();\n    const oldRotation = this.viewport.rotation;\n    const rotation = viewport.rotation;\n    this.viewport = viewport;\n    setLayerDimensions(this.div, {\n      rotation\n    });\n    if (oldRotation !== rotation) {\n      for (const editor of _classPrivateFieldLooseBase(this, _editors)[_editors].values()) {\n        editor.rotate(rotation);\n      }\n    }\n    this.addInkEditorIfNeeded(false);\n  }\n  get pageDimensions() {\n    const _this$viewport$rawDim = this.viewport.rawDims,\n      pageWidth = _this$viewport$rawDim.pageWidth,\n      pageHeight = _this$viewport$rawDim.pageHeight;\n    return [pageWidth, pageHeight];\n  }\n  get scale() {\n    return _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].viewParameters.realScale;\n  }\n}\n_AnnotationEditorLayer = AnnotationEditorLayer;\nfunction _textLayerPointerDown2(event) {\n  _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].unselectAll();\n  const target = event.target;\n  if (target === _classPrivateFieldLooseBase(this, _textLayer)[_textLayer].div || (target.getAttribute(\"role\") === \"img\" || target.classList.contains(\"endOfContent\")) && _classPrivateFieldLooseBase(this, _textLayer)[_textLayer].div.contains(target)) {\n    const isMac = util_FeatureTest.platform.isMac;\n    if (event.button !== 0 || event.ctrlKey && isMac) {\n      return;\n    }\n    _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].showAllEditors(\"highlight\", true, true);\n    _classPrivateFieldLooseBase(this, _textLayer)[_textLayer].div.classList.add(\"free\");\n    this.toggleDrawing();\n    HighlightEditor.startHighlighting(this, _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].direction === \"ltr\", {\n      target: _classPrivateFieldLooseBase(this, _textLayer)[_textLayer].div,\n      x: event.x,\n      y: event.y\n    });\n    _classPrivateFieldLooseBase(this, _textLayer)[_textLayer].div.addEventListener(\"pointerup\", () => {\n      _classPrivateFieldLooseBase(this, _textLayer)[_textLayer].div.classList.remove(\"free\");\n      this.toggleDrawing(true);\n    }, {\n      once: true,\n      signal: _classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4]._signal\n    });\n    event.preventDefault();\n  }\n}\nfunction _get_currentEditorType() {\n  return _classPrivateFieldLooseBase(_AnnotationEditorLayer, _editorTypes2)[_editorTypes2].get(_classPrivateFieldLooseBase(this, _uiManager4)[_uiManager4].getMode());\n}\nfunction _createNewEditor2(params) {\n  const editorType = _classPrivateFieldLooseBase(this, _currentEditorType)[_currentEditorType];\n  return editorType ? new editorType.prototype.constructor(params) : null;\n}\nfunction _getCenterPoint2() {\n  const _this$div$getBounding2 = this.div.getBoundingClientRect(),\n    x = _this$div$getBounding2.x,\n    y = _this$div$getBounding2.y,\n    width = _this$div$getBounding2.width,\n    height = _this$div$getBounding2.height;\n  const tlX = Math.max(0, x);\n  const tlY = Math.max(0, y);\n  const brX = Math.min(window.innerWidth, x + width);\n  const brY = Math.min(window.innerHeight, y + height);\n  const centerX = (tlX + brX) / 2 - x;\n  const centerY = (tlY + brY) / 2 - y;\n  const _ref180 = this.viewport.rotation % 180 === 0 ? [centerX, centerY] : [centerY, centerX],\n    _ref181 = _slicedToArray(_ref180, 2),\n    offsetX = _ref181[0],\n    offsetY = _ref181[1];\n  return {\n    offsetX,\n    offsetY\n  };\n}\nfunction _cleanup2() {\n  _classPrivateFieldLooseBase(this, _isCleaningUp)[_isCleaningUp] = true;\n  for (const editor of _classPrivateFieldLooseBase(this, _editors)[_editors].values()) {\n    if (editor.isEmpty()) {\n      editor.remove();\n    }\n  }\n  _classPrivateFieldLooseBase(this, _isCleaningUp)[_isCleaningUp] = false;\n}\nAnnotationEditorLayer._initialized = false;\nObject.defineProperty(AnnotationEditorLayer, _editorTypes2, {\n  writable: true,\n  value: new Map([FreeTextEditor, InkEditor, StampEditor, HighlightEditor].map(type => [type._editorType, type]))\n});\n; // ./src/display/draw_layer.js\nvar _parent2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"parent\");\nvar _id5 = /*#__PURE__*/_classPrivateFieldLooseKey(\"id\");\nvar _mapping = /*#__PURE__*/_classPrivateFieldLooseKey(\"mapping\");\nvar _toUpdate = /*#__PURE__*/_classPrivateFieldLooseKey(\"toUpdate\");\nvar _setBox = /*#__PURE__*/_classPrivateFieldLooseKey(\"setBox\");\nvar _createSVG = /*#__PURE__*/_classPrivateFieldLooseKey(\"createSVG\");\nvar _createClipPath = /*#__PURE__*/_classPrivateFieldLooseKey(\"createClipPath\");\nclass DrawLayer {\n  constructor(_ref157) {\n    let pageIndex = _ref157.pageIndex;\n    Object.defineProperty(this, _createClipPath, {\n      value: _createClipPath2\n    });\n    Object.defineProperty(this, _createSVG, {\n      value: _createSVG2\n    });\n    Object.defineProperty(this, _parent2, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _id5, {\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, _mapping, {\n      writable: true,\n      value: new Map()\n    });\n    Object.defineProperty(this, _toUpdate, {\n      writable: true,\n      value: new Map()\n    });\n    this.pageIndex = pageIndex;\n  }\n  setParent(parent) {\n    if (!_classPrivateFieldLooseBase(this, _parent2)[_parent2]) {\n      _classPrivateFieldLooseBase(this, _parent2)[_parent2] = parent;\n      return;\n    }\n    if (_classPrivateFieldLooseBase(this, _parent2)[_parent2] !== parent) {\n      if (_classPrivateFieldLooseBase(this, _mapping)[_mapping].size > 0) {\n        for (const root of _classPrivateFieldLooseBase(this, _mapping)[_mapping].values()) {\n          root.remove();\n          parent.append(root);\n        }\n      }\n      _classPrivateFieldLooseBase(this, _parent2)[_parent2] = parent;\n    }\n  }\n  static get _svgFactory() {\n    return shadow(this, \"_svgFactory\", new DOMSVGFactory());\n  }\n  draw(outlines, color, opacity) {\n    let isPathUpdatable = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    const id = _classPrivateFieldLooseBase(this, _id5)[_id5]++;\n    const root = _classPrivateFieldLooseBase(this, _createSVG)[_createSVG](outlines.box);\n    root.classList.add(...outlines.classNamesForDrawing);\n    const defs = DrawLayer._svgFactory.createElement(\"defs\");\n    root.append(defs);\n    const path = DrawLayer._svgFactory.createElement(\"path\");\n    defs.append(path);\n    const pathId = `path_p${this.pageIndex}_${id}`;\n    path.setAttribute(\"id\", pathId);\n    path.setAttribute(\"d\", outlines.toSVGPath());\n    if (isPathUpdatable) {\n      _classPrivateFieldLooseBase(this, _toUpdate)[_toUpdate].set(id, path);\n    }\n    const clipPathId = _classPrivateFieldLooseBase(this, _createClipPath)[_createClipPath](defs, pathId);\n    const use = DrawLayer._svgFactory.createElement(\"use\");\n    root.append(use);\n    root.setAttribute(\"fill\", color);\n    root.setAttribute(\"fill-opacity\", opacity);\n    use.setAttribute(\"href\", `#${pathId}`);\n    _classPrivateFieldLooseBase(this, _mapping)[_mapping].set(id, root);\n    return {\n      id,\n      clipPathId: `url(#${clipPathId})`\n    };\n  }\n  drawOutline(outlines) {\n    const id = _classPrivateFieldLooseBase(this, _id5)[_id5]++;\n    const root = _classPrivateFieldLooseBase(this, _createSVG)[_createSVG](outlines.box);\n    root.classList.add(...outlines.classNamesForOutlining);\n    const defs = DrawLayer._svgFactory.createElement(\"defs\");\n    root.append(defs);\n    const path = DrawLayer._svgFactory.createElement(\"path\");\n    defs.append(path);\n    const pathId = `path_p${this.pageIndex}_${id}`;\n    path.setAttribute(\"id\", pathId);\n    path.setAttribute(\"d\", outlines.toSVGPath());\n    path.setAttribute(\"vector-effect\", \"non-scaling-stroke\");\n    let maskId;\n    if (outlines.mustRemoveSelfIntersections) {\n      const mask = DrawLayer._svgFactory.createElement(\"mask\");\n      defs.append(mask);\n      maskId = `mask_p${this.pageIndex}_${id}`;\n      mask.setAttribute(\"id\", maskId);\n      mask.setAttribute(\"maskUnits\", \"objectBoundingBox\");\n      const rect = DrawLayer._svgFactory.createElement(\"rect\");\n      mask.append(rect);\n      rect.setAttribute(\"width\", \"1\");\n      rect.setAttribute(\"height\", \"1\");\n      rect.setAttribute(\"fill\", \"white\");\n      const use = DrawLayer._svgFactory.createElement(\"use\");\n      mask.append(use);\n      use.setAttribute(\"href\", `#${pathId}`);\n      use.setAttribute(\"stroke\", \"none\");\n      use.setAttribute(\"fill\", \"black\");\n      use.setAttribute(\"fill-rule\", \"nonzero\");\n      use.classList.add(\"mask\");\n    }\n    const use1 = DrawLayer._svgFactory.createElement(\"use\");\n    root.append(use1);\n    use1.setAttribute(\"href\", `#${pathId}`);\n    if (maskId) {\n      use1.setAttribute(\"mask\", `url(#${maskId})`);\n    }\n    const use2 = use1.cloneNode();\n    root.append(use2);\n    use1.classList.add(\"mainOutline\");\n    use2.classList.add(\"secondaryOutline\");\n    _classPrivateFieldLooseBase(this, _mapping)[_mapping].set(id, root);\n    return id;\n  }\n  finalizeLine(id, line) {\n    const path = _classPrivateFieldLooseBase(this, _toUpdate)[_toUpdate].get(id);\n    _classPrivateFieldLooseBase(this, _toUpdate)[_toUpdate].delete(id);\n    this.updateBox(id, line.box);\n    path.setAttribute(\"d\", line.toSVGPath());\n  }\n  updateLine(id, line) {\n    const root = _classPrivateFieldLooseBase(this, _mapping)[_mapping].get(id);\n    const defs = root.firstChild;\n    const path = defs.firstChild;\n    path.setAttribute(\"d\", line.toSVGPath());\n  }\n  updatePath(id, line) {\n    _classPrivateFieldLooseBase(this, _toUpdate)[_toUpdate].get(id).setAttribute(\"d\", line.toSVGPath());\n  }\n  updateBox(id, box) {\n    _classPrivateFieldLooseBase(DrawLayer, _setBox)[_setBox](_classPrivateFieldLooseBase(this, _mapping)[_mapping].get(id), box);\n  }\n  show(id, visible) {\n    _classPrivateFieldLooseBase(this, _mapping)[_mapping].get(id).classList.toggle(\"hidden\", !visible);\n  }\n  rotate(id, angle) {\n    _classPrivateFieldLooseBase(this, _mapping)[_mapping].get(id).setAttribute(\"data-main-rotation\", angle);\n  }\n  changeColor(id, color) {\n    _classPrivateFieldLooseBase(this, _mapping)[_mapping].get(id).setAttribute(\"fill\", color);\n  }\n  changeOpacity(id, opacity) {\n    _classPrivateFieldLooseBase(this, _mapping)[_mapping].get(id).setAttribute(\"fill-opacity\", opacity);\n  }\n  addClass(id, className) {\n    _classPrivateFieldLooseBase(this, _mapping)[_mapping].get(id).classList.add(className);\n  }\n  removeClass(id, className) {\n    _classPrivateFieldLooseBase(this, _mapping)[_mapping].get(id).classList.remove(className);\n  }\n  getSVGRoot(id) {\n    return _classPrivateFieldLooseBase(this, _mapping)[_mapping].get(id);\n  }\n  remove(id) {\n    _classPrivateFieldLooseBase(this, _toUpdate)[_toUpdate].delete(id);\n    if (_classPrivateFieldLooseBase(this, _parent2)[_parent2] === null) {\n      return;\n    }\n    _classPrivateFieldLooseBase(this, _mapping)[_mapping].get(id).remove();\n    _classPrivateFieldLooseBase(this, _mapping)[_mapping].delete(id);\n  }\n  destroy() {\n    _classPrivateFieldLooseBase(this, _parent2)[_parent2] = null;\n    for (const root of _classPrivateFieldLooseBase(this, _mapping)[_mapping].values()) {\n      root.remove();\n    }\n    _classPrivateFieldLooseBase(this, _mapping)[_mapping].clear();\n    _classPrivateFieldLooseBase(this, _toUpdate)[_toUpdate].clear();\n  }\n}\n_DrawLayer = DrawLayer;\nfunction _setBox2(element) {\n  let _ref182 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref182$x = _ref182.x,\n    x = _ref182$x === void 0 ? 0 : _ref182$x,\n    _ref182$y = _ref182.y,\n    y = _ref182$y === void 0 ? 0 : _ref182$y,\n    _ref182$width = _ref182.width,\n    width = _ref182$width === void 0 ? 1 : _ref182$width,\n    _ref182$height = _ref182.height,\n    height = _ref182$height === void 0 ? 1 : _ref182$height;\n  const style = element.style;\n  style.top = `${100 * y}%`;\n  style.left = `${100 * x}%`;\n  style.width = `${100 * width}%`;\n  style.height = `${100 * height}%`;\n}\nfunction _createSVG2(box) {\n  const svg = _DrawLayer._svgFactory.create(1, 1, true);\n  _classPrivateFieldLooseBase(this, _parent2)[_parent2].append(svg);\n  svg.setAttribute(\"aria-hidden\", true);\n  _classPrivateFieldLooseBase(_DrawLayer, _setBox)[_setBox](svg, box);\n  return svg;\n}\nfunction _createClipPath2(defs, pathId) {\n  const clipPath = _DrawLayer._svgFactory.createElement(\"clipPath\");\n  defs.append(clipPath);\n  const clipPathId = `clip_${pathId}`;\n  clipPath.setAttribute(\"id\", clipPathId);\n  clipPath.setAttribute(\"clipPathUnits\", \"objectBoundingBox\");\n  const clipPathUse = _DrawLayer._svgFactory.createElement(\"use\");\n  clipPath.append(clipPathUse);\n  clipPathUse.setAttribute(\"href\", `#${pathId}`);\n  clipPathUse.classList.add(\"clip\");\n  return clipPathId;\n}\nObject.defineProperty(DrawLayer, _setBox, {\n  value: _setBox2\n});\n; // ./src/pdf.js\n\nconst pdfjsVersion = \"4.8.69\";\nconst pdfjsBuild = \"3634dab10\";\nvar __webpack_exports__AbortException = __webpack_exports__.AbortException;\nvar __webpack_exports__AnnotationEditorLayer = __webpack_exports__.AnnotationEditorLayer;\nvar __webpack_exports__AnnotationEditorParamsType = __webpack_exports__.AnnotationEditorParamsType;\nvar __webpack_exports__AnnotationEditorType = __webpack_exports__.AnnotationEditorType;\nvar __webpack_exports__AnnotationEditorUIManager = __webpack_exports__.AnnotationEditorUIManager;\nvar __webpack_exports__AnnotationLayer = __webpack_exports__.AnnotationLayer;\nvar __webpack_exports__AnnotationMode = __webpack_exports__.AnnotationMode;\nvar __webpack_exports__ColorPicker = __webpack_exports__.ColorPicker;\nvar __webpack_exports__DOMSVGFactory = __webpack_exports__.DOMSVGFactory;\nvar __webpack_exports__DrawLayer = __webpack_exports__.DrawLayer;\nvar __webpack_exports__FeatureTest = __webpack_exports__.FeatureTest;\nvar __webpack_exports__GlobalWorkerOptions = __webpack_exports__.GlobalWorkerOptions;\nvar __webpack_exports__ImageKind = __webpack_exports__.ImageKind;\nvar __webpack_exports__InvalidPDFException = __webpack_exports__.InvalidPDFException;\nvar __webpack_exports__MissingPDFException = __webpack_exports__.MissingPDFException;\nvar __webpack_exports__OPS = __webpack_exports__.OPS;\nvar __webpack_exports__OutputScale = __webpack_exports__.OutputScale;\nvar __webpack_exports__PDFDataRangeTransport = __webpack_exports__.PDFDataRangeTransport;\nvar __webpack_exports__PDFDateString = __webpack_exports__.PDFDateString;\nvar __webpack_exports__PDFWorker = __webpack_exports__.PDFWorker;\nvar __webpack_exports__PasswordResponses = __webpack_exports__.PasswordResponses;\nvar __webpack_exports__PermissionFlag = __webpack_exports__.PermissionFlag;\nvar __webpack_exports__PixelsPerInch = __webpack_exports__.PixelsPerInch;\nvar __webpack_exports__RenderingCancelledException = __webpack_exports__.RenderingCancelledException;\nvar __webpack_exports__TextLayer = __webpack_exports__.TextLayer;\nvar __webpack_exports__UnexpectedResponseException = __webpack_exports__.UnexpectedResponseException;\nvar __webpack_exports__Util = __webpack_exports__.Util;\nvar __webpack_exports__VerbosityLevel = __webpack_exports__.VerbosityLevel;\nvar __webpack_exports__XfaLayer = __webpack_exports__.XfaLayer;\nvar __webpack_exports__build = __webpack_exports__.build;\nvar __webpack_exports__createValidAbsoluteUrl = __webpack_exports__.createValidAbsoluteUrl;\nvar __webpack_exports__fetchData = __webpack_exports__.fetchData;\nvar __webpack_exports__getDocument = __webpack_exports__.getDocument;\nvar __webpack_exports__getFilenameFromUrl = __webpack_exports__.getFilenameFromUrl;\nvar __webpack_exports__getPdfFilenameFromUrl = __webpack_exports__.getPdfFilenameFromUrl;\nvar __webpack_exports__getXfaPageViewport = __webpack_exports__.getXfaPageViewport;\nvar __webpack_exports__isDataScheme = __webpack_exports__.isDataScheme;\nvar __webpack_exports__isPdfFile = __webpack_exports__.isPdfFile;\nvar __webpack_exports__noContextMenu = __webpack_exports__.noContextMenu;\nvar __webpack_exports__normalizeUnicode = __webpack_exports__.normalizeUnicode;\nvar __webpack_exports__setLayerDimensions = __webpack_exports__.setLayerDimensions;\nvar __webpack_exports__shadow = __webpack_exports__.shadow;\nvar __webpack_exports__version = __webpack_exports__.version;\nexport { __webpack_exports__AbortException as AbortException, __webpack_exports__AnnotationEditorLayer as AnnotationEditorLayer, __webpack_exports__AnnotationEditorParamsType as AnnotationEditorParamsType, __webpack_exports__AnnotationEditorType as AnnotationEditorType, __webpack_exports__AnnotationEditorUIManager as AnnotationEditorUIManager, __webpack_exports__AnnotationLayer as AnnotationLayer, __webpack_exports__AnnotationMode as AnnotationMode, __webpack_exports__ColorPicker as ColorPicker, __webpack_exports__DOMSVGFactory as DOMSVGFactory, __webpack_exports__DrawLayer as DrawLayer, __webpack_exports__FeatureTest as FeatureTest, __webpack_exports__GlobalWorkerOptions as GlobalWorkerOptions, __webpack_exports__ImageKind as ImageKind, __webpack_exports__InvalidPDFException as InvalidPDFException, __webpack_exports__MissingPDFException as MissingPDFException, __webpack_exports__OPS as OPS, __webpack_exports__OutputScale as OutputScale, __webpack_exports__PDFDataRangeTransport as PDFDataRangeTransport, __webpack_exports__PDFDateString as PDFDateString, __webpack_exports__PDFWorker as PDFWorker, __webpack_exports__PasswordResponses as PasswordResponses, __webpack_exports__PermissionFlag as PermissionFlag, __webpack_exports__PixelsPerInch as PixelsPerInch, __webpack_exports__RenderingCancelledException as RenderingCancelledException, __webpack_exports__TextLayer as TextLayer, __webpack_exports__UnexpectedResponseException as UnexpectedResponseException, __webpack_exports__Util as Util, __webpack_exports__VerbosityLevel as VerbosityLevel, __webpack_exports__XfaLayer as XfaLayer, __webpack_exports__build as build, __webpack_exports__createValidAbsoluteUrl as createValidAbsoluteUrl, __webpack_exports__fetchData as fetchData, __webpack_exports__getDocument as getDocument, __webpack_exports__getFilenameFromUrl as getFilenameFromUrl, __webpack_exports__getPdfFilenameFromUrl as getPdfFilenameFromUrl, __webpack_exports__getXfaPageViewport as getXfaPageViewport, __webpack_exports__isDataScheme as isDataScheme, __webpack_exports__isPdfFile as isPdfFile, __webpack_exports__noContextMenu as noContextMenu, __webpack_exports__normalizeUnicode as normalizeUnicode, __webpack_exports__setLayerDimensions as setLayerDimensions, __webpack_exports__shadow as shadow, __webpack_exports__version as version };","map":null,"metadata":{},"sourceType":"module"}